# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:02:28+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, confloat, conint, constr


class AbortAction(Enum):
    CANCEL = 'CANCEL'


class AbortThresholdPercentage(RootModel[confloat(le=100.0)]):
    root: confloat(le=100.0)


class AcceptCertificateTransferRequest(BaseModel):
    pass


class AcmCertificateArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-cn|-us-gov|-iso-b|-iso)?:acm:[a-z]{2}-(gov-|iso-|isob-)?[a-z]{4,9}-\d{1}:\d{12}:certificate/[a-zA-Z0-9/-]+',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-cn|-us-gov|-iso-b|-iso)?:acm:[a-z]{2}-(gov-|iso-|isob-)?[a-z]{4,9}-\d{1}:\d{12}:certificate/[a-zA-Z0-9/-]+',
        min_length=1,
        max_length=2048,
    )


class ActionType(Enum):
    PUBLISH = 'PUBLISH'
    SUBSCRIBE = 'SUBSCRIBE'
    RECEIVE = 'RECEIVE'
    CONNECT = 'CONNECT'


class AddThingToBillingGroupResponse(BaseModel):
    pass


class AddThingToThingGroupResponse(BaseModel):
    pass


class AggregationField(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class AggregationTypeName(Enum):
    Statistics = 'Statistics'
    Percentiles = 'Percentiles'
    Cardinality = 'Cardinality'


class AggregationTypeValue(
    RootModel[constr(pattern=r'[a-zA-Z0-9]+', min_length=1, max_length=12)]
):
    root: constr(pattern=r'[a-zA-Z0-9]+', min_length=1, max_length=12)


class AggregationTypeValues(RootModel[List[AggregationTypeValue]]):
    root: List[AggregationTypeValue]


class AlarmName(RootModel[str]):
    root: str


class AlertTargetArn(RootModel[str]):
    root: str


class AlertTargetType(Enum):
    SNS = 'SNS'


class AllowAuthorizerOverride(RootModel[bool]):
    root: bool


class AllowAutoRegistration(RootModel[bool]):
    root: bool


class ApproximateSecondsBeforeTimedOut(RootModel[int]):
    root: int


class AscendingOrder(RootModel[bool]):
    root: bool


class AssetId(RootModel[str]):
    root: str


class AssetPropertyAlias(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class AssetPropertyBooleanValue(RootModel[str]):
    root: str


class AssetPropertyDoubleValue(RootModel[str]):
    root: str


class AssetPropertyEntryId(RootModel[str]):
    root: str


class AssetPropertyId(RootModel[str]):
    root: str


class AssetPropertyIntegerValue(RootModel[str]):
    root: str


class AssetPropertyOffsetInNanos(RootModel[str]):
    root: str


class AssetPropertyQuality(RootModel[str]):
    root: str


class AssetPropertyStringValue(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class AssetPropertyTimeInSeconds(RootModel[str]):
    root: str


class AssetPropertyTimestamp(BaseModel):
    offsetInNanos: Optional[AssetPropertyOffsetInNanos] = None
    timeInSeconds: AssetPropertyTimeInSeconds


class AssetPropertyVariant(BaseModel):
    booleanValue: Optional[AssetPropertyBooleanValue] = None
    doubleValue: Optional[AssetPropertyDoubleValue] = None
    integerValue: Optional[AssetPropertyIntegerValue] = None
    stringValue: Optional[AssetPropertyStringValue] = None


class AttachPrincipalPolicyRequest(BaseModel):
    pass


class AttachSecurityProfileRequest(BaseModel):
    pass


class AttachSecurityProfileResponse(BaseModel):
    pass


class AttachThingPrincipalRequest(BaseModel):
    pass


class AttachThingPrincipalResponse(BaseModel):
    pass


class AttributeKey(RootModel[str]):
    root: str


class AttributeName(RootModel[constr(pattern=r'[a-zA-Z0-9_.,@/:#-]+', max_length=128)]):
    root: constr(pattern=r'[a-zA-Z0-9_.,@/:#-]+', max_length=128)


class AttributeValue(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.,@/:#-]*', max_length=800)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.,@/:#-]*', max_length=800)


class Attributes(RootModel[Optional[Dict[str, AttributeValue]]]):
    root: Optional[Dict[str, AttributeValue]] = None


class AuditCheckName(RootModel[str]):
    root: str = Field(
        ...,
        description='An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)',
    )


class AuditCheckRunStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    WAITING_FOR_DATA_COLLECTION = 'WAITING_FOR_DATA_COLLECTION'
    CANCELED = 'CANCELED'
    COMPLETED_COMPLIANT = 'COMPLETED_COMPLIANT'
    COMPLETED_NON_COMPLIANT = 'COMPLETED_NON_COMPLIANT'
    FAILED = 'FAILED'


class AuditDescription(RootModel[constr(pattern=r'[\p{Graph}\x20]*', max_length=1000)]):
    root: constr(pattern=r'[\p{Graph}\x20]*', max_length=1000)


class AuditFindingSeverity(Enum):
    CRITICAL = 'CRITICAL'
    HIGH = 'HIGH'
    MEDIUM = 'MEDIUM'
    LOW = 'LOW'


class AuditFrequency(Enum):
    DAILY = 'DAILY'
    WEEKLY = 'WEEKLY'
    BIWEEKLY = 'BIWEEKLY'
    MONTHLY = 'MONTHLY'


class AuditMitigationActionsExecutionStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    CANCELED = 'CANCELED'
    SKIPPED = 'SKIPPED'
    PENDING = 'PENDING'


class AuditMitigationActionsTaskStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    CANCELED = 'CANCELED'


class AuditNotificationType(Enum):
    SNS = 'SNS'


class AuditTaskId(
    RootModel[constr(pattern=r'[a-zA-Z0-9\-]+', min_length=1, max_length=40)]
):
    root: constr(pattern=r'[a-zA-Z0-9\-]+', min_length=1, max_length=40)


class AuditTaskStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    CANCELED = 'CANCELED'


class AuditTaskType(Enum):
    ON_DEMAND_AUDIT_TASK = 'ON_DEMAND_AUDIT_TASK'
    SCHEDULED_AUDIT_TASK = 'SCHEDULED_AUDIT_TASK'


class AuthDecision(Enum):
    ALLOWED = 'ALLOWED'
    EXPLICIT_DENY = 'EXPLICIT_DENY'
    IMPLICIT_DENY = 'IMPLICIT_DENY'


class AuthorizerArn(RootModel[constr(max_length=2048)]):
    root: constr(max_length=2048)


class AuthorizerFunctionArn(RootModel[constr(pattern=r'[\s\S]*', max_length=2048)]):
    root: constr(pattern=r'[\s\S]*', max_length=2048)


class AuthorizerName(
    RootModel[constr(pattern=r'[\w=,@-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[\w=,@-]+', min_length=1, max_length=128)


class AuthorizerStatus(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'


class AuthorizerSummary(BaseModel):
    authorizerArn: Optional[AuthorizerArn] = None
    authorizerName: Optional[AuthorizerName] = None


class Authorizers(RootModel[List[AuthorizerSummary]]):
    root: List[AuthorizerSummary]


class AutoRegistrationStatus(Enum):
    ENABLE = 'ENABLE'
    DISABLE = 'DISABLE'


class Average(RootModel[float]):
    root: float


class AwsAccountId(RootModel[constr(pattern=r'[0-9]+', min_length=12, max_length=12)]):
    root: constr(pattern=r'[0-9]+', min_length=12, max_length=12)


class AwsArn(RootModel[str]):
    root: str


class AwsIotJobArn(RootModel[str]):
    root: str


class AwsIotJobId(RootModel[str]):
    root: str


class AwsIotSqlVersion(RootModel[str]):
    root: str


class AwsJobAbortCriteriaAbortAction(Enum):
    CANCEL = 'CANCEL'


class AwsJobAbortCriteriaAbortThresholdPercentage(RootModel[confloat(le=100.0)]):
    root: confloat(le=100.0)


class AwsJobAbortCriteriaFailureType(Enum):
    FAILED = 'FAILED'
    REJECTED = 'REJECTED'
    TIMED_OUT = 'TIMED_OUT'
    ALL = 'ALL'


class AwsJobAbortCriteriaMinimumNumberOfExecutedThings(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AwsJobRateIncreaseCriteriaNumberOfThings(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class AwsJobRolloutIncrementFactor(RootModel[float]):
    root: float


class AwsJobRolloutRatePerMinute(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class AwsJobTimeoutInProgressTimeoutInMinutes(RootModel[int]):
    root: int


class BatchMode(RootModel[bool]):
    root: bool


class BehaviorCriteriaType(Enum):
    STATIC = 'STATIC'
    STATISTICAL = 'STATISTICAL'
    MACHINE_LEARNING = 'MACHINE_LEARNING'


class BehaviorMetric(RootModel[str]):
    root: str


class BehaviorName(
    RootModel[constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)


class BillingGroupArn(RootModel[str]):
    root: str


class BillingGroupDescription(
    RootModel[constr(pattern=r'[\p{Graph}\x20]*', max_length=2028)]
):
    root: constr(pattern=r'[\p{Graph}\x20]*', max_length=2028)


class BillingGroupId(
    RootModel[constr(pattern=r'[a-zA-Z0-9\-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9\-]+', min_length=1, max_length=128)


class BillingGroupName(
    RootModel[constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)


class BillingGroupProperties(BaseModel):
    billingGroupDescription: Optional[BillingGroupDescription] = None


class Boolean(RootModel[bool]):
    root: bool


class BooleanKey(RootModel[bool]):
    root: bool


class BooleanWrapperObject(RootModel[bool]):
    root: bool


class BucketKeyValue(RootModel[str]):
    root: str


class BucketName(RootModel[str]):
    root: str


class CACertificateStatus(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'


class CACertificateUpdateAction(Enum):
    DEACTIVATE = 'DEACTIVATE'


class CancelAuditMitigationActionsTaskRequest(BaseModel):
    pass


class CancelAuditMitigationActionsTaskResponse(BaseModel):
    pass


class CancelAuditTaskRequest(BaseModel):
    pass


class CancelAuditTaskResponse(BaseModel):
    pass


class CancelCertificateTransferRequest(BaseModel):
    pass


class CancelDetectMitigationActionsTaskRequest(BaseModel):
    pass


class CancelDetectMitigationActionsTaskResponse(BaseModel):
    pass


class CanceledChecksCount(RootModel[int]):
    root: int


class CanceledFindingsCount(RootModel[int]):
    root: int


class CanceledThings(RootModel[int]):
    root: int


class CannedAccessControlList(Enum):
    private = 'private'
    public_read = 'public-read'
    public_read_write = 'public-read-write'
    aws_exec_read = 'aws-exec-read'
    authenticated_read = 'authenticated-read'
    bucket_owner_read = 'bucket-owner-read'
    bucket_owner_full_control = 'bucket-owner-full-control'
    log_delivery_write = 'log-delivery-write'


class CertificateArn(RootModel[str]):
    root: str


class CertificateConflictException(RootModel[Any]):
    root: Any


class CertificateId(
    RootModel[constr(pattern=r'(0x)?[a-fA-F0-9]+', min_length=64, max_length=64)]
):
    root: constr(pattern=r'(0x)?[a-fA-F0-9]+', min_length=64, max_length=64)


class CertificateMode(Enum):
    DEFAULT = 'DEFAULT'
    SNI_ONLY = 'SNI_ONLY'


class CertificateName(RootModel[str]):
    root: str


class CertificatePathOnDevice(RootModel[str]):
    root: str


class CertificatePem(
    RootModel[constr(pattern=r'[\s\S]*', min_length=1, max_length=65536)]
):
    root: constr(pattern=r'[\s\S]*', min_length=1, max_length=65536) = Field(
        ..., description='The PEM of a certificate.'
    )


class CertificateSigningRequest(
    RootModel[constr(pattern=r'[\s\S]*', min_length=1, max_length=4096)]
):
    root: constr(pattern=r'[\s\S]*', min_length=1, max_length=4096)


class CertificateStateException(RootModel[Any]):
    root: Any


class CertificateStatus(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    REVOKED = 'REVOKED'
    PENDING_TRANSFER = 'PENDING_TRANSFER'
    REGISTER_INACTIVE = 'REGISTER_INACTIVE'
    PENDING_ACTIVATION = 'PENDING_ACTIVATION'


class CertificateValidationException(RootModel[Any]):
    root: Any


class ChannelName(RootModel[str]):
    root: str


class CheckCompliant(RootModel[bool]):
    root: bool


class Cidr(
    RootModel[constr(pattern=r'[a-fA-F0-9:\.\/]+', min_length=2, max_length=43)]
):
    root: constr(pattern=r'[a-fA-F0-9:\.\/]+', min_length=2, max_length=43)


class Cidrs(RootModel[List[Cidr]]):
    root: List[Cidr]


class ClearDefaultAuthorizerRequest(BaseModel):
    pass


class ClearDefaultAuthorizerResponse(BaseModel):
    pass


class ClientId(RootModel[str]):
    root: str


class ClientRequestToken(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64)


class Code(RootModel[str]):
    root: str


class CognitoIdentityPoolId(RootModel[str]):
    root: str


class Comment(RootModel[constr(pattern=r'[^\p{C}]+', max_length=2028)]):
    root: constr(pattern=r'[^\p{C}]+', max_length=2028)


class ComparisonOperator(Enum):
    less_than = 'less-than'
    less_than_equals = 'less-than-equals'
    greater_than = 'greater-than'
    greater_than_equals = 'greater-than-equals'
    in_cidr_set = 'in-cidr-set'
    not_in_cidr_set = 'not-in-cidr-set'
    in_port_set = 'in-port-set'
    not_in_port_set = 'not-in-port-set'
    in_set = 'in-set'
    not_in_set = 'not-in-set'


class CompliantChecksCount(RootModel[int]):
    root: int


class ConfidenceLevel(Enum):
    LOW = 'LOW'
    MEDIUM = 'MEDIUM'
    HIGH = 'HIGH'


class ConfirmTopicRuleDestinationRequest(BaseModel):
    pass


class ConfirmTopicRuleDestinationResponse(BaseModel):
    pass


class ConfirmationToken(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class ConflictException(RootModel[Any]):
    root: Any


class ConflictingResourceUpdateException(RootModel[Any]):
    root: Any


class ConnectivityTimestamp(RootModel[int]):
    root: int


class ConsecutiveDatapointsToAlarm(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class ConsecutiveDatapointsToClear(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class ContentType(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class CorrelationData(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class Count(RootModel[int]):
    root: int


class CreateAuditSuppressionResponse(BaseModel):
    pass


class CreateAuthorizerResponse(BaseModel):
    authorizerArn: Optional[AuthorizerArn] = None
    authorizerName: Optional[AuthorizerName] = None


class CreateBillingGroupResponse(BaseModel):
    billingGroupArn: Optional[BillingGroupArn] = None
    billingGroupId: Optional[BillingGroupId] = None
    billingGroupName: Optional[BillingGroupName] = None


class CreateCertificateFromCsrRequest(BaseModel):
    certificateSigningRequest: CertificateSigningRequest


class CreateCertificateFromCsrResponse(BaseModel):
    certificateArn: Optional[CertificateArn] = None
    certificateId: Optional[CertificateId] = None
    certificatePem: Optional[CertificatePem] = None


class CreateKeysAndCertificateRequest(BaseModel):
    pass


class CreateProvisioningClaimRequest(BaseModel):
    pass


class CreatedAtDate(RootModel[datetime]):
    root: datetime


class CreationDate(RootModel[datetime]):
    root: datetime


class CredentialDurationSeconds(RootModel[conint(ge=900, le=43200)]):
    root: conint(ge=900, le=43200)


class CronExpression(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class CustomMetricArn(RootModel[str]):
    root: str


class CustomMetricDisplayName(
    RootModel[constr(pattern=r'[\p{Graph}\x20]*', max_length=128)]
):
    root: constr(pattern=r'[\p{Graph}\x20]*', max_length=128)


class CustomMetricType(Enum):
    string_list = 'string-list'
    ip_address_list = 'ip-address-list'
    number_list = 'number-list'
    number = 'number'


class CustomerVersion(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class DataCollectionPercentage(RootModel[confloat(ge=0.0, le=100.0)]):
    root: confloat(ge=0.0, le=100.0)


class DateType(RootModel[datetime]):
    root: datetime


class DayOfMonth(RootModel[constr(pattern=r'^([1-9]|[12][0-9]|3[01])$|^LAST$')]):
    root: constr(pattern=r'^([1-9]|[12][0-9]|3[01])$|^LAST$')


class DayOfWeek(Enum):
    SUN = 'SUN'
    MON = 'MON'
    TUE = 'TUE'
    WED = 'WED'
    THU = 'THU'
    FRI = 'FRI'
    SAT = 'SAT'


class DeleteAccountAuditConfigurationRequest(BaseModel):
    pass


class DeleteAccountAuditConfigurationResponse(BaseModel):
    pass


class DeleteAdditionalMetricsToRetain(RootModel[bool]):
    root: bool


class DeleteAlertTargets(RootModel[bool]):
    root: bool


class DeleteAuditSuppressionResponse(BaseModel):
    pass


class DeleteAuthorizerRequest(BaseModel):
    pass


class DeleteAuthorizerResponse(BaseModel):
    pass


class DeleteBehaviors(RootModel[bool]):
    root: bool


class DeleteBillingGroupRequest(BaseModel):
    pass


class DeleteBillingGroupResponse(BaseModel):
    pass


class DeleteCACertificateRequest(BaseModel):
    pass


class DeleteCACertificateResponse(BaseModel):
    pass


class DeleteCertificateRequest(BaseModel):
    pass


class DeleteConflictException(RootModel[Any]):
    root: Any


class DeleteCustomMetricRequest(BaseModel):
    pass


class DeleteCustomMetricResponse(BaseModel):
    pass


class DeleteDimensionRequest(BaseModel):
    pass


class DeleteDimensionResponse(BaseModel):
    pass


class DeleteDomainConfigurationRequest(BaseModel):
    pass


class DeleteDomainConfigurationResponse(BaseModel):
    pass


class DeleteDynamicThingGroupRequest(BaseModel):
    pass


class DeleteDynamicThingGroupResponse(BaseModel):
    pass


class DeleteFleetMetricRequest(BaseModel):
    pass


class DeleteJobExecutionRequest(BaseModel):
    pass


class DeleteJobRequest(BaseModel):
    pass


class DeleteJobTemplateRequest(BaseModel):
    pass


class DeleteMitigationActionRequest(BaseModel):
    pass


class DeleteMitigationActionResponse(BaseModel):
    pass


class DeleteOTAUpdateRequest(BaseModel):
    pass


class DeleteOTAUpdateResponse(BaseModel):
    pass


class DeletePolicyRequest(BaseModel):
    pass


class DeletePolicyVersionRequest(BaseModel):
    pass


class DeleteProvisioningTemplateRequest(BaseModel):
    pass


class DeleteProvisioningTemplateResponse(BaseModel):
    pass


class DeleteProvisioningTemplateVersionRequest(BaseModel):
    pass


class DeleteProvisioningTemplateVersionResponse(BaseModel):
    pass


class DeleteRegistrationCodeRequest(BaseModel):
    pass


class DeleteRegistrationCodeResponse(BaseModel):
    pass


class DeleteRoleAliasRequest(BaseModel):
    pass


class DeleteRoleAliasResponse(BaseModel):
    pass


class DeleteScheduledAuditRequest(BaseModel):
    pass


class DeleteScheduledAuditResponse(BaseModel):
    pass


class DeleteScheduledAudits(RootModel[bool]):
    root: bool


class DeleteSecurityProfileRequest(BaseModel):
    pass


class DeleteSecurityProfileResponse(BaseModel):
    pass


class DeleteStream(RootModel[bool]):
    root: bool


class DeleteStreamRequest(BaseModel):
    pass


class DeleteStreamResponse(BaseModel):
    pass


class DeleteThingGroupRequest(BaseModel):
    pass


class DeleteThingGroupResponse(BaseModel):
    pass


class DeleteThingRequest(BaseModel):
    pass


class DeleteThingResponse(BaseModel):
    pass


class DeleteThingTypeRequest(BaseModel):
    pass


class DeleteThingTypeResponse(BaseModel):
    pass


class DeleteTopicRuleDestinationRequest(BaseModel):
    pass


class DeleteTopicRuleDestinationResponse(BaseModel):
    pass


class DeleteTopicRuleRequest(BaseModel):
    pass


class DeleteV2LoggingLevelRequest(BaseModel):
    pass


class DeliveryStreamName(RootModel[str]):
    root: str


class DeprecateThingTypeResponse(BaseModel):
    pass


class DeprecationDate(RootModel[datetime]):
    root: datetime


class DescribeAccountAuditConfigurationRequest(BaseModel):
    pass


class DescribeAuditFindingRequest(BaseModel):
    pass


class DescribeAuditMitigationActionsTaskRequest(BaseModel):
    pass


class DescribeAuditTaskRequest(BaseModel):
    pass


class DescribeAuthorizerRequest(BaseModel):
    pass


class DescribeBillingGroupRequest(BaseModel):
    pass


class DescribeCACertificateRequest(BaseModel):
    pass


class DescribeCertificateRequest(BaseModel):
    pass


class DescribeCustomMetricRequest(BaseModel):
    pass


class DescribeDefaultAuthorizerRequest(BaseModel):
    pass


class DescribeDetectMitigationActionsTaskRequest(BaseModel):
    pass


class DescribeDimensionRequest(BaseModel):
    pass


class DescribeDomainConfigurationRequest(BaseModel):
    pass


class DescribeEndpointRequest(BaseModel):
    pass


class DescribeEventConfigurationsRequest(BaseModel):
    pass


class DescribeFleetMetricRequest(BaseModel):
    pass


class DescribeIndexRequest(BaseModel):
    pass


class DescribeJobExecutionRequest(BaseModel):
    pass


class DescribeJobRequest(BaseModel):
    pass


class DescribeJobTemplateRequest(BaseModel):
    pass


class DescribeManagedJobTemplateRequest(BaseModel):
    pass


class DescribeMitigationActionRequest(BaseModel):
    pass


class DescribeProvisioningTemplateRequest(BaseModel):
    pass


class DescribeProvisioningTemplateVersionRequest(BaseModel):
    pass


class DescribeRoleAliasRequest(BaseModel):
    pass


class DescribeScheduledAuditRequest(BaseModel):
    pass


class DescribeSecurityProfileRequest(BaseModel):
    pass


class DescribeStreamRequest(BaseModel):
    pass


class DescribeThingGroupRequest(BaseModel):
    pass


class DescribeThingRegistrationTaskRequest(BaseModel):
    pass


class DescribeThingRequest(BaseModel):
    pass


class DescribeThingTypeRequest(BaseModel):
    pass


class Description(RootModel[str]):
    root: str


class DetachPrincipalPolicyRequest(BaseModel):
    pass


class DetachSecurityProfileRequest(BaseModel):
    pass


class DetachSecurityProfileResponse(BaseModel):
    pass


class DetachThingPrincipalRequest(BaseModel):
    pass


class DetachThingPrincipalResponse(BaseModel):
    pass


class DetailsKey(
    RootModel[constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)


class DetailsValue(RootModel[constr(pattern=r'[^\p{C}]+', min_length=1)]):
    root: constr(pattern=r'[^\p{C}]+', min_length=1)


class DetectMitigationActionExecutionErrorCode(RootModel[str]):
    root: str


class DetectMitigationActionExecutionStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCESSFUL = 'SUCCESSFUL'
    FAILED = 'FAILED'
    SKIPPED = 'SKIPPED'


class DetectMitigationActionsTaskStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCESSFUL = 'SUCCESSFUL'
    FAILED = 'FAILED'
    CANCELED = 'CANCELED'


class DeviceCertificateUpdateAction(Enum):
    DEACTIVATE = 'DEACTIVATE'


class DeviceDefenderIndexingMode(Enum):
    OFF = 'OFF'
    VIOLATIONS = 'VIOLATIONS'


class DeviceDefenderThingName(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class DimensionArn(RootModel[str]):
    root: str


class DimensionName(
    RootModel[constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)


class DimensionNames(RootModel[List[DimensionName]]):
    root: List[DimensionName]


class DimensionStringValue(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class DimensionStringValues(RootModel[List[DimensionStringValue]]):
    root: List[DimensionStringValue] = Field(..., max_length=100, min_length=1)


class DimensionType(Enum):
    TOPIC_FILTER = 'TOPIC_FILTER'


class DimensionValueOperator(Enum):
    IN = 'IN'
    NOT_IN = 'NOT_IN'


class DisableAllLogs(RootModel[bool]):
    root: bool


class DisableTopicRuleRequest(BaseModel):
    pass


class DisconnectReason(RootModel[str]):
    root: str


class DomainConfigurationArn(RootModel[str]):
    root: str


class DomainConfigurationName(
    RootModel[constr(pattern=r'[\w.-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[\w.-]+', min_length=1, max_length=128)


class DomainConfigurationStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class DomainName(RootModel[constr(pattern=r'[\s\S]*', min_length=1, max_length=253)]):
    root: constr(pattern=r'[\s\S]*', min_length=1, max_length=253)


class DomainType(Enum):
    ENDPOINT = 'ENDPOINT'
    AWS_MANAGED = 'AWS_MANAGED'
    CUSTOMER_MANAGED = 'CUSTOMER_MANAGED'


class DurationInMinutes(RootModel[conint(ge=30, le=1430)]):
    root: conint(ge=30, le=1430)


class DurationSeconds(RootModel[int]):
    root: int


class DynamicGroupStatus(Enum):
    ACTIVE = 'ACTIVE'
    BUILDING = 'BUILDING'
    REBUILDING = 'REBUILDING'


class DynamoKeyType(Enum):
    STRING = 'STRING'
    NUMBER = 'NUMBER'


class DynamoOperation(RootModel[str]):
    root: str


class ElasticsearchEndpoint(RootModel[constr(pattern=r'https?://.*')]):
    root: constr(pattern=r'https?://.*')


class ElasticsearchId(RootModel[str]):
    root: str


class ElasticsearchIndex(RootModel[str]):
    root: str


class ElasticsearchType(RootModel[str]):
    root: str


class EnableCachingForHttp(RootModel[bool]):
    root: bool


class EnableTopicRuleRequest(BaseModel):
    pass


class Enabled(RootModel[bool]):
    root: bool


class EndpointAddress(RootModel[str]):
    root: str


class EndpointType(RootModel[constr(pattern=r'[\s\S]*', max_length=128)]):
    root: constr(pattern=r'[\s\S]*', max_length=128)


class Environment(RootModel[constr(pattern=r'[^\p{C}]+')]):
    root: constr(pattern=r'[^\p{C}]+')


class Environments(RootModel[List[Environment]]):
    root: List[Environment]


class ErrorCode(RootModel[str]):
    root: str


class ErrorMessage(RootModel[constr(max_length=2048)]):
    root: constr(max_length=2048)


class EvaluationStatistic(
    RootModel[
        constr(pattern=r'(p0|p0\.1|p0\.01|p1|p10|p50|p90|p99|p99\.9|p99\.99|p100)')
    ]
):
    root: constr(pattern=r'(p0|p0\.1|p0\.01|p1|p10|p50|p90|p99|p99\.9|p99\.99|p100)')


class EventType(Enum):
    THING = 'THING'
    THING_GROUP = 'THING_GROUP'
    THING_TYPE = 'THING_TYPE'
    THING_GROUP_MEMBERSHIP = 'THING_GROUP_MEMBERSHIP'
    THING_GROUP_HIERARCHY = 'THING_GROUP_HIERARCHY'
    THING_TYPE_ASSOCIATION = 'THING_TYPE_ASSOCIATION'
    JOB = 'JOB'
    JOB_EXECUTION = 'JOB_EXECUTION'
    POLICY = 'POLICY'
    CERTIFICATE = 'CERTIFICATE'
    CA_CERTIFICATE = 'CA_CERTIFICATE'


class Example(RootModel[constr(pattern=r'[^\p{C}]+')]):
    root: constr(pattern=r'[^\p{C}]+')


class ExecutionNamePrefix(RootModel[str]):
    root: str


class ExecutionNumber(RootModel[int]):
    root: int


class ExpectedVersion(RootModel[int]):
    root: int


class ExpiresInSec(RootModel[conint(ge=60, le=3600)]):
    root: conint(ge=60, le=3600)


class ExpiresInSeconds(RootModel[int]):
    root: int


class FailedChecksCount(RootModel[int]):
    root: int


class FailedFindingsCount(RootModel[int]):
    root: int


class FailedThings(RootModel[int]):
    root: int


class FieldName(RootModel[str]):
    root: str


class FieldType(Enum):
    Number = 'Number'
    String = 'String'
    Boolean = 'Boolean'


class FileId(RootModel[conint(ge=0, le=255)]):
    root: conint(ge=0, le=255)


class FileName(RootModel[str]):
    root: str


class FileType(RootModel[conint(ge=0, le=255)]):
    root: conint(ge=0, le=255)


class FindingId(
    RootModel[constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=128)


class FindingIds(RootModel[List[FindingId]]):
    root: List[FindingId] = Field(..., max_length=25, min_length=1)


class FirehoseSeparator(RootModel[constr(pattern=r'([\n\t])|(\r\n)|(,)')]):
    root: constr(pattern=r'([\n\t])|(\r\n)|(,)')


class Flag(RootModel[bool]):
    root: bool


class FleetMetricArn(RootModel[str]):
    root: str


class FleetMetricDescription(
    RootModel[constr(pattern=r'[\p{Graph}\x20]*', max_length=1024)]
):
    root: constr(pattern=r'[\p{Graph}\x20]*', max_length=1024)


class FleetMetricName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_\-\.]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9_\-\.]+', min_length=1, max_length=128)


class FleetMetricNameAndArn(BaseModel):
    metricArn: Optional[FleetMetricArn] = None
    metricName: Optional[FleetMetricName] = None


class FleetMetricNameAndArnList(RootModel[List[FleetMetricNameAndArn]]):
    root: List[FleetMetricNameAndArn]


class FleetMetricPeriod(RootModel[conint(ge=60, le=86400)]):
    root: conint(ge=60, le=86400)


class FleetMetricUnit(Enum):
    Seconds = 'Seconds'
    Microseconds = 'Microseconds'
    Milliseconds = 'Milliseconds'
    Bytes = 'Bytes'
    Kilobytes = 'Kilobytes'
    Megabytes = 'Megabytes'
    Gigabytes = 'Gigabytes'
    Terabytes = 'Terabytes'
    Bits = 'Bits'
    Kilobits = 'Kilobits'
    Megabits = 'Megabits'
    Gigabits = 'Gigabits'
    Terabits = 'Terabits'
    Percent = 'Percent'
    Count = 'Count'
    Bytes_Second = 'Bytes/Second'
    Kilobytes_Second = 'Kilobytes/Second'
    Megabytes_Second = 'Megabytes/Second'
    Gigabytes_Second = 'Gigabytes/Second'
    Terabytes_Second = 'Terabytes/Second'
    Bits_Second = 'Bits/Second'
    Kilobits_Second = 'Kilobits/Second'
    Megabits_Second = 'Megabits/Second'
    Gigabits_Second = 'Gigabits/Second'
    Terabits_Second = 'Terabits/Second'
    Count_Second = 'Count/Second'
    None_ = 'None'


class ForceDelete(RootModel[bool]):
    root: bool


class ForceDeleteAWSJob(RootModel[bool]):
    root: bool


class ForceFlag(RootModel[bool]):
    root: bool


class Forced(RootModel[bool]):
    root: bool


class FunctionArn(RootModel[str]):
    root: str


class GenerationId(RootModel[str]):
    root: str


class GenericLongValue(RootModel[int]):
    root: int


class GetBehaviorModelTrainingSummariesRequest(BaseModel):
    pass


class GetCardinalityResponse(BaseModel):
    cardinality: Optional[Count] = None


class GetIndexingConfigurationRequest(BaseModel):
    pass


class GetJobDocumentRequest(BaseModel):
    pass


class GetLoggingOptionsRequest(BaseModel):
    pass


class GetOTAUpdateRequest(BaseModel):
    pass


class GetPolicyRequest(BaseModel):
    pass


class GetPolicyVersionRequest(BaseModel):
    pass


class GetRegistrationCodeRequest(BaseModel):
    pass


class GetTopicRuleDestinationRequest(BaseModel):
    pass


class GetTopicRuleRequest(BaseModel):
    pass


class GetV2LoggingOptionsRequest(BaseModel):
    pass


class HashAlgorithm(RootModel[str]):
    root: str


class HashKeyField(RootModel[str]):
    root: str


class HashKeyValue(RootModel[str]):
    root: str


class HeaderKey(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class HeaderValue(RootModel[str]):
    root: str


class HttpActionHeader(BaseModel):
    key: HeaderKey
    value: HeaderValue


class HttpHeaderName(
    RootModel[constr(pattern=r'[\s\S]*', min_length=1, max_length=8192)]
):
    root: constr(pattern=r'[\s\S]*', min_length=1, max_length=8192)


class HttpHeaderValue(
    RootModel[constr(pattern=r'[\s\S]*', min_length=1, max_length=8192)]
):
    root: constr(pattern=r'[\s\S]*', min_length=1, max_length=8192)


class HttpHeaders(RootModel[Optional[Dict[str, HttpHeaderValue]]]):
    root: Optional[Dict[str, HttpHeaderValue]] = None


class HttpQueryString(
    RootModel[constr(pattern=r'[\s\S]*', min_length=1, max_length=4096)]
):
    root: constr(pattern=r'[\s\S]*', min_length=1, max_length=4096)


class InProgressChecksCount(RootModel[int]):
    root: int


class InProgressThings(RootModel[int]):
    root: int


class InProgressTimeoutInMinutes(RootModel[int]):
    root: int


class IncrementFactor(RootModel[confloat(ge=1.1, le=5.0)]):
    root: confloat(ge=1.1, le=5.0)


class IndexName(
    RootModel[constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)


class IndexNamesList(RootModel[List[IndexName]]):
    root: List[IndexName]


class IndexNotReadyException(RootModel[Any]):
    root: Any


class IndexSchema(RootModel[str]):
    root: str


class IndexStatus(Enum):
    ACTIVE = 'ACTIVE'
    BUILDING = 'BUILDING'
    REBUILDING = 'REBUILDING'


class InlineDocument(RootModel[str]):
    root: str


class InputName(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class InternalException(RootModel[Any]):
    root: Any


class InternalFailureException(RootModel[Any]):
    root: Any


class InternalServerException(RootModel[Any]):
    root: Any


class InvalidAggregationException(RootModel[Any]):
    root: Any


class InvalidQueryException(RootModel[Any]):
    root: Any


class InvalidRequestException(RootModel[Any]):
    root: Any


class InvalidResponseException(RootModel[Any]):
    root: Any


class InvalidStateTransitionException(RootModel[Any]):
    root: Any


class IotAnalyticsAction(BaseModel):
    batchMode: Optional[BatchMode] = None
    channelArn: Optional[AwsArn] = None
    channelName: Optional[ChannelName] = None
    roleArn: Optional[AwsArn] = None


class IsAuthenticated(RootModel[bool]):
    root: bool


class IsDefaultVersion(RootModel[bool]):
    root: bool


class IsDisabled(RootModel[bool]):
    root: bool


class IsSuppressed(RootModel[bool]):
    root: bool


class IssuerCertificateSerialNumber(
    RootModel[constr(pattern=r'[a-fA-F0-9:]+', max_length=20)]
):
    root: constr(pattern=r'[a-fA-F0-9:]+', max_length=20)


class IssuerCertificateSubject(
    RootModel[constr(pattern=r'[\p{Graph}\x20]*', max_length=1000)]
):
    root: constr(pattern=r'[\p{Graph}\x20]*', max_length=1000)


class IssuerId(RootModel[constr(pattern=r'(0x)?[a-fA-F0-9]+', max_length=64)]):
    root: constr(pattern=r'(0x)?[a-fA-F0-9]+', max_length=64)


class JobArn(RootModel[str]):
    root: str


class JobDescription(RootModel[constr(pattern=r'[^\p{C}]+', max_length=2028)]):
    root: constr(pattern=r'[^\p{C}]+', max_length=2028)


class JobDocument(RootModel[constr(max_length=32768)]):
    root: constr(max_length=32768)


class JobDocumentSource(RootModel[constr(min_length=1, max_length=1350)]):
    root: constr(min_length=1, max_length=1350)


class JobEndBehavior(Enum):
    STOP_ROLLOUT = 'STOP_ROLLOUT'
    CANCEL = 'CANCEL'
    FORCE_CANCEL = 'FORCE_CANCEL'


class JobExecutionFailureType(Enum):
    FAILED = 'FAILED'
    REJECTED = 'REJECTED'
    TIMED_OUT = 'TIMED_OUT'
    ALL = 'ALL'


class JobExecutionStatus(Enum):
    QUEUED = 'QUEUED'
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    TIMED_OUT = 'TIMED_OUT'
    REJECTED = 'REJECTED'
    REMOVED = 'REMOVED'
    CANCELED = 'CANCELED'


class JobId(RootModel[constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=64)]):
    root: constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=64)


class JobStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    CANCELED = 'CANCELED'
    COMPLETED = 'COMPLETED'
    DELETION_IN_PROGRESS = 'DELETION_IN_PROGRESS'
    SCHEDULED = 'SCHEDULED'


class JobTemplateArn(
    RootModel[constr(pattern=r'^arn:[!-~]+$', min_length=1, max_length=1600)]
):
    root: constr(pattern=r'^arn:[!-~]+$', min_length=1, max_length=1600)


class JobTemplateId(
    RootModel[constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=64)


class JobTemplateSummary(BaseModel):
    createdAt: Optional[DateType] = None
    description: Optional[JobDescription] = None
    jobTemplateArn: Optional[JobTemplateArn] = None
    jobTemplateId: Optional[JobTemplateId] = None


class JobTemplateSummaryList(RootModel[List[JobTemplateSummary]]):
    root: List[JobTemplateSummary]


class JsonDocument(RootModel[str]):
    root: str


class Key(RootModel[str]):
    root: str


class KeyName(
    RootModel[constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)


class KeyValue(RootModel[constr(pattern=r'[\s\S]*', max_length=5120)]):
    root: constr(pattern=r'[\s\S]*', max_length=5120)


class LambdaAction(BaseModel):
    functionArn: FunctionArn


class LaserMaxResults(RootModel[conint(ge=1, le=250)]):
    root: conint(ge=1, le=250)


class LastModifiedDate(RootModel[datetime]):
    root: datetime


class LastUpdatedAtDate(RootModel[datetime]):
    root: datetime


class LimitExceededException(RootModel[Any]):
    root: Any


class ListActiveViolationsRequest(BaseModel):
    pass


class ListAttachedPoliciesRequest(BaseModel):
    pass


class ListAuditMitigationActionsExecutionsRequest(BaseModel):
    pass


class ListAuditMitigationActionsTasksRequest(BaseModel):
    pass


class ListAuditTasksRequest(BaseModel):
    pass


class ListAuthorizersRequest(BaseModel):
    pass


class ListBillingGroupsRequest(BaseModel):
    pass


class ListCACertificatesRequest(BaseModel):
    pass


class ListCertificatesByCARequest(BaseModel):
    pass


class ListCertificatesRequest(BaseModel):
    pass


class ListCustomMetricsRequest(BaseModel):
    pass


class ListDetectMitigationActionsExecutionsRequest(BaseModel):
    pass


class ListDetectMitigationActionsTasksRequest(BaseModel):
    pass


class ListDimensionsRequest(BaseModel):
    pass


class ListDomainConfigurationsRequest(BaseModel):
    pass


class ListFleetMetricsRequest(BaseModel):
    pass


class ListIndicesRequest(BaseModel):
    pass


class ListJobExecutionsForJobRequest(BaseModel):
    pass


class ListJobExecutionsForThingRequest(BaseModel):
    pass


class ListJobTemplatesRequest(BaseModel):
    pass


class ListJobsRequest(BaseModel):
    pass


class ListManagedJobTemplatesRequest(BaseModel):
    pass


class ListMetricValuesRequest(BaseModel):
    pass


class ListMitigationActionsRequest(BaseModel):
    pass


class ListOTAUpdatesRequest(BaseModel):
    pass


class ListOutgoingCertificatesRequest(BaseModel):
    pass


class ListPoliciesRequest(BaseModel):
    pass


class ListPolicyPrincipalsRequest(BaseModel):
    pass


class ListPolicyVersionsRequest(BaseModel):
    pass


class ListPrincipalPoliciesRequest(BaseModel):
    pass


class ListPrincipalThingsRequest(BaseModel):
    pass


class ListProvisioningTemplateVersionsRequest(BaseModel):
    pass


class ListProvisioningTemplatesRequest(BaseModel):
    pass


class ListRelatedResourcesForAuditFindingRequest(BaseModel):
    pass


class ListRoleAliasesRequest(BaseModel):
    pass


class ListScheduledAuditsRequest(BaseModel):
    pass


class ListSecurityProfilesForTargetRequest(BaseModel):
    pass


class ListSecurityProfilesRequest(BaseModel):
    pass


class ListStreamsRequest(BaseModel):
    pass


class ListSuppressedAlerts(RootModel[bool]):
    root: bool


class ListSuppressedFindings(RootModel[bool]):
    root: bool


class ListTagsForResourceRequest(BaseModel):
    pass


class ListTargetsForPolicyRequest(BaseModel):
    pass


class ListTargetsForSecurityProfileRequest(BaseModel):
    pass


class ListThingGroupsForThingRequest(BaseModel):
    pass


class ListThingGroupsRequest(BaseModel):
    pass


class ListThingPrincipalsRequest(BaseModel):
    pass


class ListThingRegistrationTaskReportsRequest(BaseModel):
    pass


class ListThingRegistrationTasksRequest(BaseModel):
    pass


class ListThingTypesRequest(BaseModel):
    pass


class ListThingsInBillingGroupRequest(BaseModel):
    pass


class ListThingsInThingGroupRequest(BaseModel):
    pass


class ListThingsRequest(BaseModel):
    pass


class ListTopicRuleDestinationsRequest(BaseModel):
    pass


class ListTopicRulesRequest(BaseModel):
    pass


class ListV2LoggingLevelsRequest(BaseModel):
    pass


class ListViolationEventsRequest(BaseModel):
    pass


class LogGroupName(RootModel[str]):
    root: str


class LogLevel(Enum):
    DEBUG = 'DEBUG'
    INFO = 'INFO'
    ERROR = 'ERROR'
    WARN = 'WARN'
    DISABLED = 'DISABLED'


class LogTargetName(RootModel[str]):
    root: str


class LogTargetType(Enum):
    DEFAULT = 'DEFAULT'
    THING_GROUP = 'THING_GROUP'
    CLIENT_ID = 'CLIENT_ID'
    SOURCE_IP = 'SOURCE_IP'
    PRINCIPAL_ID = 'PRINCIPAL_ID'


class LoggingOptionsPayload(BaseModel):
    logLevel: Optional[LogLevel] = None
    roleArn: AwsArn


class MachineLearningDetectionConfig(BaseModel):
    confidenceLevel: ConfidenceLevel


class MaintenanceWindow(BaseModel):
    durationInMinutes: DurationInMinutes
    startTime: CronExpression


class MaintenanceWindows(RootModel[List[MaintenanceWindow]]):
    root: List[MaintenanceWindow]


class MalformedPolicyException(RootModel[Any]):
    root: Any


class ManagedJobTemplateName(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class ManagedTemplateVersion(RootModel[constr(pattern=r'^[1-9]+.[0-9]+')]):
    root: constr(pattern=r'^[1-9]+.[0-9]+')


class Marker(RootModel[constr(pattern=r'[A-Za-z0-9+/]+={0,2}', max_length=1024)]):
    root: constr(pattern=r'[A-Za-z0-9+/]+={0,2}', max_length=1024)


class MaxBuckets(RootModel[conint(ge=1, le=10000)]):
    root: conint(ge=1, le=10000)


class MaxJobExecutionsPerMin(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MaxResults(RootModel[conint(ge=1, le=250)]):
    root: conint(ge=1, le=250)


class Maximum(RootModel[float]):
    root: float


class MaximumPerMinute(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class Message(RootModel[constr(pattern=r'[\s\S]*', max_length=128)]):
    root: constr(pattern=r'[\s\S]*', max_length=128)


class MessageExpiry(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class MessageFormat(Enum):
    RAW = 'RAW'
    JSON = 'JSON'


class MessageId(RootModel[constr(max_length=128)]):
    root: constr(max_length=128)


class MetricDimension(BaseModel):
    dimensionName: DimensionName
    operator: Optional[DimensionValueOperator] = None


class MetricName(
    RootModel[constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)


class MetricNames(RootModel[List[MetricName]]):
    root: List[MetricName]


class MetricToRetain(BaseModel):
    metric: BehaviorMetric
    metricDimension: Optional[MetricDimension] = None


class Minimum(RootModel[float]):
    root: float


class MinimumNumberOfExecutedThings(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class MissingContextValue(RootModel[str]):
    root: str


class MissingContextValues(RootModel[List[MissingContextValue]]):
    root: List[MissingContextValue]


class MitigationActionArn(RootModel[str]):
    root: str


class MitigationActionId(RootModel[str]):
    root: str


class MitigationActionName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_-]+', max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9_-]+', max_length=128)


class MitigationActionNameList(RootModel[List[MitigationActionName]]):
    root: List[MitigationActionName] = Field(..., max_length=5, min_length=1)


class MitigationActionType(Enum):
    UPDATE_DEVICE_CERTIFICATE = 'UPDATE_DEVICE_CERTIFICATE'
    UPDATE_CA_CERTIFICATE = 'UPDATE_CA_CERTIFICATE'
    ADD_THINGS_TO_THING_GROUP = 'ADD_THINGS_TO_THING_GROUP'
    REPLACE_DEFAULT_POLICY_VERSION = 'REPLACE_DEFAULT_POLICY_VERSION'
    ENABLE_IOT_LOGGING = 'ENABLE_IOT_LOGGING'
    PUBLISH_FINDING_TO_SNS = 'PUBLISH_FINDING_TO_SNS'


class MitigationActionsTaskId(
    RootModel[constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=128)


class ModelStatus(Enum):
    PENDING_BUILD = 'PENDING_BUILD'
    ACTIVE = 'ACTIVE'
    EXPIRED = 'EXPIRED'


class MqttClientId(
    RootModel[constr(pattern=r'[\s\S]*', min_length=1, max_length=65535)]
):
    root: constr(pattern=r'[\s\S]*', min_length=1, max_length=65535)


class MqttPassword(RootModel[constr(min_length=1, max_length=65535)]):
    root: constr(min_length=1, max_length=65535)


class MqttUsername(
    RootModel[constr(pattern=r'[\s\S]*', min_length=1, max_length=65535)]
):
    root: constr(pattern=r'[\s\S]*', min_length=1, max_length=65535)


class NamedShadowIndexingMode(Enum):
    OFF = 'OFF'
    ON = 'ON'


class NamespaceId(RootModel[constr(pattern=r'[a-zA-Z0-9_-]+')]):
    root: constr(pattern=r'[a-zA-Z0-9_-]+')


class NextToken(RootModel[str]):
    root: str


class NonCompliantChecksCount(RootModel[int]):
    root: int


class NonCompliantResourcesCount(RootModel[int]):
    root: int


class NotConfiguredException(RootModel[Any]):
    root: Any


class NullableBoolean(RootModel[bool]):
    root: bool


class Number(RootModel[float]):
    root: float


class NumberList(RootModel[List[Number]]):
    root: List[Number]


class NumberOfRetries(RootModel[conint(ge=0, le=10)]):
    root: conint(ge=0, le=10)


class NumberOfThings(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class OTAUpdateArn(RootModel[str]):
    root: str


class OTAUpdateDescription(RootModel[constr(pattern=r'[^\p{C}]+', max_length=2028)]):
    root: constr(pattern=r'[^\p{C}]+', max_length=2028)


class OTAUpdateErrorMessage(RootModel[str]):
    root: str


class OTAUpdateFileVersion(RootModel[str]):
    root: str


class OTAUpdateId(
    RootModel[constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=128)


class OTAUpdateStatus(Enum):
    CREATE_PENDING = 'CREATE_PENDING'
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    CREATE_COMPLETE = 'CREATE_COMPLETE'
    CREATE_FAILED = 'CREATE_FAILED'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    DELETE_FAILED = 'DELETE_FAILED'


class OTAUpdateSummary(BaseModel):
    creationDate: Optional[DateType] = None
    otaUpdateArn: Optional[OTAUpdateArn] = None
    otaUpdateId: Optional[OTAUpdateId] = None


class OTAUpdatesSummary(RootModel[List[OTAUpdateSummary]]):
    root: List[OTAUpdateSummary]


class OpenSearchAction(BaseModel):
    endpoint: ElasticsearchEndpoint
    id: ElasticsearchId
    index: ElasticsearchIndex
    roleArn: AwsArn
    type: ElasticsearchType


class OptionalModel(RootModel[bool]):
    root: bool


class OptionalVersion(RootModel[int]):
    root: int


class OutgoingCertificate(BaseModel):
    certificateArn: Optional[CertificateArn] = None
    certificateId: Optional[CertificateId] = None
    creationDate: Optional[DateType] = None
    transferDate: Optional[DateType] = None
    transferMessage: Optional[Message] = None
    transferredTo: Optional[AwsAccountId] = None


class OutgoingCertificates(RootModel[List[OutgoingCertificate]]):
    root: List[OutgoingCertificate]


class OverrideDynamicGroups(RootModel[bool]):
    root: bool


class PageSize(RootModel[conint(ge=1, le=250)]):
    root: conint(ge=1, le=250)


class Parameter(RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)]):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=2048)


class ParameterKey(
    RootModel[constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=128)


class ParameterValue(
    RootModel[constr(pattern=r'[^\p{C}]+', min_length=1, max_length=512)]
):
    root: constr(pattern=r'[^\p{C}]+', min_length=1, max_length=512)


class PartitionKey(RootModel[str]):
    root: str


class PayloadField(RootModel[str]):
    root: str


class PayloadFormatIndicator(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class PayloadVersion(
    RootModel[constr(pattern=r'^[0-9-]+$', min_length=10, max_length=32)]
):
    root: constr(pattern=r'^[0-9-]+$', min_length=10, max_length=32)


class Percent(RootModel[confloat(ge=0.0, le=100.0)]):
    root: confloat(ge=0.0, le=100.0)


class PercentList(RootModel[List[Percent]]):
    root: List[Percent]


class PercentValue(RootModel[float]):
    root: float


class Percentage(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class Platform(RootModel[str]):
    root: str


class PolicyArn(RootModel[str]):
    root: str


class PolicyDocument(
    RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=404600)]
):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=404600)


class PolicyDocuments(RootModel[List[PolicyDocument]]):
    root: List[PolicyDocument]


class PolicyName(
    RootModel[constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=128)


class PolicyNames(RootModel[List[PolicyName]]):
    root: List[PolicyName]


class PolicyTarget(RootModel[str]):
    root: str


class PolicyTargets(RootModel[List[PolicyTarget]]):
    root: List[PolicyTarget]


class PolicyTemplateName(Enum):
    BLANK_POLICY = 'BLANK_POLICY'


class PolicyVersionId(RootModel[constr(pattern=r'[0-9]+')]):
    root: constr(pattern=r'[0-9]+')


class PolicyVersionIdentifier(BaseModel):
    policyName: Optional[PolicyName] = None
    policyVersionId: Optional[PolicyVersionId] = None


class Port(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535)


class Ports(RootModel[List[Port]]):
    root: List[Port]


class Prefix(RootModel[str]):
    root: str


class PrimitiveBoolean(RootModel[bool]):
    root: bool


class Principal(RootModel[str]):
    root: str


class PrincipalArn(RootModel[str]):
    root: str


class PrincipalId(
    RootModel[constr(pattern=r'[a-zA-Z0-9]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9]+', min_length=1, max_length=128)


class Principals(RootModel[List[PrincipalArn]]):
    root: List[PrincipalArn]


class PrivateKey(RootModel[SecretStr]):
    root: SecretStr


class ProcessingTargetName(RootModel[str]):
    root: str


class ProcessingTargetNameList(RootModel[List[ProcessingTargetName]]):
    root: List[ProcessingTargetName]


class Protocol(Enum):
    MQTT = 'MQTT'
    HTTP = 'HTTP'


class Protocols(RootModel[List[Protocol]]):
    root: List[Protocol] = Field(..., max_length=2, min_length=1)


class PublicKey(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class PublicKeyMap(RootModel[Optional[Dict[str, KeyValue]]]):
    root: Optional[Dict[str, KeyValue]] = None


class PutVerificationStateOnViolationResponse(BaseModel):
    pass


class Qos(RootModel[conint(ge=0, le=1)]):
    root: conint(ge=0, le=1)


class QueryMaxResults(RootModel[conint(ge=1, le=500)]):
    root: conint(ge=1, le=500)


class QueryString(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class QueryVersion(RootModel[str]):
    root: str


class QueueUrl(RootModel[str]):
    root: str


class QueuedThings(RootModel[int]):
    root: int


class RangeKeyField(RootModel[str]):
    root: str


class RangeKeyValue(RootModel[str]):
    root: str


class RateIncreaseCriteria(BaseModel):
    numberOfNotifiedThings: Optional[NumberOfThings] = None
    numberOfSucceededThings: Optional[NumberOfThings] = None


class ReasonCode(RootModel[constr(pattern=r'[\p{Upper}\p{Digit}_]+', max_length=128)]):
    root: constr(pattern=r'[\p{Upper}\p{Digit}_]+', max_length=128)


class ReasonForNonCompliance(RootModel[str]):
    root: str


class ReasonForNonComplianceCode(RootModel[str]):
    root: str


class ReasonForNonComplianceCodes(RootModel[List[ReasonForNonComplianceCode]]):
    root: List[ReasonForNonComplianceCode] = Field(..., max_length=25, min_length=1)


class Recursive(RootModel[bool]):
    root: bool


class RecursiveWithoutDefault(RootModel[bool]):
    root: bool


class Regex(RootModel[str]):
    root: str


class RegisterCACertificateResponse(BaseModel):
    certificateArn: Optional[CertificateArn] = None
    certificateId: Optional[CertificateId] = None


class RegisterCertificateRequest(BaseModel):
    caCertificatePem: Optional[CertificatePem] = None
    certificatePem: CertificatePem
    status: Optional[CertificateStatus] = None


class RegisterCertificateResponse(BaseModel):
    certificateArn: Optional[CertificateArn] = None
    certificateId: Optional[CertificateId] = None


class RegisterCertificateWithoutCARequest(BaseModel):
    certificatePem: CertificatePem
    status: Optional[CertificateStatus] = None


class RegisterCertificateWithoutCAResponse(BaseModel):
    certificateArn: Optional[CertificateArn] = None
    certificateId: Optional[CertificateId] = None


class RegistrationCode(
    RootModel[constr(pattern=r'(0x)?[a-fA-F0-9]+', min_length=64, max_length=64)]
):
    root: constr(pattern=r'(0x)?[a-fA-F0-9]+', min_length=64, max_length=64)


class RegistrationCodeValidationException(RootModel[Any]):
    root: Any


class RegistryMaxResults(RootModel[conint(ge=1, le=250)]):
    root: conint(ge=1, le=250)


class RegistryS3BucketName(
    RootModel[constr(pattern=r'[a-zA-Z0-9._-]+', min_length=3, max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z0-9._-]+', min_length=3, max_length=256)


class RegistryS3KeyName(
    RootModel[constr(pattern=r'[a-zA-Z0-9!_.*\'()-\/]+', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'[a-zA-Z0-9!_.*\'()-\/]+', min_length=1, max_length=1024)


class RejectCertificateTransferRequest(BaseModel):
    rejectReason: Optional[Message] = None


class RejectedThings(RootModel[int]):
    root: int


class RemoveAuthorizerConfig(RootModel[bool]):
    root: bool


class RemoveAutoRegistration(RootModel[bool]):
    root: bool


class RemoveHook(RootModel[bool]):
    root: bool


class RemoveThingFromBillingGroupResponse(BaseModel):
    pass


class RemoveThingFromThingGroupResponse(BaseModel):
    pass


class RemoveThingType(RootModel[bool]):
    root: bool


class RemovedThings(RootModel[int]):
    root: int


class ReplaceDefaultPolicyVersionParams(BaseModel):
    templateName: PolicyTemplateName


class ReportType(Enum):
    ERRORS = 'ERRORS'
    RESULTS = 'RESULTS'


class ReservedDomainConfigurationName(
    RootModel[constr(pattern=r'[\w.:-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[\w.:-]+', min_length=1, max_length=128)


class Resource(RootModel[constr(pattern=r'[\s\S]*', max_length=2048)]):
    root: constr(pattern=r'[\s\S]*', max_length=2048)


class ResourceAlreadyExistsException(RootModel[Any]):
    root: Any


class ResourceArn(RootModel[str]):
    root: str


class ResourceArns(RootModel[Optional[Dict[str, ResourceArn]]]):
    root: Optional[Dict[str, ResourceArn]] = None


class ResourceLogicalId(RootModel[str]):
    root: str


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceRegistrationFailureException(RootModel[Any]):
    root: Any


class ResourceType(Enum):
    DEVICE_CERTIFICATE = 'DEVICE_CERTIFICATE'
    CA_CERTIFICATE = 'CA_CERTIFICATE'
    IOT_POLICY = 'IOT_POLICY'
    COGNITO_IDENTITY_POOL = 'COGNITO_IDENTITY_POOL'
    CLIENT_ID = 'CLIENT_ID'
    ACCOUNT_SETTINGS = 'ACCOUNT_SETTINGS'
    ROLE_ALIAS = 'ROLE_ALIAS'
    IAM_ROLE = 'IAM_ROLE'
    ISSUER_CERTIFICATE = 'ISSUER_CERTIFICATE'


class Resources(RootModel[List[Resource]]):
    root: List[Resource]


class ResponseTopic(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class RetryAttempt(RootModel[int]):
    root: int


class RetryableFailureType(Enum):
    FAILED = 'FAILED'
    TIMED_OUT = 'TIMED_OUT'
    ALL = 'ALL'


class RoleAlias(RootModel[constr(pattern=r'[\w=,@-]+', min_length=1, max_length=128)]):
    root: constr(pattern=r'[\w=,@-]+', min_length=1, max_length=128)


class RoleAliasArn(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class RoleAliases(RootModel[List[RoleAlias]]):
    root: List[RoleAlias]


class RoleArn(RootModel[constr(min_length=20, max_length=2048)]):
    root: constr(min_length=20, max_length=2048)


class RolloutRatePerMinute(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class RuleArn(RootModel[str]):
    root: str


class RuleName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_]+$', min_length=1, max_length=128)


class S3Action(BaseModel):
    bucketName: BucketName
    cannedAcl: Optional[CannedAccessControlList] = None
    key: Key
    roleArn: AwsArn


class S3Bucket(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class S3Destination(BaseModel):
    bucket: Optional[S3Bucket] = None
    prefix: Optional[Prefix] = None


class S3FileUrl(RootModel[constr(max_length=65535)]):
    root: constr(max_length=65535)


class S3FileUrlList(RootModel[List[S3FileUrl]]):
    root: List[S3FileUrl]


class S3Key(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class S3Version(RootModel[str]):
    root: str


class SQL(RootModel[str]):
    root: str


class SalesforceEndpoint(
    RootModel[
        constr(
            pattern=r'https://ingestion-[a-zA-Z0-9]{1,12}\.[a-zA-Z0-9]+\.((sfdc-matrix\.net)|(sfdcnow\.com))/streams/\w{1,20}/\w{1,20}/event',
            max_length=2000,
        )
    ]
):
    root: constr(
        pattern=r'https://ingestion-[a-zA-Z0-9]{1,12}\.[a-zA-Z0-9]+\.((sfdc-matrix\.net)|(sfdcnow\.com))/streams/\w{1,20}/\w{1,20}/event',
        max_length=2000,
    )


class SalesforceToken(RootModel[constr(min_length=40)]):
    root: constr(min_length=40)


class ScheduledAuditArn(RootModel[str]):
    root: str


class ScheduledAuditName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=128)


class SearchIndexRequest(BaseModel):
    indexName: Optional[IndexName] = None
    maxResults: Optional[QueryMaxResults] = None
    nextToken: Optional[NextToken] = None
    queryString: QueryString
    queryVersion: Optional[QueryVersion] = None


class SearchableAttributes(RootModel[List[AttributeName]]):
    root: List[AttributeName]


class Seconds(RootModel[int]):
    root: int


class SecurityGroupId(RootModel[str]):
    root: str


class SecurityGroupList(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId]


class SecurityProfileArn(RootModel[str]):
    root: str


class SecurityProfileDescription(
    RootModel[constr(pattern=r'[\p{Graph}\x20]*', max_length=1000)]
):
    root: constr(pattern=r'[\p{Graph}\x20]*', max_length=1000)


class SecurityProfileName(
    RootModel[constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)


class SecurityProfileTargetArn(RootModel[str]):
    root: str


class ServerCertificateArns(RootModel[List[AcmCertificateArn]]):
    root: List[AcmCertificateArn] = Field(..., max_length=1, min_length=0)


class ServerCertificateStatus(Enum):
    INVALID = 'INVALID'
    VALID = 'VALID'


class ServerCertificateStatusDetail(RootModel[str]):
    root: str


class ServerCertificateSummary(BaseModel):
    serverCertificateArn: Optional[AcmCertificateArn] = None
    serverCertificateStatus: Optional[ServerCertificateStatus] = None
    serverCertificateStatusDetail: Optional[ServerCertificateStatusDetail] = None


class ServerCertificates(RootModel[List[ServerCertificateSummary]]):
    root: List[ServerCertificateSummary]


class ServerName(RootModel[constr(pattern=r'[\s\S]*', min_length=1, max_length=253)]):
    root: constr(pattern=r'[\s\S]*', min_length=1, max_length=253)


class ServiceName(RootModel[str]):
    root: str


class ServiceType(Enum):
    DATA = 'DATA'
    CREDENTIAL_PROVIDER = 'CREDENTIAL_PROVIDER'
    JOBS = 'JOBS'


class ServiceUnavailableException(RootModel[Any]):
    root: Any


class SetAsActive(RootModel[bool]):
    root: bool


class SetAsActiveFlag(RootModel[bool]):
    root: bool


class SetAsDefault(RootModel[bool]):
    root: bool


class SetDefaultAuthorizerRequest(BaseModel):
    authorizerName: AuthorizerName


class SetDefaultAuthorizerResponse(BaseModel):
    authorizerArn: Optional[AuthorizerArn] = None
    authorizerName: Optional[AuthorizerName] = None


class SetDefaultPolicyVersionRequest(BaseModel):
    pass


class SetLoggingOptionsRequest(BaseModel):
    loggingOptionsPayload: LoggingOptionsPayload


class SetV2LoggingOptionsRequest(BaseModel):
    defaultLogLevel: Optional[LogLevel] = None
    disableAllLogs: Optional[DisableAllLogs] = None
    roleArn: Optional[AwsArn] = None


class ShadowName(
    RootModel[constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=64)


class Signature(RootModel[str]):
    root: str


class SignatureAlgorithm(RootModel[str]):
    root: str


class SigningJobId(RootModel[str]):
    root: str


class SigningProfileName(RootModel[str]):
    root: str


class SigningProfileParameter(BaseModel):
    certificateArn: Optional[CertificateArn] = None
    certificatePathOnDevice: Optional[CertificatePathOnDevice] = None
    platform: Optional[Platform] = None


class SigningRegion(RootModel[str]):
    root: str


class SkippedFindingsCount(RootModel[int]):
    root: int


class SkyfallMaxResults(RootModel[conint(ge=1, le=250)]):
    root: conint(ge=1, le=250)


class SnsAction(BaseModel):
    messageFormat: Optional[MessageFormat] = None
    roleArn: AwsArn
    targetArn: AwsArn


class SnsTopicArn(RootModel[constr(max_length=350)]):
    root: constr(max_length=350)


class SqlParseException(RootModel[Any]):
    root: Any


class StartAuditMitigationActionsTaskResponse(BaseModel):
    taskId: Optional[MitigationActionsTaskId] = None


class StartDetectMitigationActionsTaskResponse(BaseModel):
    taskId: Optional[MitigationActionsTaskId] = None


class StartOnDemandAuditTaskResponse(BaseModel):
    taskId: Optional[AuditTaskId] = None


class StateMachineName(RootModel[str]):
    root: str


class StateReason(RootModel[str]):
    root: str


class StateValue(RootModel[str]):
    root: str


class StatisticalThreshold(BaseModel):
    statistic: Optional[EvaluationStatistic] = None


class Status(Enum):
    InProgress = 'InProgress'
    Completed = 'Completed'
    Failed = 'Failed'
    Cancelled = 'Cancelled'
    Cancelling = 'Cancelling'


class StdDeviation(RootModel[float]):
    root: float


class StepFunctionsAction(BaseModel):
    executionNamePrefix: Optional[ExecutionNamePrefix] = None
    roleArn: AwsArn
    stateMachineName: StateMachineName


class StopThingRegistrationTaskRequest(BaseModel):
    pass


class StopThingRegistrationTaskResponse(BaseModel):
    pass


class StreamArn(RootModel[str]):
    root: str


class StreamDescription(RootModel[constr(pattern=r'[^\p{C}]+', max_length=2028)]):
    root: constr(pattern=r'[^\p{C}]+', max_length=2028)


class StreamId(
    RootModel[constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=128)


class StreamName(RootModel[str]):
    root: str


class StreamVersion(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535)


class String(RootModel[str]):
    root: str


class StringDateTime(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class StringMap(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class SubnetId(RootModel[str]):
    root: str


class SubnetIdList(RootModel[List[SubnetId]]):
    root: List[SubnetId]


class SucceededFindingsCount(RootModel[int]):
    root: int


class SucceededThings(RootModel[int]):
    root: int


class Sum(RootModel[float]):
    root: float


class SumOfSquares(RootModel[float]):
    root: float


class SuppressAlerts(RootModel[bool]):
    root: bool


class SuppressIndefinitely(RootModel[bool]):
    root: bool


class SuppressedNonCompliantResourcesCount(RootModel[int]):
    root: int


class TableName(RootModel[str]):
    root: str


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class Target(RootModel[str]):
    root: str


class TargetArn(RootModel[constr(max_length=2048)]):
    root: constr(max_length=2048)


class TargetAuditCheckNames(RootModel[List[AuditCheckName]]):
    root: List[AuditCheckName]


class TargetSelection(Enum):
    CONTINUOUS = 'CONTINUOUS'
    SNAPSHOT = 'SNAPSHOT'


class Targets(RootModel[List[Target]]):
    root: List[Target] = Field(..., min_length=1)


class TaskAlreadyExistsException(RootModel[Any]):
    root: Any


class TaskId(RootModel[constr(max_length=40)]):
    root: constr(max_length=40)


class TaskIdList(RootModel[List[TaskId]]):
    root: List[TaskId]


class TemplateArn(RootModel[str]):
    root: str


class TemplateBody(
    RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=10240)]
):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=10240)


class TemplateDescription(
    RootModel[constr(pattern=r'[^\p{C}]*', min_length=0, max_length=500)]
):
    root: constr(pattern=r'[^\p{C}]*', min_length=0, max_length=500)


class TemplateName(
    RootModel[constr(pattern=r'^[0-9A-Za-z_-]+$', min_length=1, max_length=36)]
):
    root: constr(pattern=r'^[0-9A-Za-z_-]+$', min_length=1, max_length=36)


class TemplateType(Enum):
    FLEET_PROVISIONING = 'FLEET_PROVISIONING'
    JITP = 'JITP'


class TemplateVersionId(RootModel[int]):
    root: int


class TermsAggregation(BaseModel):
    maxBuckets: Optional[MaxBuckets] = None


class TestInvokeAuthorizerResponse(BaseModel):
    disconnectAfterInSeconds: Optional[Seconds] = None
    isAuthenticated: Optional[IsAuthenticated] = None
    policyDocuments: Optional[PolicyDocuments] = None
    principalId: Optional[PrincipalId] = None
    refreshAfterInSeconds: Optional[Seconds] = None


class ThingArn(RootModel[str]):
    root: str


class ThingConnectivity(BaseModel):
    connected: Optional[Boolean] = None
    disconnectReason: Optional[DisconnectReason] = None
    timestamp: Optional[ConnectivityTimestamp] = None


class ThingConnectivityIndexingMode(Enum):
    OFF = 'OFF'
    STATUS = 'STATUS'


class ThingGroupArn(RootModel[str]):
    root: str


class ThingGroupDescription(
    RootModel[constr(pattern=r'[\p{Graph}\x20]*', max_length=2028)]
):
    root: constr(pattern=r'[\p{Graph}\x20]*', max_length=2028)


class ThingGroupId(
    RootModel[constr(pattern=r'[a-zA-Z0-9\-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9\-]+', min_length=1, max_length=128)


class ThingGroupIndexingMode(Enum):
    OFF = 'OFF'
    ON = 'ON'


class ThingGroupName(
    RootModel[constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)


class ThingGroupNameList(RootModel[List[ThingGroupName]]):
    root: List[ThingGroupName]


class ThingGroupNames(RootModel[List[ThingGroupName]]):
    root: List[ThingGroupName] = Field(..., max_length=10, min_length=1)


class ThingId(RootModel[str]):
    root: str


class ThingIndexingMode(Enum):
    OFF = 'OFF'
    REGISTRY = 'REGISTRY'
    REGISTRY_AND_SHADOW = 'REGISTRY_AND_SHADOW'


class ThingName(
    RootModel[constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)


class ThingNameList(RootModel[List[ThingName]]):
    root: List[ThingName]


class ThingTypeArn(RootModel[str]):
    root: str


class ThingTypeDescription(
    RootModel[constr(pattern=r'[\p{Graph}\x20]*', max_length=2028)]
):
    root: constr(pattern=r'[\p{Graph}\x20]*', max_length=2028)


class ThingTypeId(RootModel[str]):
    root: str


class ThingTypeMetadata(BaseModel):
    creationDate: Optional[CreationDate] = None
    deprecated: Optional[Boolean] = None
    deprecationDate: Optional[DeprecationDate] = None


class ThingTypeName(
    RootModel[constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)


class ThingTypeProperties(BaseModel):
    searchableAttributes: Optional[SearchableAttributes] = None
    thingTypeDescription: Optional[ThingTypeDescription] = None


class ThrottlingException(RootModel[Any]):
    root: Any


class TimedOutThings(RootModel[int]):
    root: int


class TimeoutConfig(BaseModel):
    inProgressTimeoutInMinutes: Optional[InProgressTimeoutInMinutes] = None


class Timestamp(RootModel[datetime]):
    root: datetime


class TimestreamDatabaseName(RootModel[str]):
    root: str


class TimestreamDimensionName(RootModel[str]):
    root: str


class TimestreamDimensionValue(RootModel[str]):
    root: str


class TimestreamTableName(RootModel[str]):
    root: str


class TimestreamTimestampUnit(RootModel[str]):
    root: str


class TimestreamTimestampValue(RootModel[str]):
    root: str


class TinyMaxResults(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class TlsContext(BaseModel):
    serverName: Optional[ServerName] = None


class Token(RootModel[constr(pattern=r'[\s\S]*', min_length=1, max_length=6144)]):
    root: constr(pattern=r'[\s\S]*', min_length=1, max_length=6144)


class TokenKeyName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=128)


class TokenSignature(
    RootModel[constr(pattern=r'[A-Za-z0-9+/]+={0,2}', min_length=1, max_length=2560)]
):
    root: constr(pattern=r'[A-Za-z0-9+/]+={0,2}', min_length=1, max_length=2560)


class Topic(RootModel[str]):
    root: str


class TopicPattern(RootModel[str]):
    root: str


class TopicRuleDestinationMaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class TopicRuleDestinationStatus(Enum):
    ENABLED = 'ENABLED'
    IN_PROGRESS = 'IN_PROGRESS'
    DISABLED = 'DISABLED'
    ERROR = 'ERROR'
    DELETING = 'DELETING'


class TopicRuleListItem(BaseModel):
    createdAt: Optional[CreatedAtDate] = None
    ruleArn: Optional[RuleArn] = None
    ruleDisabled: Optional[IsDisabled] = None
    ruleName: Optional[RuleName] = None
    topicPattern: Optional[TopicPattern] = None


class TopicRuleMaxResults(RootModel[conint(ge=1, le=10000)]):
    root: conint(ge=1, le=10000)


class TotalChecksCount(RootModel[int]):
    root: int


class TotalFindingsCount(RootModel[int]):
    root: int


class TotalResourcesCount(RootModel[int]):
    root: int


class TransferAlreadyCompletedException(RootModel[Any]):
    root: Any


class TransferCertificateRequest(BaseModel):
    transferMessage: Optional[Message] = None


class TransferCertificateResponse(BaseModel):
    transferredCertificateArn: Optional[CertificateArn] = None


class TransferConflictException(RootModel[Any]):
    root: Any


class TransferData(BaseModel):
    acceptDate: Optional[DateType] = None
    rejectDate: Optional[DateType] = None
    rejectReason: Optional[Message] = None
    transferDate: Optional[DateType] = None
    transferMessage: Optional[Message] = None


class UnauthorizedException(RootModel[Any]):
    root: Any


class UndoDeprecate(RootModel[bool]):
    root: bool


class UnsignedLong(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class UntagResourceRequest(BaseModel):
    resourceArn: ResourceArn
    tagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateAccountAuditConfigurationResponse(BaseModel):
    pass


class UpdateAuditSuppressionResponse(BaseModel):
    pass


class UpdateAuthorizerRequest(BaseModel):
    authorizerFunctionArn: Optional[AuthorizerFunctionArn] = None
    enableCachingForHttp: Optional[EnableCachingForHttp] = None
    status: Optional[AuthorizerStatus] = None
    tokenKeyName: Optional[TokenKeyName] = None
    tokenSigningPublicKeys: Optional[PublicKeyMap] = None


class UpdateAuthorizerResponse(BaseModel):
    authorizerArn: Optional[AuthorizerArn] = None
    authorizerName: Optional[AuthorizerName] = None


class UpdateBillingGroupRequest(BaseModel):
    billingGroupProperties: BillingGroupProperties
    expectedVersion: Optional[OptionalVersion] = None


class UpdateCACertificateParams(BaseModel):
    action: CACertificateUpdateAction


class UpdateCertificateRequest(BaseModel):
    pass


class UpdateCustomMetricRequest(BaseModel):
    displayName: CustomMetricDisplayName


class UpdateCustomMetricResponse(BaseModel):
    creationDate: Optional[Timestamp] = None
    displayName: Optional[CustomMetricDisplayName] = None
    lastModifiedDate: Optional[Timestamp] = None
    metricArn: Optional[CustomMetricArn] = None
    metricName: Optional[MetricName] = None
    metricType: Optional[CustomMetricType] = None


class UpdateDeviceCertificateParams(BaseModel):
    action: DeviceCertificateUpdateAction


class UpdateDimensionRequest(BaseModel):
    stringValues: DimensionStringValues


class UpdateDimensionResponse(BaseModel):
    arn: Optional[DimensionArn] = None
    creationDate: Optional[Timestamp] = None
    lastModifiedDate: Optional[Timestamp] = None
    name: Optional[DimensionName] = None
    stringValues: Optional[DimensionStringValues] = None
    type: Optional[DimensionType] = None


class UpdateDomainConfigurationResponse(BaseModel):
    domainConfigurationArn: Optional[DomainConfigurationArn] = None
    domainConfigurationName: Optional[ReservedDomainConfigurationName] = None


class UpdateEventConfigurationsResponse(BaseModel):
    pass


class UpdateIndexingConfigurationResponse(BaseModel):
    pass


class UpdateMitigationActionResponse(BaseModel):
    actionArn: Optional[MitigationActionArn] = None
    actionId: Optional[MitigationActionId] = None


class UpdateProvisioningTemplateResponse(BaseModel):
    pass


class UpdateRoleAliasRequest(BaseModel):
    credentialDurationSeconds: Optional[CredentialDurationSeconds] = None
    roleArn: Optional[RoleArn] = None


class UpdateRoleAliasResponse(BaseModel):
    roleAlias: Optional[RoleAlias] = None
    roleAliasArn: Optional[RoleAliasArn] = None


class UpdateScheduledAuditRequest(BaseModel):
    dayOfMonth: Optional[DayOfMonth] = None
    dayOfWeek: Optional[DayOfWeek] = None
    frequency: Optional[AuditFrequency] = None
    targetCheckNames: Optional[TargetAuditCheckNames] = None


class UpdateScheduledAuditResponse(BaseModel):
    scheduledAuditArn: Optional[ScheduledAuditArn] = None


class UpdateStreamResponse(BaseModel):
    description: Optional[StreamDescription] = None
    streamArn: Optional[StreamArn] = None
    streamId: Optional[StreamId] = None
    streamVersion: Optional[StreamVersion] = None


class UpdateThingGroupsForThingResponse(BaseModel):
    pass


class UpdateThingResponse(BaseModel):
    pass


class UpdateTopicRuleDestinationRequest(BaseModel):
    arn: AwsArn
    status: TopicRuleDestinationStatus


class UpdateTopicRuleDestinationResponse(BaseModel):
    pass


class Url(RootModel[constr(max_length=2000)]):
    root: constr(max_length=2000)


class UseBase64(RootModel[bool]):
    root: bool


class UserPropertyKey(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class UserPropertyValue(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class Valid(RootModel[bool]):
    root: bool


class ValidationError(BaseModel):
    errorMessage: Optional[ErrorMessage] = None


class ValidationErrors(RootModel[List[ValidationError]]):
    root: List[ValidationError]


class Value(RootModel[constr(pattern=r'[\s\S]*', min_length=0, max_length=4096)]):
    root: constr(pattern=r'[\s\S]*', min_length=0, max_length=4096)


class Variance(RootModel[float]):
    root: float


class VerificationState(Enum):
    FALSE_POSITIVE = 'FALSE_POSITIVE'
    BENIGN_POSITIVE = 'BENIGN_POSITIVE'
    TRUE_POSITIVE = 'TRUE_POSITIVE'
    UNKNOWN = 'UNKNOWN'


class VerificationStateDescription(
    RootModel[constr(pattern=r'[^\p{Cntrl}]*', max_length=1000)]
):
    root: constr(pattern=r'[^\p{Cntrl}]*', max_length=1000)


class Version(RootModel[int]):
    root: int


class VersionConflictException(RootModel[Any]):
    root: Any


class VersionNumber(RootModel[int]):
    root: int


class VersionsLimitExceededException(RootModel[Any]):
    root: Any


class ViolationEventAdditionalInfo(BaseModel):
    confidenceLevel: Optional[ConfidenceLevel] = None


class ViolationEventOccurrenceRange(BaseModel):
    endTime: Timestamp
    startTime: Timestamp


class ViolationEventType(Enum):
    in_alarm = 'in-alarm'
    alarm_cleared = 'alarm-cleared'
    alarm_invalidated = 'alarm-invalidated'


class ViolationId(
    RootModel[constr(pattern=r'[a-zA-Z0-9\-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9\-]+', min_length=1, max_length=128)


class VpcId(RootModel[str]):
    root: str


class WaitingForDataCollectionChecksCount(RootModel[int]):
    root: int


class StringValue(RootModel[str]):
    root: str


class UsePrefixAttributeValue(RootModel[bool]):
    root: bool


class ActionStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    CANCELED = 'CANCELED'
    SKIPPED = 'SKIPPED'
    PENDING = 'PENDING'


class TaskStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    CANCELED = 'CANCELED'


class Frequency(Enum):
    DAILY = 'DAILY'
    WEEKLY = 'WEEKLY'
    BIWEEKLY = 'BIWEEKLY'
    MONTHLY = 'MONTHLY'


class AuditScheduledauditsScheduledAuditNamePatchRequest(BaseModel):
    dayOfMonth: Optional[constr(pattern=r'^([1-9]|[12][0-9]|3[01])$|^LAST$')] = Field(
        None,
        description='The day of the month on which the scheduled audit takes place. This can be <code>1</code> through <code>31</code> or <code>LAST</code>. This field is required if the <code>frequency</code> parameter is set to <code>MONTHLY</code>. If days 29-31 are specified, and the month does not have that many days, the audit takes place on the "LAST" day of the month.',
    )
    dayOfWeek: Optional[DayOfWeek] = Field(
        None,
        description='The day of the week on which the scheduled audit takes place. This can be one of <code>SUN</code>, <code>MON</code>, <code>TUE</code>, <code>WED</code>, <code>THU</code>, <code>FRI</code>, or <code>SAT</code>. This field is required if the "frequency" parameter is set to <code>WEEKLY</code> or <code>BIWEEKLY</code>.',
    )
    frequency: Optional[Frequency] = Field(
        None,
        description='How often the scheduled audit takes place, either <code>DAILY</code>, <code>WEEKLY</code>, <code>BIWEEKLY</code>, or <code>MONTHLY</code>. The start time of each audit is determined by the system.',
    )
    targetCheckNames: Optional[List[AuditCheckName]] = Field(
        None,
        description='Which checks are performed during the scheduled audit. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)',
    )


class AuditTasksPostRequest(BaseModel):
    targetCheckNames: List[AuditCheckName] = Field(
        ...,
        description='Which checks are performed during the audit. The checks you specify must be enabled for your account or an exception occurs. Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.',
    )


class TaskType(Enum):
    ON_DEMAND_AUDIT_TASK = 'ON_DEMAND_AUDIT_TASK'
    SCHEDULED_AUDIT_TASK = 'SCHEDULED_AUDIT_TASK'


class Status1(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'


class AuthorizerAuthorizerNamePutRequest(BaseModel):
    authorizerFunctionArn: Optional[constr(pattern=r'[\s\S]*', max_length=2048)] = (
        Field(None, description="The ARN of the authorizer's Lambda function.")
    )
    enableCachingForHttp: Optional[bool] = Field(
        None,
        description='When <code>true</code>, the result from the authorizer’s Lambda function is cached for the time specified in <code>refreshAfterInSeconds</code>. The cached result is used while the device reuses the same HTTP connection.',
    )
    status: Optional[Status1] = Field(
        None, description='The status of the update authorizer request.'
    )
    tokenKeyName: Optional[
        constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=128)
    ] = Field(
        None, description='The key used to extract the token from the HTTP headers. '
    )
    tokenSigningPublicKeys: Optional[Dict[str, KeyValue]] = Field(
        None, description='The public keys used to verify the token signature.'
    )


class HttpContext(BaseModel):
    headers: Optional[HttpHeaders] = None
    queryString: Optional[HttpQueryString] = None


class MqttContext(BaseModel):
    clientId: Optional[MqttClientId] = None
    password: Optional[MqttPassword] = None
    username: Optional[MqttUsername] = None


class AuthorizerAuthorizerNameTestPostRequest(BaseModel):
    httpContext: Optional[HttpContext] = Field(
        None,
        description='Specifies the HTTP context to use for the test authorizer request.',
    )
    mqttContext: Optional[MqttContext] = Field(
        None,
        description='Specifies the MQTT context to use for the test authorizer request',
    )
    tlsContext: Optional[TlsContext] = Field(
        None,
        description='Specifies the TLS context to use for the test authorizer request.',
    )
    token: Optional[constr(pattern=r'[\s\S]*', min_length=1, max_length=6144)] = Field(
        None, description='The token returned by your custom authentication service.'
    )
    tokenSignature: Optional[
        constr(pattern=r'[A-Za-z0-9+/]+={0,2}', min_length=1, max_length=2560)
    ] = Field(
        None,
        description="The signature made with the token and your custom authentication service's private key. This value must be Base-64-encoded.",
    )


class BillingGroupsAddThingToBillingGroupPutRequest(BaseModel):
    billingGroupArn: Optional[str] = Field(
        None, description='The ARN of the billing group.'
    )
    billingGroupName: Optional[
        constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)
    ] = Field(
        None,
        description='<p>The name of the billing group.</p> <note> <p>This call is asynchronous. It might take several seconds for the detachment to propagate.</p> </note>',
    )
    thingArn: Optional[str] = Field(
        None, description='The ARN of the thing to be added to the billing group.'
    )
    thingName: Optional[
        constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)
    ] = Field(
        None, description='The name of the thing to be added to the billing group.'
    )


class BillingGroupsRemoveThingFromBillingGroupPutRequest(BaseModel):
    billingGroupArn: Optional[str] = Field(
        None, description='The ARN of the billing group.'
    )
    billingGroupName: Optional[
        constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)
    ] = Field(None, description='The name of the billing group.')
    thingArn: Optional[str] = Field(
        None, description='The ARN of the thing to be removed from the billing group.'
    )
    thingName: Optional[
        constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)
    ] = Field(
        None, description='The name of the thing to be removed from the billing group.'
    )


class BillingGroupsBillingGroupNamePatchRequest(BaseModel):
    billingGroupProperties: BillingGroupProperties = Field(
        ..., description='The properties of a billing group.'
    )
    expectedVersion: Optional[int] = Field(
        None,
        description='The expected version of the billing group. If the version of the billing group does not match the expected version specified in the request, the <code>UpdateBillingGroup</code> request is rejected with a <code>VersionConflictException</code>.',
    )


class RegistrationConfig(BaseModel):
    roleArn: Optional[RoleArn] = None
    templateBody: Optional[TemplateBody] = None
    templateName: Optional[TemplateName] = None


class NewStatus(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'


class NewAutoRegistrationStatus(Enum):
    ENABLE = 'ENABLE'
    DISABLE = 'DISABLE'


class CacertificateCaCertificateIdPutRequest(BaseModel):
    registrationConfig: Optional[RegistrationConfig] = Field(
        None, description='The registration configuration.'
    )
    removeAutoRegistration: Optional[bool] = Field(
        None, description='If true, removes auto registration.'
    )


class Status5(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    REVOKED = 'REVOKED'
    PENDING_TRANSFER = 'PENDING_TRANSFER'
    REGISTER_INACTIVE = 'REGISTER_INACTIVE'
    PENDING_ACTIVATION = 'PENDING_ACTIVATION'


class CertificateRegisterPostRequest(BaseModel):
    caCertificatePem: Optional[
        constr(pattern=r'[\s\S]*', min_length=1, max_length=65536)
    ] = Field(None, description='The PEM of a certificate.')
    certificatePem: constr(pattern=r'[\s\S]*', min_length=1, max_length=65536) = Field(
        ..., description='The PEM of a certificate.'
    )
    status: Optional[Status5] = Field(
        None,
        description='The status of the register certificate request. Valid values that you can use include <code>ACTIVE</code>, <code>INACTIVE</code>, and <code>REVOKED</code>.',
    )


class CertificateRegisterNoCaPostRequest(BaseModel):
    certificatePem: constr(pattern=r'[\s\S]*', min_length=1, max_length=65536) = Field(
        ..., description='The PEM of a certificate.'
    )
    status: Optional[Status5] = Field(
        None, description='The status of the register certificate request.'
    )


class CertificatesPostRequest(BaseModel):
    certificateSigningRequest: constr(
        pattern=r'[\s\S]*', min_length=1, max_length=4096
    ) = Field(..., description='The certificate signing request (CSR).')


class NewStatus2(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    REVOKED = 'REVOKED'
    PENDING_TRANSFER = 'PENDING_TRANSFER'
    REGISTER_INACTIVE = 'REGISTER_INACTIVE'
    PENDING_ACTIVATION = 'PENDING_ACTIVATION'


class CustomMetricMetricNamePatchRequest(BaseModel):
    displayName: constr(pattern=r'[\p{Graph}\x20]*', max_length=128) = Field(
        ...,
        description=" Field represents a friendly name in the console for the custom metric, it doesn't have to be unique. Don't use this name as the metric identifier in the device metric report. Can be updated. ",
    )


class MetricType(Enum):
    string_list = 'string-list'
    ip_address_list = 'ip-address-list'
    number_list = 'number-list'
    number = 'number'


class DefaultAuthorizerPostRequest(BaseModel):
    authorizerName: constr(pattern=r'[\w=,@-]+', min_length=1, max_length=128) = Field(
        ..., description='The authorizer name.'
    )


class Status7(Enum):
    ENABLED = 'ENABLED'
    IN_PROGRESS = 'IN_PROGRESS'
    DISABLED = 'DISABLED'
    ERROR = 'ERROR'
    DELETING = 'DELETING'


class DestinationsPatchRequest(BaseModel):
    arn: str = Field(..., description='The ARN of the topic rule destination.')
    status: Status7 = Field(
        ...,
        description='<p>The status of the topic rule destination. Valid values are:</p> <dl> <dt>IN_PROGRESS</dt> <dd> <p>A topic rule destination was created but has not been confirmed. You can set <code>status</code> to <code>IN_PROGRESS</code> by calling <code>UpdateTopicRuleDestination</code>. Calling <code>UpdateTopicRuleDestination</code> causes a new confirmation challenge to be sent to your confirmation endpoint.</p> </dd> <dt>ENABLED</dt> <dd> <p>Confirmation was completed, and traffic to this destination is allowed. You can set <code>status</code> to <code>DISABLED</code> by calling <code>UpdateTopicRuleDestination</code>.</p> </dd> <dt>DISABLED</dt> <dd> <p>Confirmation was completed, and traffic to this destination is not allowed. You can set <code>status</code> to <code>ENABLED</code> by calling <code>UpdateTopicRuleDestination</code>.</p> </dd> <dt>ERROR</dt> <dd> <p>Confirmation could not be completed, for example if the confirmation timed out. You can call <code>GetTopicRuleDestination</code> for details about the error. You can set <code>status</code> to <code>IN_PROGRESS</code> by calling <code>UpdateTopicRuleDestination</code>. Calling <code>UpdateTopicRuleDestination</code> causes a new confirmation challenge to be sent to your confirmation endpoint.</p> </dd> </dl>',
    )


class ViolationEventOccurrenceRange1(BaseModel):
    endTime: Optional[Timestamp] = None
    startTime: Optional[Timestamp] = None


class DimensionsNamePatchRequest(BaseModel):
    stringValues: List[DimensionStringValue] = Field(
        ...,
        description='Specifies the value or list of values for the dimension. For <code>TOPIC_FILTER</code> dimensions, this is a pattern used to match the MQTT topic (for example, "admin/#").',
        max_length=100,
        min_length=1,
    )


class Type(Enum):
    TOPIC_FILTER = 'TOPIC_FILTER'


class AuthorizerConfig(BaseModel):
    allowAuthorizerOverride: Optional[AllowAuthorizerOverride] = None
    defaultAuthorizerName: Optional[AuthorizerName] = None


class DomainConfigurationsDomainConfigurationNamePutRequest(BaseModel):
    authorizerConfig: Optional[AuthorizerConfig] = Field(
        None,
        description='An object that specifies the authorization service for a domain.',
    )
    domainConfigurationStatus: Optional[DomainConfigurationStatus] = Field(
        None,
        description='The status to which the domain configuration should be updated.',
    )
    removeAuthorizerConfig: Optional[bool] = Field(
        None, description='Removes the authorization configuration from a domain.'
    )


class EffectivePoliciesPostRequest(BaseModel):
    cognitoIdentityPoolId: Optional[str] = Field(
        None, description='The Cognito identity pool ID.'
    )
    principal: Optional[str] = Field(
        None,
        description='The principal. Valid principals are CertificateArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:cert/<i>certificateId</i>), thingGroupArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:thinggroup/<i>groupName</i>) and CognitoId (<i>region</i>:<i>id</i>).',
    )


class AggregationType1(BaseModel):
    name: Optional[AggregationTypeName] = None
    values: Optional[AggregationTypeValues] = None


class Unit(Enum):
    Seconds = 'Seconds'
    Microseconds = 'Microseconds'
    Milliseconds = 'Milliseconds'
    Bytes = 'Bytes'
    Kilobytes = 'Kilobytes'
    Megabytes = 'Megabytes'
    Gigabytes = 'Gigabytes'
    Terabytes = 'Terabytes'
    Bits = 'Bits'
    Kilobits = 'Kilobits'
    Megabits = 'Megabits'
    Gigabits = 'Gigabits'
    Terabits = 'Terabits'
    Percent = 'Percent'
    Count = 'Count'
    Bytes_Second = 'Bytes/Second'
    Kilobytes_Second = 'Kilobytes/Second'
    Megabytes_Second = 'Megabytes/Second'
    Gigabytes_Second = 'Gigabytes/Second'
    Terabytes_Second = 'Terabytes/Second'
    Bits_Second = 'Bits/Second'
    Kilobits_Second = 'Kilobits/Second'
    Megabits_Second = 'Megabits/Second'
    Gigabits_Second = 'Gigabits/Second'
    Terabits_Second = 'Terabits/Second'
    Count_Second = 'Count/Second'
    None_ = 'None'


class FleetMetricMetricNamePatchRequest(BaseModel):
    aggregationField: Optional[constr(min_length=1)] = Field(
        None, description='The field to aggregate.'
    )
    aggregationType: Optional[AggregationType1] = Field(
        None, description='The type of aggregation queries.'
    )
    description: Optional[constr(pattern=r'[\p{Graph}\x20]*', max_length=1024)] = Field(
        None, description='The description of the fleet metric.'
    )
    expectedVersion: Optional[int] = Field(
        None,
        description='The expected version of the fleet metric record in the registry.',
    )
    indexName: constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128) = Field(
        ..., description='The name of the index to search.'
    )
    period: Optional[conint(ge=60, le=86400)] = Field(
        None,
        description='The time in seconds between fleet metric emissions. Range [60(1 min), 86400(1 day)] and must be multiple of 60.',
    )
    queryString: Optional[constr(min_length=1)] = Field(
        None, description='The search query string.'
    )
    queryVersion: Optional[str] = Field(None, description='The version of the query.')
    unit: Optional[Unit] = Field(
        None,
        description='Used to support unit transformation such as milliseconds to seconds. The unit must be supported by <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDatum.html">CW metric</a>.',
    )


class BucketsAggregationType(BaseModel):
    termsAggregation: Optional[TermsAggregation] = None


class IndicesBucketsPostRequest(BaseModel):
    aggregationField: constr(min_length=1) = Field(
        ..., description='The aggregation field.'
    )
    bucketsAggregationType: BucketsAggregationType = Field(
        ..., description='The type of bucketed aggregation performed.'
    )
    indexName: Optional[
        constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)
    ] = Field(None, description='The name of the index to search.')
    queryString: constr(min_length=1) = Field(
        ..., description='The search query string.'
    )
    queryVersion: Optional[str] = Field(None, description='The version of the query.')


class IndicesCardinalityPostRequest(BaseModel):
    aggregationField: Optional[constr(min_length=1)] = Field(
        None, description='The field to aggregate.'
    )
    indexName: Optional[
        constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)
    ] = Field(None, description='The name of the index to search.')
    queryString: constr(min_length=1) = Field(
        ..., description='The search query string.'
    )
    queryVersion: Optional[str] = Field(None, description='The query version.')


class IndicesPercentilesPostRequest(BaseModel):
    aggregationField: Optional[constr(min_length=1)] = Field(
        None, description='The field to aggregate.'
    )
    indexName: Optional[
        constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)
    ] = Field(None, description='The name of the index to search.')
    percents: Optional[List[Percent]] = Field(
        None, description='The percentile groups returned.'
    )
    queryString: constr(min_length=1) = Field(
        ..., description='The search query string.'
    )
    queryVersion: Optional[str] = Field(None, description='The query version.')


class IndicesSearchPostRequest(BaseModel):
    indexName: Optional[
        constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)
    ] = Field(None, description='The search index name.')
    maxResults: Optional[conint(ge=1, le=500)] = Field(
        None, description='The maximum number of results to return at one time.'
    )
    nextToken: Optional[str] = Field(
        None,
        description='The token used to get the next set of results, or <code>null</code> if there are no additional results.',
    )
    queryString: constr(min_length=1) = Field(
        ...,
        description='The search query string. For more information about the search query syntax, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/query-syntax.html">Query syntax</a>.',
    )
    queryVersion: Optional[str] = Field(None, description='The query version.')


class IndicesStatisticsPostRequest(BaseModel):
    aggregationField: Optional[constr(min_length=1)] = Field(
        None, description='The aggregation field name.'
    )
    indexName: Optional[
        constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)
    ] = Field(
        None,
        description='The name of the index to search. The default value is <code>AWS_Things</code>.',
    )
    queryString: constr(min_length=1) = Field(
        ...,
        description='The query used to search. You can specify "*" for the query string to get the count of all indexed things in your Amazon Web Services account.',
    )
    queryVersion: Optional[str] = Field(
        None, description='The version of the query used to search.'
    )


class PresignedUrlConfig(BaseModel):
    expiresInSec: Optional[ExpiresInSec] = None
    roleArn: Optional[RoleArn] = None


class Status8(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    CANCELED = 'CANCELED'
    COMPLETED = 'COMPLETED'
    DELETION_IN_PROGRESS = 'DELETION_IN_PROGRESS'
    SCHEDULED = 'SCHEDULED'


class SchedulingConfig(BaseModel):
    endBehavior: Optional[JobEndBehavior] = None
    endTime: Optional[StringDateTime] = None
    maintenanceWindows: Optional[MaintenanceWindows] = None
    startTime: Optional[StringDateTime] = None


class JobsJobIdCancelPutRequest(BaseModel):
    comment: Optional[constr(pattern=r'[^\p{C}]+', max_length=2028)] = Field(
        None,
        description='An optional comment string describing why the job was canceled.',
    )
    reasonCode: Optional[constr(pattern=r'[\p{Upper}\p{Digit}_]+', max_length=128)] = (
        Field(
            None,
            description='(Optional)A reason code string that explains why the job was canceled.',
        )
    )


class JobsJobIdTargetsPostRequest(BaseModel):
    comment: Optional[constr(pattern=r'[^\p{C}]+', max_length=2028)] = Field(
        None,
        description='An optional comment string describing why the job was associated with the targets.',
    )
    targets: List[TargetArn] = Field(
        ...,
        description='A list of thing group ARNs that define the targets of the job.',
        min_length=1,
    )


class Status10(Enum):
    QUEUED = 'QUEUED'
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    TIMED_OUT = 'TIMED_OUT'
    REJECTED = 'REJECTED'
    REMOVED = 'REMOVED'
    CANCELED = 'CANCELED'


class LoggingOptionsPayload1(BaseModel):
    logLevel: Optional[LogLevel] = None
    roleArn: Optional[AwsArn] = None


class LoggingOptionsPostRequest(BaseModel):
    loggingOptionsPayload: LoggingOptionsPayload1 = Field(
        ..., description='Describes the logging options payload.'
    )


class ActionType1(Enum):
    UPDATE_DEVICE_CERTIFICATE = 'UPDATE_DEVICE_CERTIFICATE'
    UPDATE_CA_CERTIFICATE = 'UPDATE_CA_CERTIFICATE'
    ADD_THINGS_TO_THING_GROUP = 'ADD_THINGS_TO_THING_GROUP'
    REPLACE_DEFAULT_POLICY_VERSION = 'REPLACE_DEFAULT_POLICY_VERSION'
    ENABLE_IOT_LOGGING = 'ENABLE_IOT_LOGGING'
    PUBLISH_FINDING_TO_SNS = 'PUBLISH_FINDING_TO_SNS'


class OtaUpdateStatus(Enum):
    CREATE_PENDING = 'CREATE_PENDING'
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    CREATE_COMPLETE = 'CREATE_COMPLETE'
    CREATE_FAILED = 'CREATE_FAILED'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    DELETE_FAILED = 'DELETE_FAILED'


class AwsJobPresignedUrlConfig(BaseModel):
    expiresInSec: Optional[ExpiresInSeconds] = None


class AwsJobTimeoutConfig(BaseModel):
    inProgressTimeoutInMinutes: Optional[AwsJobTimeoutInProgressTimeoutInMinutes] = None


class PoliciesPolicyNameVersionPostRequest(BaseModel):
    policyDocument: constr(pattern=r'[\s\S]*', min_length=0, max_length=404600) = Field(
        ...,
        description='The JSON document that describes the policy. Minimum length of 1. Maximum length of 2048, excluding whitespace.',
    )


class PreProvisioningHook(BaseModel):
    payloadVersion: Optional[PayloadVersion] = None
    targetArn: Optional[TargetArn] = None


class Type1(Enum):
    FLEET_PROVISIONING = 'FLEET_PROVISIONING'
    JITP = 'JITP'


class ProvisioningTemplatesTemplateNamePatchRequest(BaseModel):
    defaultVersionId: Optional[int] = Field(
        None, description='The ID of the default provisioning template version.'
    )
    description: Optional[
        constr(pattern=r'[^\p{C}]*', min_length=0, max_length=500)
    ] = Field(None, description='The description of the provisioning template.')
    enabled: Optional[bool] = Field(
        None, description='True to enable the provisioning template, otherwise false.'
    )
    preProvisioningHook: Optional[PreProvisioningHook] = Field(
        None,
        description='Structure that contains <code>payloadVersion</code> and <code>targetArn</code>.',
    )
    provisioningRoleArn: Optional[constr(min_length=20, max_length=2048)] = Field(
        None,
        description='The ARN of the role associated with the provisioning template. This IoT role grants permission to provision a device.',
    )
    removePreProvisioningHook: Optional[bool] = Field(
        None, description='Removes pre-provisioning hook template.'
    )


class ProvisioningTemplatesTemplateNameVersionsPostRequest(BaseModel):
    templateBody: constr(pattern=r'[\s\S]*', min_length=0, max_length=10240) = Field(
        ..., description='The JSON formatted contents of the provisioning template.'
    )


class RejectCertificateTransferCertificateIdPatchRequest(BaseModel):
    rejectReason: Optional[constr(pattern=r'[\s\S]*', max_length=128)] = Field(
        None, description='The reason the certificate transfer was rejected.'
    )


class RoleAliasesRoleAliasPutRequest(BaseModel):
    credentialDurationSeconds: Optional[conint(ge=900, le=43200)] = Field(
        None,
        description='<p>The number of seconds the credential will be valid.</p> <p>This value must be less than or equal to the maximum session duration of the IAM role that the role alias references.</p>',
    )
    roleArn: Optional[constr(min_length=20, max_length=2048)] = Field(
        None, description='The role ARN.'
    )


class TargetPoliciesPolicyNamePostRequest(BaseModel):
    target: str = Field(
        ..., description='The target from which the policy will be detached.'
    )


class TargetPoliciesPolicyNamePutRequest(BaseModel):
    target: str = Field(
        ...,
        description='The <a href="https://docs.aws.amazon.com/iot/latest/developerguide/security-iam.html">identity</a> to which the policy is attached. For example, a thing group or a certificate.',
    )


class ThingGroupsAddThingToThingGroupPutRequest(BaseModel):
    overrideDynamicGroups: Optional[bool] = Field(
        None,
        description='Override dynamic thing groups with static thing groups when 10-group limit is reached. If a thing belongs to 10 thing groups, and one or more of those groups are dynamic thing groups, adding a thing to a static group removes the thing from the last dynamic group.',
    )
    thingArn: Optional[str] = Field(
        None, description='The ARN of the thing to add to a group.'
    )
    thingGroupArn: Optional[str] = Field(
        None, description='The ARN of the group to which you are adding a thing.'
    )
    thingGroupName: Optional[
        constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)
    ] = Field(
        None, description='The name of the group to which you are adding a thing.'
    )
    thingName: Optional[
        constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)
    ] = Field(None, description='The name of the thing to add to a group.')


class ThingGroupsRemoveThingFromThingGroupPutRequest(BaseModel):
    thingArn: Optional[str] = Field(
        None, description='The ARN of the thing to remove from the group.'
    )
    thingGroupArn: Optional[str] = Field(None, description='The group ARN.')
    thingGroupName: Optional[
        constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)
    ] = Field(None, description='The group name.')
    thingName: Optional[
        constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)
    ] = Field(None, description='The name of the thing to remove from the group.')


class ThingGroupsUpdateThingGroupsForThingPutRequest(BaseModel):
    overrideDynamicGroups: Optional[bool] = Field(
        None,
        description='Override dynamic thing groups with static thing groups when 10-group limit is reached. If a thing belongs to 10 thing groups, and one or more of those groups are dynamic thing groups, adding a thing to a static group removes the thing from the last dynamic group.',
    )
    thingGroupsToAdd: Optional[List[ThingGroupName]] = Field(
        None, description='The groups to which the thing will be added.'
    )
    thingGroupsToRemove: Optional[List[ThingGroupName]] = Field(
        None, description='The groups from which the thing will be removed.'
    )
    thingName: Optional[
        constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)
    ] = Field(None, description='The thing whose group memberships will be updated.')


class Status12(Enum):
    InProgress = 'InProgress'
    Completed = 'Completed'
    Failed = 'Failed'
    Cancelled = 'Cancelled'
    Cancelling = 'Cancelling'


class ThingRegistrationTasksPostRequest(BaseModel):
    inputFileBucket: constr(
        pattern=r'[a-zA-Z0-9._-]+', min_length=3, max_length=256
    ) = Field(..., description='The S3 bucket that contains the input file.')
    inputFileKey: constr(
        pattern=r'[a-zA-Z0-9!_.*\'()-\/]+', min_length=1, max_length=1024
    ) = Field(
        ...,
        description='The name of input file within the S3 bucket. This file contains a newline delimited JSON file. Each line contains the parameter values to provision one device (thing).',
    )
    roleArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The IAM role ARN that grants permission the input file.'
    )
    templateBody: constr(pattern=r'[\s\S]*', min_length=0, max_length=10240) = Field(
        ..., description='The provisioning template.'
    )


class ThingTypesThingTypeNameDeprecatePostRequest(BaseModel):
    undoDeprecate: Optional[bool] = Field(
        None,
        description='Whether to undeprecate a deprecated thing type. If <b>true</b>, the thing type will not be deprecated anymore and you can associate it with things.',
    )


class ThingsPostRequest(BaseModel):
    parameters: Optional[Dict[str, Value]] = Field(
        None,
        description='The parameters for provisioning a thing. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-template.html">Provisioning Templates</a> for more information.',
    )
    templateBody: constr(pattern=r'[\s\S]*', min_length=0, max_length=10240) = Field(
        ...,
        description='The provisioning template. See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-w-cert.html">Provisioning Devices That Have Device Certificates</a> for more information.',
    )


class AttributePayload(BaseModel):
    attributes: Optional[Attributes] = None
    merge: Optional[Flag] = None


class ThingsThingNamePatchRequest(BaseModel):
    attributePayload: Optional[AttributePayload] = Field(
        None, description='The attribute payload.'
    )
    expectedVersion: Optional[int] = Field(
        None,
        description='The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the <code>UpdateThing</code> request is rejected with a <code>VersionConflictException</code>.',
    )
    removeThingType: Optional[bool] = Field(
        None,
        description='Remove a thing type association. If <b>true</b>, the association is removed.',
    )
    thingTypeName: Optional[
        constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)
    ] = Field(None, description='The name of the thing type.')


class ThingsThingNamePostRequest(BaseModel):
    attributePayload: Optional[AttributePayload] = Field(
        None, description='The attribute payload.'
    )
    billingGroupName: Optional[
        constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)
    ] = Field(
        None, description='The name of the billing group the thing will be added to.'
    )
    thingTypeName: Optional[
        constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)
    ] = Field(
        None, description='The name of the thing type associated with the new thing.'
    )


class Status14(Enum):
    QUEUED = 'QUEUED'
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    TIMED_OUT = 'TIMED_OUT'
    REJECTED = 'REJECTED'
    REMOVED = 'REMOVED'
    CANCELED = 'CANCELED'


class ThingsThingNameJobsJobIdCancelPutRequest(BaseModel):
    expectedVersion: Optional[int] = Field(
        None,
        description='(Optional) The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)',
    )
    statusDetails: Optional[Dict[str, DetailsValue]] = Field(
        None,
        description='A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged. You can specify at most 10 name/value pairs.',
    )


class TransferCertificateCertificateIdTargetAwsAccountPatchRequest(BaseModel):
    transferMessage: Optional[constr(pattern=r'[\s\S]*', max_length=128)] = Field(
        None, description='The transfer message.'
    )


class UntagPostRequest(BaseModel):
    resourceArn: str = Field(..., description='The ARN of the resource.')
    tagKeys: List[TagKey] = Field(
        ...,
        description='A list of the keys of the tags to be removed from the resource.',
    )


class TargetType(Enum):
    DEFAULT = 'DEFAULT'
    THING_GROUP = 'THING_GROUP'
    CLIENT_ID = 'CLIENT_ID'
    SOURCE_IP = 'SOURCE_IP'
    PRINCIPAL_ID = 'PRINCIPAL_ID'


class LogTarget1(BaseModel):
    targetName: Optional[LogTargetName] = None
    targetType: Optional[LogTargetType] = None


class V2LoggingLevelPostRequest(BaseModel):
    logLevel: LogLevel = Field(..., description='The log level.')
    logTarget: LogTarget1 = Field(..., description='A log target.')


class DefaultLogLevel(Enum):
    DEBUG = 'DEBUG'
    INFO = 'INFO'
    ERROR = 'ERROR'
    WARN = 'WARN'
    DISABLED = 'DISABLED'


class V2LoggingOptionsPostRequest(BaseModel):
    defaultLogLevel: Optional[DefaultLogLevel] = Field(
        None, description='The default logging level.'
    )
    disableAllLogs: Optional[bool] = Field(
        None, description='If true all logs are disabled. The default is false.'
    )
    roleArn: Optional[str] = Field(
        None,
        description='The ARN of the role that allows IoT to write to Cloudwatch logs.',
    )


class ViolationsVerificationStateViolationIdPostRequest(BaseModel):
    verificationState: VerificationState = Field(
        ..., description='The verification state of the violation.'
    )
    verificationStateDescription: Optional[
        constr(pattern=r'[^\p{Cntrl}]*', max_length=1000)
    ] = Field(
        None,
        description='The description of the verification state of the violation (detect alarm).',
    )


class AbortCriteria(BaseModel):
    action: AbortAction
    failureType: JobExecutionFailureType
    minNumberOfExecutedThings: MinimumNumberOfExecutedThings
    thresholdPercentage: AbortThresholdPercentage


class AbortCriteriaList(RootModel[List[AbortCriteria]]):
    root: List[AbortCriteria] = Field(..., min_length=1)


class AddThingToBillingGroupRequest(BaseModel):
    billingGroupArn: Optional[BillingGroupArn] = None
    billingGroupName: Optional[BillingGroupName] = None
    thingArn: Optional[ThingArn] = None
    thingName: Optional[ThingName] = None


class AddThingToThingGroupRequest(BaseModel):
    overrideDynamicGroups: Optional[OverrideDynamicGroups] = None
    thingArn: Optional[ThingArn] = None
    thingGroupArn: Optional[ThingGroupArn] = None
    thingGroupName: Optional[ThingGroupName] = None
    thingName: Optional[ThingName] = None


class AddThingsToThingGroupParams(BaseModel):
    overrideDynamicGroups: Optional[NullableBoolean] = None
    thingGroupNames: ThingGroupNames


class AdditionalMetricsToRetainList(RootModel[List[BehaviorMetric]]):
    root: List[BehaviorMetric]


class AdditionalMetricsToRetainV2List(RootModel[List[MetricToRetain]]):
    root: List[MetricToRetain]


class AdditionalParameterMap(RootModel[Optional[Dict[str, Value]]]):
    root: Optional[Dict[str, Value]] = None


class AggregationType(BaseModel):
    name: AggregationTypeName
    values: Optional[AggregationTypeValues] = None


class AlertTarget(BaseModel):
    alertTargetArn: AlertTargetArn
    roleArn: RoleArn


class AlertTargets(RootModel[Optional[Dict[str, AlertTarget]]]):
    root: Optional[Dict[str, AlertTarget]] = None


class AssetPropertyValue(BaseModel):
    quality: Optional[AssetPropertyQuality] = None
    timestamp: AssetPropertyTimestamp
    value: AssetPropertyVariant


class AssetPropertyValueList(RootModel[List[AssetPropertyValue]]):
    root: List[AssetPropertyValue] = Field(..., min_length=1)


class AssociateTargetsWithJobResponse(BaseModel):
    description: Optional[JobDescription] = None
    jobArn: Optional[JobArn] = None
    jobId: Optional[JobId] = None


class AttachPolicyRequest(BaseModel):
    target: PolicyTarget


class AttributesMap(RootModel[Optional[Dict[str, Value]]]):
    root: Optional[Dict[str, Value]] = None


class AuditCheckConfiguration(BaseModel):
    enabled: Optional[Enabled] = None


class AuditCheckConfigurations(RootModel[Optional[Dict[str, AuditCheckConfiguration]]]):
    root: Optional[Dict[str, AuditCheckConfiguration]] = None


class AuditCheckDetails(BaseModel):
    checkCompliant: Optional[CheckCompliant] = None
    checkRunStatus: Optional[AuditCheckRunStatus] = None
    errorCode: Optional[ErrorCode] = None
    message: Optional[ErrorMessage] = None
    nonCompliantResourcesCount: Optional[NonCompliantResourcesCount] = None
    suppressedNonCompliantResourcesCount: Optional[
        SuppressedNonCompliantResourcesCount
    ] = None
    totalResourcesCount: Optional[TotalResourcesCount] = None


class AuditCheckToActionsMapping(
    RootModel[Optional[Dict[str, MitigationActionNameList]]]
):
    root: Optional[Dict[str, MitigationActionNameList]] = None


class AuditCheckToReasonCodeFilter(
    RootModel[Optional[Dict[str, ReasonForNonComplianceCodes]]]
):
    root: Optional[Dict[str, ReasonForNonComplianceCodes]] = None


class AuditDetails(RootModel[Optional[Dict[str, AuditCheckDetails]]]):
    root: Optional[Dict[str, AuditCheckDetails]] = None


class AuditMitigationActionExecutionMetadata(BaseModel):
    actionId: Optional[MitigationActionId] = None
    actionName: Optional[MitigationActionName] = None
    endTime: Optional[Timestamp] = None
    errorCode: Optional[ErrorCode] = None
    findingId: Optional[FindingId] = None
    message: Optional[ErrorMessage] = None
    startTime: Optional[Timestamp] = None
    status: Optional[AuditMitigationActionsExecutionStatus] = None
    taskId: Optional[MitigationActionsTaskId] = None


class AuditMitigationActionExecutionMetadataList(
    RootModel[List[AuditMitigationActionExecutionMetadata]]
):
    root: List[AuditMitigationActionExecutionMetadata]


class AuditMitigationActionsTaskMetadata(BaseModel):
    startTime: Optional[Timestamp] = None
    taskId: Optional[MitigationActionsTaskId] = None
    taskStatus: Optional[AuditMitigationActionsTaskStatus] = None


class AuditMitigationActionsTaskMetadataList(
    RootModel[List[AuditMitigationActionsTaskMetadata]]
):
    root: List[AuditMitigationActionsTaskMetadata]


class AuditMitigationActionsTaskTarget(BaseModel):
    auditCheckToReasonCodeFilter: Optional[AuditCheckToReasonCodeFilter] = None
    auditTaskId: Optional[AuditTaskId] = None
    findingIds: Optional[FindingIds] = None


class AuditNotificationTarget(BaseModel):
    enabled: Optional[Enabled] = None
    roleArn: Optional[RoleArn] = None
    targetArn: Optional[TargetArn] = None


class AuditNotificationTargetConfigurations(
    RootModel[Optional[Dict[str, AuditNotificationTarget]]]
):
    root: Optional[Dict[str, AuditNotificationTarget]] = None


class AuditTaskMetadata(BaseModel):
    taskId: Optional[AuditTaskId] = None
    taskStatus: Optional[AuditTaskStatus] = None
    taskType: Optional[AuditTaskType] = None


class AuditTaskMetadataList(RootModel[List[AuditTaskMetadata]]):
    root: List[AuditTaskMetadata]


class AuthInfo(BaseModel):
    actionType: Optional[ActionType] = None
    resources: Resources


class AuthInfos(RootModel[List[AuthInfo]]):
    root: List[AuthInfo] = Field(..., max_length=10, min_length=1)


class AuthorizerDescription(BaseModel):
    authorizerArn: Optional[AuthorizerArn] = None
    authorizerFunctionArn: Optional[AuthorizerFunctionArn] = None
    authorizerName: Optional[AuthorizerName] = None
    creationDate: Optional[DateType] = None
    enableCachingForHttp: Optional[EnableCachingForHttp] = None
    lastModifiedDate: Optional[DateType] = None
    signingDisabled: Optional[BooleanKey] = None
    status: Optional[AuthorizerStatus] = None
    tokenKeyName: Optional[TokenKeyName] = None
    tokenSigningPublicKeys: Optional[PublicKeyMap] = None


class AwsJobAbortCriteria(BaseModel):
    action: AwsJobAbortCriteriaAbortAction
    failureType: AwsJobAbortCriteriaFailureType
    minNumberOfExecutedThings: AwsJobAbortCriteriaMinimumNumberOfExecutedThings
    thresholdPercentage: AwsJobAbortCriteriaAbortThresholdPercentage


class AwsJobAbortCriteriaList(RootModel[List[AwsJobAbortCriteria]]):
    root: List[AwsJobAbortCriteria] = Field(..., min_length=1)


class AwsJobRateIncreaseCriteria(BaseModel):
    numberOfNotifiedThings: Optional[AwsJobRateIncreaseCriteriaNumberOfThings] = None
    numberOfSucceededThings: Optional[AwsJobRateIncreaseCriteriaNumberOfThings] = None


class BehaviorModelTrainingSummary(BaseModel):
    behaviorName: Optional[BehaviorName] = None
    datapointsCollectionPercentage: Optional[DataCollectionPercentage] = None
    lastModelRefreshDate: Optional[Timestamp] = None
    modelStatus: Optional[ModelStatus] = None
    securityProfileName: Optional[SecurityProfileName] = None
    trainingDataCollectionStartDate: Optional[Timestamp] = None


class BillingGroupMetadata(BaseModel):
    creationDate: Optional[CreationDate] = None


class Bucket(BaseModel):
    count: Optional[Count] = None
    keyValue: Optional[BucketKeyValue] = None


class Buckets(RootModel[List[Bucket]]):
    root: List[Bucket]


class CACertificate(BaseModel):
    certificateArn: Optional[CertificateArn] = None
    certificateId: Optional[CertificateId] = None
    creationDate: Optional[DateType] = None
    status: Optional[CACertificateStatus] = None


class CACertificates(RootModel[List[CACertificate]]):
    root: List[CACertificate]


class CancelJobRequest(BaseModel):
    comment: Optional[Comment] = None
    reasonCode: Optional[ReasonCode] = None


class CancelJobResponse(BaseModel):
    description: Optional[JobDescription] = None
    jobArn: Optional[JobArn] = None
    jobId: Optional[JobId] = None


class Certificate(BaseModel):
    certificateArn: Optional[CertificateArn] = None
    certificateId: Optional[CertificateId] = None
    certificateMode: Optional[CertificateMode] = None
    creationDate: Optional[DateType] = None
    status: Optional[CertificateStatus] = None


class CertificateValidity(BaseModel):
    notAfter: Optional[DateType] = None
    notBefore: Optional[DateType] = None


class Certificates(RootModel[List[Certificate]]):
    root: List[Certificate]


class ClientProperties(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class CloudwatchAlarmAction(BaseModel):
    alarmName: AlarmName
    roleArn: AwsArn
    stateReason: StateReason
    stateValue: StateValue


class CloudwatchLogsAction(BaseModel):
    batchMode: Optional[BatchMode] = None
    logGroupName: LogGroupName
    roleArn: AwsArn


class CloudwatchMetricAction(BaseModel):
    metricName: String
    metricNamespace: String
    metricTimestamp: Optional[String] = None
    metricUnit: String
    metricValue: String
    roleArn: AwsArn


class CodeSigningCertificateChain(BaseModel):
    certificateName: Optional[CertificateName] = None
    inlineDocument: Optional[InlineDocument] = None


class CodeSigningSignature(BaseModel):
    inlineDocument: Optional[Signature] = None


class Configuration(BaseModel):
    Enabled_1: Optional[Enabled] = Field(None, alias='Enabled')


class CreateCustomMetricResponse(BaseModel):
    metricArn: Optional[CustomMetricArn] = None
    metricName: Optional[MetricName] = None


class CreateDimensionResponse(BaseModel):
    arn: Optional[DimensionArn] = None
    name: Optional[DimensionName] = None


class CreateDomainConfigurationResponse(BaseModel):
    domainConfigurationArn: Optional[DomainConfigurationArn] = None
    domainConfigurationName: Optional[DomainConfigurationName] = None


class CreateDynamicThingGroupResponse(BaseModel):
    indexName: Optional[IndexName] = None
    queryString: Optional[QueryString] = None
    queryVersion: Optional[QueryVersion] = None
    thingGroupArn: Optional[ThingGroupArn] = None
    thingGroupId: Optional[ThingGroupId] = None
    thingGroupName: Optional[ThingGroupName] = None


class CreateFleetMetricResponse(BaseModel):
    metricArn: Optional[FleetMetricArn] = None
    metricName: Optional[FleetMetricName] = None


class CreateJobResponse(BaseModel):
    description: Optional[JobDescription] = None
    jobArn: Optional[JobArn] = None
    jobId: Optional[JobId] = None


class CreateJobTemplateResponse(BaseModel):
    jobTemplateArn: Optional[JobTemplateArn] = None
    jobTemplateId: Optional[JobTemplateId] = None


class CreateMitigationActionResponse(BaseModel):
    actionArn: Optional[MitigationActionArn] = None
    actionId: Optional[MitigationActionId] = None


class CreateOTAUpdateResponse(BaseModel):
    awsIotJobArn: Optional[AwsIotJobArn] = None
    awsIotJobId: Optional[AwsIotJobId] = None
    otaUpdateArn: Optional[OTAUpdateArn] = None
    otaUpdateId: Optional[OTAUpdateId] = None
    otaUpdateStatus: Optional[OTAUpdateStatus] = None


class CreatePolicyResponse(BaseModel):
    policyArn: Optional[PolicyArn] = None
    policyDocument: Optional[PolicyDocument] = None
    policyName: Optional[PolicyName] = None
    policyVersionId: Optional[PolicyVersionId] = None


class CreatePolicyVersionRequest(BaseModel):
    policyDocument: PolicyDocument


class CreatePolicyVersionResponse(BaseModel):
    isDefaultVersion: Optional[IsDefaultVersion] = None
    policyArn: Optional[PolicyArn] = None
    policyDocument: Optional[PolicyDocument] = None
    policyVersionId: Optional[PolicyVersionId] = None


class CreateProvisioningTemplateResponse(BaseModel):
    defaultVersionId: Optional[TemplateVersionId] = None
    templateArn: Optional[TemplateArn] = None
    templateName: Optional[TemplateName] = None


class CreateProvisioningTemplateVersionRequest(BaseModel):
    templateBody: TemplateBody


class CreateProvisioningTemplateVersionResponse(BaseModel):
    isDefaultVersion: Optional[IsDefaultVersion] = None
    templateArn: Optional[TemplateArn] = None
    templateName: Optional[TemplateName] = None
    versionId: Optional[TemplateVersionId] = None


class CreateRoleAliasResponse(BaseModel):
    roleAlias: Optional[RoleAlias] = None
    roleAliasArn: Optional[RoleAliasArn] = None


class CreateScheduledAuditResponse(BaseModel):
    scheduledAuditArn: Optional[ScheduledAuditArn] = None


class CreateSecurityProfileResponse(BaseModel):
    securityProfileArn: Optional[SecurityProfileArn] = None
    securityProfileName: Optional[SecurityProfileName] = None


class CreateStreamResponse(BaseModel):
    description: Optional[StreamDescription] = None
    streamArn: Optional[StreamArn] = None
    streamId: Optional[StreamId] = None
    streamVersion: Optional[StreamVersion] = None


class CreateThingGroupResponse(BaseModel):
    thingGroupArn: Optional[ThingGroupArn] = None
    thingGroupId: Optional[ThingGroupId] = None
    thingGroupName: Optional[ThingGroupName] = None


class CreateThingRequest(BaseModel):
    attributePayload: Optional[AttributePayload] = None
    billingGroupName: Optional[BillingGroupName] = None
    thingTypeName: Optional[ThingTypeName] = None


class CreateThingResponse(BaseModel):
    thingArn: Optional[ThingArn] = None
    thingId: Optional[ThingId] = None
    thingName: Optional[ThingName] = None


class CreateThingTypeResponse(BaseModel):
    thingTypeArn: Optional[ThingTypeArn] = None
    thingTypeId: Optional[ThingTypeId] = None
    thingTypeName: Optional[ThingTypeName] = None


class CustomCodeSigning(BaseModel):
    certificateChain: Optional[CodeSigningCertificateChain] = None
    hashAlgorithm: Optional[HashAlgorithm] = None
    signature: Optional[CodeSigningSignature] = None
    signatureAlgorithm: Optional[SignatureAlgorithm] = None


class DeprecateThingTypeRequest(BaseModel):
    undoDeprecate: Optional[UndoDeprecate] = None


class DescribeAccountAuditConfigurationResponse(BaseModel):
    auditCheckConfigurations: Optional[AuditCheckConfigurations] = None
    auditNotificationTargetConfigurations: Optional[
        AuditNotificationTargetConfigurations
    ] = None
    roleArn: Optional[RoleArn] = None


class DescribeAuthorizerResponse(BaseModel):
    authorizerDescription: Optional[AuthorizerDescription] = None


class DescribeBillingGroupResponse(BaseModel):
    billingGroupArn: Optional[BillingGroupArn] = None
    billingGroupId: Optional[BillingGroupId] = None
    billingGroupMetadata: Optional[BillingGroupMetadata] = None
    billingGroupName: Optional[BillingGroupName] = None
    billingGroupProperties: Optional[BillingGroupProperties] = None
    version: Optional[Version] = None


class DescribeCustomMetricResponse(BaseModel):
    creationDate: Optional[Timestamp] = None
    displayName: Optional[CustomMetricDisplayName] = None
    lastModifiedDate: Optional[Timestamp] = None
    metricArn: Optional[CustomMetricArn] = None
    metricName: Optional[MetricName] = None
    metricType: Optional[CustomMetricType] = None


class DescribeDefaultAuthorizerResponse(BaseModel):
    authorizerDescription: Optional[AuthorizerDescription] = None


class DescribeDimensionResponse(BaseModel):
    arn: Optional[DimensionArn] = None
    creationDate: Optional[Timestamp] = None
    lastModifiedDate: Optional[Timestamp] = None
    name: Optional[DimensionName] = None
    stringValues: Optional[DimensionStringValues] = None
    type: Optional[DimensionType] = None


class DescribeDomainConfigurationResponse(BaseModel):
    authorizerConfig: Optional[AuthorizerConfig] = None
    domainConfigurationArn: Optional[DomainConfigurationArn] = None
    domainConfigurationName: Optional[ReservedDomainConfigurationName] = None
    domainConfigurationStatus: Optional[DomainConfigurationStatus] = None
    domainName: Optional[DomainName] = None
    domainType: Optional[DomainType] = None
    lastStatusChangeDate: Optional[DateType] = None
    serverCertificates: Optional[ServerCertificates] = None
    serviceType: Optional[ServiceType] = None


class DescribeEndpointResponse(BaseModel):
    endpointAddress: Optional[EndpointAddress] = None


class DescribeFleetMetricResponse(BaseModel):
    aggregationField: Optional[AggregationField] = None
    aggregationType: Optional[AggregationType] = None
    creationDate: Optional[CreationDate] = None
    description: Optional[FleetMetricDescription] = None
    indexName: Optional[IndexName] = None
    lastModifiedDate: Optional[LastModifiedDate] = None
    metricArn: Optional[FleetMetricArn] = None
    metricName: Optional[FleetMetricName] = None
    period: Optional[FleetMetricPeriod] = None
    queryString: Optional[QueryString] = None
    queryVersion: Optional[QueryVersion] = None
    unit: Optional[FleetMetricUnit] = None
    version: Optional[Version] = None


class DescribeIndexResponse(BaseModel):
    indexName: Optional[IndexName] = None
    indexStatus: Optional[IndexStatus] = None
    schema_: Optional[IndexSchema] = Field(None, alias='schema')


class DescribeProvisioningTemplateVersionResponse(BaseModel):
    creationDate: Optional[DateType] = None
    isDefaultVersion: Optional[IsDefaultVersion] = None
    templateBody: Optional[TemplateBody] = None
    versionId: Optional[TemplateVersionId] = None


class DescribeScheduledAuditResponse(BaseModel):
    dayOfMonth: Optional[DayOfMonth] = None
    dayOfWeek: Optional[DayOfWeek] = None
    frequency: Optional[AuditFrequency] = None
    scheduledAuditArn: Optional[ScheduledAuditArn] = None
    scheduledAuditName: Optional[ScheduledAuditName] = None
    targetCheckNames: Optional[TargetAuditCheckNames] = None


class DescribeThingRegistrationTaskResponse(BaseModel):
    creationDate: Optional[CreationDate] = None
    failureCount: Optional[Count] = None
    inputFileBucket: Optional[RegistryS3BucketName] = None
    inputFileKey: Optional[RegistryS3KeyName] = None
    lastModifiedDate: Optional[LastModifiedDate] = None
    message: Optional[ErrorMessage] = None
    percentageProgress: Optional[Percentage] = None
    roleArn: Optional[RoleArn] = None
    status: Optional[Status] = None
    successCount: Optional[Count] = None
    taskId: Optional[TaskId] = None
    templateBody: Optional[TemplateBody] = None


class DescribeThingResponse(BaseModel):
    attributes: Optional[Attributes] = None
    billingGroupName: Optional[BillingGroupName] = None
    defaultClientId: Optional[ClientId] = None
    thingArn: Optional[ThingArn] = None
    thingId: Optional[ThingId] = None
    thingName: Optional[ThingName] = None
    thingTypeName: Optional[ThingTypeName] = None
    version: Optional[Version] = None


class DescribeThingTypeResponse(BaseModel):
    thingTypeArn: Optional[ThingTypeArn] = None
    thingTypeId: Optional[ThingTypeId] = None
    thingTypeMetadata: Optional[ThingTypeMetadata] = None
    thingTypeName: Optional[ThingTypeName] = None
    thingTypeProperties: Optional[ThingTypeProperties] = None


class Destination(BaseModel):
    s3Destination: Optional[S3Destination] = None


class DetachPolicyRequest(BaseModel):
    target: PolicyTarget


class DetailsMap(RootModel[Optional[Dict[str, DetailsValue]]]):
    root: Optional[Dict[str, DetailsValue]] = None


class DetectMitigationActionExecution(BaseModel):
    actionName: Optional[MitigationActionName] = None
    errorCode: Optional[DetectMitigationActionExecutionErrorCode] = None
    executionEndDate: Optional[Timestamp] = None
    executionStartDate: Optional[Timestamp] = None
    message: Optional[ErrorMessage] = None
    status: Optional[DetectMitigationActionExecutionStatus] = None
    taskId: Optional[MitigationActionsTaskId] = None
    thingName: Optional[DeviceDefenderThingName] = None
    violationId: Optional[ViolationId] = None


class DetectMitigationActionExecutionList(
    RootModel[List[DetectMitigationActionExecution]]
):
    root: List[DetectMitigationActionExecution]


class DetectMitigationActionsTaskStatistics(BaseModel):
    actionsExecuted: Optional[GenericLongValue] = None
    actionsFailed: Optional[GenericLongValue] = None
    actionsSkipped: Optional[GenericLongValue] = None


class DetectMitigationActionsToExecuteList(RootModel[List[MitigationActionName]]):
    root: List[MitigationActionName] = Field(..., max_length=5, min_length=1)


class DocumentParameter(BaseModel):
    description: Optional[JobDescription] = None
    example: Optional[Example] = None
    key: Optional[ParameterKey] = None
    optional: Optional[OptionalModel] = None
    regex: Optional[Regex] = None


class DocumentParameters(RootModel[List[DocumentParameter]]):
    root: List[DocumentParameter]


class DomainConfigurationSummary(BaseModel):
    domainConfigurationArn: Optional[DomainConfigurationArn] = None
    domainConfigurationName: Optional[ReservedDomainConfigurationName] = None
    serviceType: Optional[ServiceType] = None


class DomainConfigurations(RootModel[List[DomainConfigurationSummary]]):
    root: List[DomainConfigurationSummary]


class DynamoDBAction(BaseModel):
    hashKeyField: HashKeyField
    hashKeyType: Optional[DynamoKeyType] = None
    hashKeyValue: HashKeyValue
    operation: Optional[DynamoOperation] = None
    payloadField: Optional[PayloadField] = None
    rangeKeyField: Optional[RangeKeyField] = None
    rangeKeyType: Optional[DynamoKeyType] = None
    rangeKeyValue: Optional[RangeKeyValue] = None
    roleArn: AwsArn
    tableName: TableName


class EffectivePolicy(BaseModel):
    policyArn: Optional[PolicyArn] = None
    policyDocument: Optional[PolicyDocument] = None
    policyName: Optional[PolicyName] = None


class ElasticsearchAction(BaseModel):
    endpoint: ElasticsearchEndpoint
    id: ElasticsearchId
    index: ElasticsearchIndex
    roleArn: AwsArn
    type: ElasticsearchType


class EnableIoTLoggingParams(BaseModel):
    logLevel: LogLevel
    roleArnForLogging: RoleArn


class ErrorInfo(BaseModel):
    code: Optional[Code] = None
    message: Optional[OTAUpdateErrorMessage] = None


class EventConfigurations(RootModel[Optional[Dict[str, Configuration]]]):
    root: Optional[Dict[str, Configuration]] = None


class ExponentialRolloutRate(BaseModel):
    baseRatePerMinute: RolloutRatePerMinute
    incrementFactor: IncrementFactor
    rateIncreaseCriteria: RateIncreaseCriteria


class FieldModel(BaseModel):
    name: Optional[FieldName] = None
    type: Optional[FieldType] = None


class Fields(RootModel[List[FieldModel]]):
    root: List[FieldModel]


class FirehoseAction(BaseModel):
    batchMode: Optional[BatchMode] = None
    deliveryStreamName: DeliveryStreamName
    roleArn: AwsArn
    separator: Optional[FirehoseSeparator] = None


class GetBucketsAggregationRequest(BaseModel):
    aggregationField: AggregationField
    bucketsAggregationType: BucketsAggregationType
    indexName: Optional[IndexName] = None
    queryString: QueryString
    queryVersion: Optional[QueryVersion] = None


class GetBucketsAggregationResponse(BaseModel):
    buckets: Optional[Buckets] = None
    totalCount: Optional[Count] = None


class GetCardinalityRequest(BaseModel):
    aggregationField: Optional[AggregationField] = None
    indexName: Optional[IndexName] = None
    queryString: QueryString
    queryVersion: Optional[QueryVersion] = None


class GetEffectivePoliciesRequest(BaseModel):
    cognitoIdentityPoolId: Optional[CognitoIdentityPoolId] = None
    principal: Optional[Principal] = None


class GetJobDocumentResponse(BaseModel):
    document: Optional[JobDocument] = None


class GetLoggingOptionsResponse(BaseModel):
    logLevel: Optional[LogLevel] = None
    roleArn: Optional[AwsArn] = None


class GetPercentilesRequest(BaseModel):
    aggregationField: Optional[AggregationField] = None
    indexName: Optional[IndexName] = None
    percents: Optional[PercentList] = None
    queryString: QueryString
    queryVersion: Optional[QueryVersion] = None


class GetPolicyResponse(BaseModel):
    creationDate: Optional[DateType] = None
    defaultVersionId: Optional[PolicyVersionId] = None
    generationId: Optional[GenerationId] = None
    lastModifiedDate: Optional[DateType] = None
    policyArn: Optional[PolicyArn] = None
    policyDocument: Optional[PolicyDocument] = None
    policyName: Optional[PolicyName] = None


class GetPolicyVersionResponse(BaseModel):
    creationDate: Optional[DateType] = None
    generationId: Optional[GenerationId] = None
    isDefaultVersion: Optional[IsDefaultVersion] = None
    lastModifiedDate: Optional[DateType] = None
    policyArn: Optional[PolicyArn] = None
    policyDocument: Optional[PolicyDocument] = None
    policyName: Optional[PolicyName] = None
    policyVersionId: Optional[PolicyVersionId] = None


class GetRegistrationCodeResponse(BaseModel):
    registrationCode: Optional[RegistrationCode] = None


class GetStatisticsRequest(BaseModel):
    aggregationField: Optional[AggregationField] = None
    indexName: Optional[IndexName] = None
    queryString: QueryString
    queryVersion: Optional[QueryVersion] = None


class GetV2LoggingOptionsResponse(BaseModel):
    defaultLogLevel: Optional[LogLevel] = None
    disableAllLogs: Optional[DisableAllLogs] = None
    roleArn: Optional[AwsArn] = None


class GroupNameAndArn(BaseModel):
    groupArn: Optional[ThingGroupArn] = None
    groupName: Optional[ThingGroupName] = None


class HeaderList(RootModel[List[HttpActionHeader]]):
    root: List[HttpActionHeader] = Field(..., max_length=100, min_length=0)


class HttpUrlDestinationConfiguration(BaseModel):
    confirmationUrl: Url


class HttpUrlDestinationProperties(BaseModel):
    confirmationUrl: Optional[Url] = None


class HttpUrlDestinationSummary(BaseModel):
    confirmationUrl: Optional[Url] = None


class IotEventsAction(BaseModel):
    batchMode: Optional[BatchMode] = None
    inputName: InputName
    messageId: Optional[MessageId] = None
    roleArn: AwsArn


class IssuerCertificateIdentifier(BaseModel):
    issuerCertificateSerialNumber: Optional[IssuerCertificateSerialNumber] = None
    issuerCertificateSubject: Optional[IssuerCertificateSubject] = None
    issuerId: Optional[IssuerId] = None


class JobExecutionStatusDetails(BaseModel):
    detailsMap: Optional[DetailsMap] = None


class JobExecutionSummary(BaseModel):
    executionNumber: Optional[ExecutionNumber] = None
    lastUpdatedAt: Optional[DateType] = None
    queuedAt: Optional[DateType] = None
    retryAttempt: Optional[RetryAttempt] = None
    startedAt: Optional[DateType] = None
    status: Optional[JobExecutionStatus] = None


class JobExecutionSummaryForJob(BaseModel):
    jobExecutionSummary: Optional[JobExecutionSummary] = None
    thingArn: Optional[ThingArn] = None


class JobExecutionSummaryForJobList(RootModel[List[JobExecutionSummaryForJob]]):
    root: List[JobExecutionSummaryForJob]


class JobExecutionSummaryForThing(BaseModel):
    jobExecutionSummary: Optional[JobExecutionSummary] = None
    jobId: Optional[JobId] = None


class JobExecutionSummaryForThingList(RootModel[List[JobExecutionSummaryForThing]]):
    root: List[JobExecutionSummaryForThing]


class JobExecutionsRolloutConfig(BaseModel):
    exponentialRate: Optional[ExponentialRolloutRate] = None
    maximumPerMinute: Optional[MaxJobExecutionsPerMin] = None


class JobProcessDetails(BaseModel):
    numberOfCanceledThings: Optional[CanceledThings] = None
    numberOfFailedThings: Optional[FailedThings] = None
    numberOfInProgressThings: Optional[InProgressThings] = None
    numberOfQueuedThings: Optional[QueuedThings] = None
    numberOfRejectedThings: Optional[RejectedThings] = None
    numberOfRemovedThings: Optional[RemovedThings] = None
    numberOfSucceededThings: Optional[SucceededThings] = None
    numberOfTimedOutThings: Optional[TimedOutThings] = None
    processingTargets: Optional[ProcessingTargetNameList] = None


class JobSummary(BaseModel):
    completedAt: Optional[DateType] = None
    createdAt: Optional[DateType] = None
    isConcurrent: Optional[BooleanWrapperObject] = None
    jobArn: Optional[JobArn] = None
    jobId: Optional[JobId] = None
    lastUpdatedAt: Optional[DateType] = None
    status: Optional[JobStatus] = None
    targetSelection: Optional[TargetSelection] = None
    thingGroupId: Optional[ThingGroupId] = None


class JobSummaryList(RootModel[List[JobSummary]]):
    root: List[JobSummary]


class JobTargets(RootModel[List[TargetArn]]):
    root: List[TargetArn] = Field(..., min_length=1)


class KafkaAction(BaseModel):
    clientProperties: ClientProperties
    destinationArn: AwsArn
    key: Optional[String] = None
    partition: Optional[String] = None
    topic: String


class KeyPair(BaseModel):
    PrivateKey_1: Optional[PrivateKey] = Field(None, alias='PrivateKey')
    PublicKey_1: Optional[PublicKey] = Field(None, alias='PublicKey')


class KinesisAction(BaseModel):
    partitionKey: Optional[PartitionKey] = None
    roleArn: AwsArn
    streamName: StreamName


class ListAuditMitigationActionsExecutionsResponse(BaseModel):
    actionsExecutions: Optional[AuditMitigationActionExecutionMetadataList] = None
    nextToken: Optional[NextToken] = None


class ListAuditMitigationActionsTasksResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    tasks: Optional[AuditMitigationActionsTaskMetadataList] = None


class ListAuditTasksResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    tasks: Optional[AuditTaskMetadataList] = None


class ListAuthorizersResponse(BaseModel):
    authorizers: Optional[Authorizers] = None
    nextMarker: Optional[Marker] = None


class ListCACertificatesResponse(BaseModel):
    certificates: Optional[CACertificates] = None
    nextMarker: Optional[Marker] = None


class ListCertificatesByCAResponse(BaseModel):
    certificates: Optional[Certificates] = None
    nextMarker: Optional[Marker] = None


class ListCertificatesResponse(BaseModel):
    certificates: Optional[Certificates] = None
    nextMarker: Optional[Marker] = None


class ListCustomMetricsResponse(BaseModel):
    metricNames: Optional[MetricNames] = None
    nextToken: Optional[NextToken] = None


class ListDetectMitigationActionsExecutionsResponse(BaseModel):
    actionsExecutions: Optional[DetectMitigationActionExecutionList] = None
    nextToken: Optional[NextToken] = None


class ListDimensionsResponse(BaseModel):
    dimensionNames: Optional[DimensionNames] = None
    nextToken: Optional[NextToken] = None


class ListDomainConfigurationsResponse(BaseModel):
    domainConfigurations: Optional[DomainConfigurations] = None
    nextMarker: Optional[Marker] = None


class ListFleetMetricsResponse(BaseModel):
    fleetMetrics: Optional[FleetMetricNameAndArnList] = None
    nextToken: Optional[NextToken] = None


class ListIndicesResponse(BaseModel):
    indexNames: Optional[IndexNamesList] = None
    nextToken: Optional[NextToken] = None


class ListJobExecutionsForJobResponse(BaseModel):
    executionSummaries: Optional[JobExecutionSummaryForJobList] = None
    nextToken: Optional[NextToken] = None


class ListJobExecutionsForThingResponse(BaseModel):
    executionSummaries: Optional[JobExecutionSummaryForThingList] = None
    nextToken: Optional[NextToken] = None


class ListJobTemplatesResponse(BaseModel):
    jobTemplates: Optional[JobTemplateSummaryList] = None
    nextToken: Optional[NextToken] = None


class ListJobsResponse(BaseModel):
    jobs: Optional[JobSummaryList] = None
    nextToken: Optional[NextToken] = None


class ListOTAUpdatesResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    otaUpdates: Optional[OTAUpdatesSummary] = None


class ListOutgoingCertificatesResponse(BaseModel):
    nextMarker: Optional[Marker] = None
    outgoingCertificates: Optional[OutgoingCertificates] = None


class ListPolicyPrincipalsResponse(BaseModel):
    nextMarker: Optional[Marker] = None
    principals: Optional[Principals] = None


class ListPrincipalThingsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    things: Optional[ThingNameList] = None


class ListRoleAliasesResponse(BaseModel):
    nextMarker: Optional[Marker] = None
    roleAliases: Optional[RoleAliases] = None


class ListTargetsForPolicyResponse(BaseModel):
    nextMarker: Optional[Marker] = None
    targets: Optional[PolicyTargets] = None


class ListThingPrincipalsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    principals: Optional[Principals] = None


class ListThingRegistrationTaskReportsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    reportType: Optional[ReportType] = None
    resourceLinks: Optional[S3FileUrlList] = None


class ListThingRegistrationTasksResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    taskIds: Optional[TaskIdList] = None


class ListThingsInBillingGroupResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    things: Optional[ThingNameList] = None


class ListThingsInThingGroupResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    things: Optional[ThingNameList] = None


class LocationTimestamp(BaseModel):
    unit: Optional[String] = None
    value: String


class LogTarget(BaseModel):
    targetName: Optional[LogTargetName] = None
    targetType: LogTargetType


class LogTargetConfiguration(BaseModel):
    logLevel: Optional[LogLevel] = None
    logTarget: Optional[LogTarget] = None


class LogTargetConfigurations(RootModel[List[LogTargetConfiguration]]):
    root: List[LogTargetConfiguration]


class ManagedJobTemplateSummary(BaseModel):
    description: Optional[JobDescription] = None
    environments: Optional[Environments] = None
    templateArn: Optional[JobTemplateArn] = None
    templateName: Optional[ManagedJobTemplateName] = None
    templateVersion: Optional[ManagedTemplateVersion] = None


class ManagedJobTemplatesSummaryList(RootModel[List[ManagedJobTemplateSummary]]):
    root: List[ManagedJobTemplateSummary]


class MitigationActionIdentifier(BaseModel):
    actionArn: Optional[MitigationActionArn] = None
    actionName: Optional[MitigationActionName] = None
    creationDate: Optional[Timestamp] = None


class MitigationActionIdentifierList(RootModel[List[MitigationActionIdentifier]]):
    root: List[MitigationActionIdentifier]


class NamedShadowNamesFilter(RootModel[List[ShadowName]]):
    root: List[ShadowName]


class ParameterMap(RootModel[Optional[Dict[str, ParameterValue]]]):
    root: Optional[Dict[str, ParameterValue]] = None


class Parameters(RootModel[Optional[Dict[str, Value]]]):
    root: Optional[Dict[str, Value]] = None


class PercentPair(BaseModel):
    percent: Optional[Percent] = None
    value: Optional[PercentValue] = None


class Percentiles(RootModel[List[PercentPair]]):
    root: List[PercentPair]


class Policy(BaseModel):
    policyArn: Optional[PolicyArn] = None
    policyName: Optional[PolicyName] = None


class PolicyVersion(BaseModel):
    createDate: Optional[DateType] = None
    isDefaultVersion: Optional[IsDefaultVersion] = None
    versionId: Optional[PolicyVersionId] = None


class PolicyVersions(RootModel[List[PolicyVersion]]):
    root: List[PolicyVersion]


class ProvisioningHook(BaseModel):
    payloadVersion: Optional[PayloadVersion] = None
    targetArn: TargetArn


class ProvisioningTemplateSummary(BaseModel):
    creationDate: Optional[DateType] = None
    description: Optional[TemplateDescription] = None
    enabled: Optional[Enabled] = None
    lastModifiedDate: Optional[DateType] = None
    templateArn: Optional[TemplateArn] = None
    templateName: Optional[TemplateName] = None
    type: Optional[TemplateType] = None


class ProvisioningTemplateVersionSummary(BaseModel):
    creationDate: Optional[DateType] = None
    isDefaultVersion: Optional[IsDefaultVersion] = None
    versionId: Optional[TemplateVersionId] = None


class PublishFindingToSnsParams(BaseModel):
    topicArn: SnsTopicArn


class PutAssetPropertyValueEntry(BaseModel):
    assetId: Optional[AssetId] = None
    entryId: Optional[AssetPropertyEntryId] = None
    propertyAlias: Optional[AssetPropertyAlias] = None
    propertyId: Optional[AssetPropertyId] = None
    propertyValues: AssetPropertyValueList


class PutAssetPropertyValueEntryList(RootModel[List[PutAssetPropertyValueEntry]]):
    root: List[PutAssetPropertyValueEntry] = Field(..., min_length=1)


class PutItemInput(BaseModel):
    tableName: TableName


class PutVerificationStateOnViolationRequest(BaseModel):
    verificationState: VerificationState
    verificationStateDescription: Optional[VerificationStateDescription] = None


class RegisterThingRequest(BaseModel):
    parameters: Optional[Parameters] = None
    templateBody: TemplateBody


class RegisterThingResponse(BaseModel):
    certificatePem: Optional[CertificatePem] = None
    resourceArns: Optional[ResourceArns] = None


class RemoveThingFromBillingGroupRequest(BaseModel):
    billingGroupArn: Optional[BillingGroupArn] = None
    billingGroupName: Optional[BillingGroupName] = None
    thingArn: Optional[ThingArn] = None
    thingName: Optional[ThingName] = None


class RemoveThingFromThingGroupRequest(BaseModel):
    thingArn: Optional[ThingArn] = None
    thingGroupArn: Optional[ThingGroupArn] = None
    thingGroupName: Optional[ThingGroupName] = None
    thingName: Optional[ThingName] = None


class ResourceIdentifier(BaseModel):
    account: Optional[AwsAccountId] = None
    caCertificateId: Optional[CertificateId] = None
    clientId: Optional[ClientId] = None
    cognitoIdentityPoolId: Optional[CognitoIdentityPoolId] = None
    deviceCertificateArn: Optional[CertificateArn] = None
    deviceCertificateId: Optional[CertificateId] = None
    iamRoleArn: Optional[RoleArn] = None
    issuerCertificateIdentifier: Optional[IssuerCertificateIdentifier] = None
    policyVersionIdentifier: Optional[PolicyVersionIdentifier] = None
    roleAliasArn: Optional[RoleAliasArn] = None


class RetryCriteria(BaseModel):
    failureType: RetryableFailureType
    numberOfRetries: NumberOfRetries


class RetryCriteriaList(RootModel[List[RetryCriteria]]):
    root: List[RetryCriteria] = Field(..., max_length=2, min_length=1)


class RoleAliasDescription(BaseModel):
    creationDate: Optional[DateType] = None
    credentialDurationSeconds: Optional[CredentialDurationSeconds] = None
    lastModifiedDate: Optional[DateType] = None
    owner: Optional[AwsAccountId] = None
    roleAlias: Optional[RoleAlias] = None
    roleAliasArn: Optional[RoleAliasArn] = None
    roleArn: Optional[RoleArn] = None


class S3Location(BaseModel):
    bucket: Optional[S3Bucket] = None
    key: Optional[S3Key] = None
    version: Optional[S3Version] = None


class SalesforceAction(BaseModel):
    token: SalesforceToken
    url: SalesforceEndpoint


class ScheduledAuditMetadata(BaseModel):
    dayOfMonth: Optional[DayOfMonth] = None
    dayOfWeek: Optional[DayOfWeek] = None
    frequency: Optional[AuditFrequency] = None
    scheduledAuditArn: Optional[ScheduledAuditArn] = None
    scheduledAuditName: Optional[ScheduledAuditName] = None


class ScheduledAuditMetadataList(RootModel[List[ScheduledAuditMetadata]]):
    root: List[ScheduledAuditMetadata]


class ScheduledJobRollout(BaseModel):
    startTime: Optional[StringDateTime] = None


class ScheduledJobRolloutList(RootModel[List[ScheduledJobRollout]]):
    root: List[ScheduledJobRollout]


class SecurityProfileIdentifier(BaseModel):
    arn: SecurityProfileArn
    name: SecurityProfileName


class SecurityProfileIdentifiers(RootModel[List[SecurityProfileIdentifier]]):
    root: List[SecurityProfileIdentifier]


class SecurityProfileTarget(BaseModel):
    arn: SecurityProfileTargetArn


class SecurityProfileTargetMapping(BaseModel):
    securityProfileIdentifier: Optional[SecurityProfileIdentifier] = None
    target: Optional[SecurityProfileTarget] = None


class SecurityProfileTargetMappings(RootModel[List[SecurityProfileTargetMapping]]):
    root: List[SecurityProfileTargetMapping]


class SecurityProfileTargets(RootModel[List[SecurityProfileTarget]]):
    root: List[SecurityProfileTarget]


class SetV2LoggingLevelRequest(BaseModel):
    logLevel: LogLevel
    logTarget: LogTarget


class SigV4Authorization(BaseModel):
    roleArn: AwsArn
    serviceName: ServiceName
    signingRegion: SigningRegion


class SqsAction(BaseModel):
    queueUrl: QueueUrl
    roleArn: AwsArn
    useBase64: Optional[UseBase64] = None


class StartAuditMitigationActionsTaskRequest(BaseModel):
    auditCheckToActionsMapping: AuditCheckToActionsMapping
    clientRequestToken: ClientRequestToken
    target: AuditMitigationActionsTaskTarget


class StartOnDemandAuditTaskRequest(BaseModel):
    targetCheckNames: TargetAuditCheckNames


class StartSigningJobParameter(BaseModel):
    destination: Optional[Destination] = None
    signingProfileName: Optional[SigningProfileName] = None
    signingProfileParameter: Optional[SigningProfileParameter] = None


class StartThingRegistrationTaskRequest(BaseModel):
    inputFileBucket: RegistryS3BucketName
    inputFileKey: RegistryS3KeyName
    roleArn: RoleArn
    templateBody: TemplateBody


class StartThingRegistrationTaskResponse(BaseModel):
    taskId: Optional[TaskId] = None


class Statistics(BaseModel):
    average: Optional[Average] = None
    count: Optional[Count] = None
    maximum: Optional[Maximum] = None
    minimum: Optional[Minimum] = None
    stdDeviation: Optional[StdDeviation] = None
    sum: Optional[Sum] = None
    sumOfSquares: Optional[SumOfSquares] = None
    variance: Optional[Variance] = None


class Stream(BaseModel):
    fileId: Optional[FileId] = None
    streamId: Optional[StreamId] = None


class StreamFile(BaseModel):
    fileId: Optional[FileId] = None
    s3Location: Optional[S3Location] = None


class StreamFiles(RootModel[List[StreamFile]]):
    root: List[StreamFile] = Field(..., max_length=50, min_length=1)


class StreamInfo(BaseModel):
    createdAt: Optional[DateType] = None
    description: Optional[StreamDescription] = None
    files: Optional[StreamFiles] = None
    lastUpdatedAt: Optional[DateType] = None
    roleArn: Optional[RoleArn] = None
    streamArn: Optional[StreamArn] = None
    streamId: Optional[StreamId] = None
    streamVersion: Optional[StreamVersion] = None


class StreamSummary(BaseModel):
    description: Optional[StreamDescription] = None
    streamArn: Optional[StreamArn] = None
    streamId: Optional[StreamId] = None
    streamVersion: Optional[StreamVersion] = None


class StreamsSummary(RootModel[List[StreamSummary]]):
    root: List[StreamSummary]


class StringList(RootModel[List[StringValue]]):
    root: List[StringValue]


class Tag(BaseModel):
    Key: TagKey
    Value: Optional[TagValue] = None


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class TagResourceRequest(BaseModel):
    resourceArn: ResourceArn
    tags: TagList


class TargetViolationIdsForDetectMitigationActions(RootModel[List[ViolationId]]):
    root: List[ViolationId] = Field(..., max_length=25, min_length=1)


class TaskStatistics(BaseModel):
    canceledChecks: Optional[CanceledChecksCount] = None
    compliantChecks: Optional[CompliantChecksCount] = None
    failedChecks: Optional[FailedChecksCount] = None
    inProgressChecks: Optional[InProgressChecksCount] = None
    nonCompliantChecks: Optional[NonCompliantChecksCount] = None
    totalChecks: Optional[TotalChecksCount] = None
    waitingForDataCollectionChecks: Optional[WaitingForDataCollectionChecksCount] = None


class TaskStatisticsForAuditCheck(BaseModel):
    canceledFindingsCount: Optional[CanceledFindingsCount] = None
    failedFindingsCount: Optional[FailedFindingsCount] = None
    skippedFindingsCount: Optional[SkippedFindingsCount] = None
    succeededFindingsCount: Optional[SucceededFindingsCount] = None
    totalFindingsCount: Optional[TotalFindingsCount] = None


class TestAuthorizationRequest(BaseModel):
    authInfos: AuthInfos
    cognitoIdentityPoolId: Optional[CognitoIdentityPoolId] = None
    policyNamesToAdd: Optional[PolicyNames] = None
    policyNamesToSkip: Optional[PolicyNames] = None
    principal: Optional[Principal] = None


class TestInvokeAuthorizerRequest(BaseModel):
    httpContext: Optional[HttpContext] = None
    mqttContext: Optional[MqttContext] = None
    tlsContext: Optional[TlsContext] = None
    token: Optional[Token] = None
    tokenSignature: Optional[TokenSignature] = None


class ThingAttribute(BaseModel):
    attributes: Optional[Attributes] = None
    thingArn: Optional[ThingArn] = None
    thingName: Optional[ThingName] = None
    thingTypeName: Optional[ThingTypeName] = None
    version: Optional[Version] = None


class ThingAttributeList(RootModel[List[ThingAttribute]]):
    root: List[ThingAttribute]


class ThingDocument(BaseModel):
    attributes: Optional[Attributes] = None
    connectivity: Optional[ThingConnectivity] = None
    deviceDefender: Optional[JsonDocument] = None
    shadow: Optional[JsonDocument] = None
    thingGroupNames: Optional[ThingGroupNameList] = None
    thingId: Optional[ThingId] = None
    thingName: Optional[ThingName] = None
    thingTypeName: Optional[ThingTypeName] = None


class ThingDocumentList(RootModel[List[ThingDocument]]):
    root: List[ThingDocument]


class ThingGroupDocument(BaseModel):
    attributes: Optional[Attributes] = None
    parentGroupNames: Optional[ThingGroupNameList] = None
    thingGroupDescription: Optional[ThingGroupDescription] = None
    thingGroupId: Optional[ThingGroupId] = None
    thingGroupName: Optional[ThingGroupName] = None


class ThingGroupDocumentList(RootModel[List[ThingGroupDocument]]):
    root: List[ThingGroupDocument]


class ThingGroupIndexingConfiguration(BaseModel):
    customFields: Optional[Fields] = None
    managedFields: Optional[Fields] = None
    thingGroupIndexingMode: ThingGroupIndexingMode


class ThingGroupList(RootModel[List[ThingGroupName]]):
    root: List[ThingGroupName]


class ThingGroupNameAndArnList(RootModel[List[GroupNameAndArn]]):
    root: List[GroupNameAndArn]


class ThingGroupProperties(BaseModel):
    attributePayload: Optional[AttributePayload] = None
    thingGroupDescription: Optional[ThingGroupDescription] = None


class ThingTypeDefinition(BaseModel):
    thingTypeArn: Optional[ThingTypeArn] = None
    thingTypeMetadata: Optional[ThingTypeMetadata] = None
    thingTypeName: Optional[ThingTypeName] = None
    thingTypeProperties: Optional[ThingTypeProperties] = None


class ThingTypeList(RootModel[List[ThingTypeDefinition]]):
    root: List[ThingTypeDefinition]


class TimestreamDimension(BaseModel):
    name: TimestreamDimensionName
    value: TimestreamDimensionValue


class TimestreamDimensionList(RootModel[List[TimestreamDimension]]):
    root: List[TimestreamDimension] = Field(..., max_length=128, min_length=1)


class TimestreamTimestamp(BaseModel):
    unit: TimestreamTimestampUnit
    value: TimestreamTimestampValue


class TopicRuleList(RootModel[List[TopicRuleListItem]]):
    root: List[TopicRuleListItem]


class UpdateAccountAuditConfigurationRequest(BaseModel):
    auditCheckConfigurations: Optional[AuditCheckConfigurations] = None
    auditNotificationTargetConfigurations: Optional[
        AuditNotificationTargetConfigurations
    ] = None
    roleArn: Optional[RoleArn] = None


class UpdateAuditSuppressionRequest(BaseModel):
    checkName: AuditCheckName
    description: Optional[AuditDescription] = None
    expirationDate: Optional[Timestamp] = None
    resourceIdentifier: ResourceIdentifier
    suppressIndefinitely: Optional[SuppressIndefinitely] = None


class UpdateBillingGroupResponse(BaseModel):
    version: Optional[Version] = None


class UpdateCACertificateRequest(BaseModel):
    registrationConfig: Optional[RegistrationConfig] = None
    removeAutoRegistration: Optional[RemoveAutoRegistration] = None


class UpdateDomainConfigurationRequest(BaseModel):
    authorizerConfig: Optional[AuthorizerConfig] = None
    domainConfigurationStatus: Optional[DomainConfigurationStatus] = None
    removeAuthorizerConfig: Optional[RemoveAuthorizerConfig] = None


class UpdateDynamicThingGroupRequest(BaseModel):
    expectedVersion: Optional[OptionalVersion] = None
    indexName: Optional[IndexName] = None
    queryString: Optional[QueryString] = None
    queryVersion: Optional[QueryVersion] = None
    thingGroupProperties: ThingGroupProperties


class UpdateDynamicThingGroupResponse(BaseModel):
    version: Optional[Version] = None


class UpdateEventConfigurationsRequest(BaseModel):
    eventConfigurations: Optional[EventConfigurations] = None


class UpdateFleetMetricRequest(BaseModel):
    aggregationField: Optional[AggregationField] = None
    aggregationType: Optional[AggregationType] = None
    description: Optional[FleetMetricDescription] = None
    expectedVersion: Optional[OptionalVersion] = None
    indexName: IndexName
    period: Optional[FleetMetricPeriod] = None
    queryString: Optional[QueryString] = None
    queryVersion: Optional[QueryVersion] = None
    unit: Optional[FleetMetricUnit] = None


class UpdateProvisioningTemplateRequest(BaseModel):
    defaultVersionId: Optional[TemplateVersionId] = None
    description: Optional[TemplateDescription] = None
    enabled: Optional[Enabled] = None
    preProvisioningHook: Optional[ProvisioningHook] = None
    provisioningRoleArn: Optional[RoleArn] = None
    removePreProvisioningHook: Optional[RemoveHook] = None


class UpdateStreamRequest(BaseModel):
    description: Optional[StreamDescription] = None
    files: Optional[StreamFiles] = None
    roleArn: Optional[RoleArn] = None


class UpdateThingGroupRequest(BaseModel):
    expectedVersion: Optional[OptionalVersion] = None
    thingGroupProperties: ThingGroupProperties


class UpdateThingGroupResponse(BaseModel):
    version: Optional[Version] = None


class UpdateThingGroupsForThingRequest(BaseModel):
    overrideDynamicGroups: Optional[OverrideDynamicGroups] = None
    thingGroupsToAdd: Optional[ThingGroupList] = None
    thingGroupsToRemove: Optional[ThingGroupList] = None
    thingName: Optional[ThingName] = None


class UpdateThingRequest(BaseModel):
    attributePayload: Optional[AttributePayload] = None
    expectedVersion: Optional[OptionalVersion] = None
    removeThingType: Optional[RemoveThingType] = None
    thingTypeName: Optional[ThingTypeName] = None


class UserProperty(BaseModel):
    key: UserPropertyKey
    value: UserPropertyValue


class ValidateSecurityProfileBehaviorsResponse(BaseModel):
    valid: Optional[Valid] = None
    validationErrors: Optional[ValidationErrors] = None


class VpcDestinationConfiguration(BaseModel):
    roleArn: AwsArn
    securityGroups: Optional[SecurityGroupList] = None
    subnetIds: SubnetIdList
    vpcId: VpcId


class VpcDestinationProperties(BaseModel):
    roleArn: Optional[AwsArn] = None
    securityGroups: Optional[SecurityGroupList] = None
    subnetIds: Optional[SubnetIdList] = None
    vpcId: Optional[VpcId] = None


class VpcDestinationSummary(BaseModel):
    roleArn: Optional[AwsArn] = None
    securityGroups: Optional[SecurityGroupList] = None
    subnetIds: Optional[SubnetIdList] = None
    vpcId: Optional[VpcId] = None


class AuditConfigurationPatchRequest(BaseModel):
    auditCheckConfigurations: Optional[Dict[str, AuditCheckConfiguration]] = Field(
        None,
        description="<p>Specifies which audit checks are enabled and disabled for this account. Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are currently enabled.</p> <p>Some data collection might start immediately when certain checks are enabled. When a check is disabled, any data collected so far in relation to the check is deleted.</p> <p>You cannot disable a check if it's used by any scheduled audit. You must first delete the check from the scheduled audit or delete the scheduled audit itself.</p> <p>On the first call to <code>UpdateAccountAuditConfiguration</code>, this parameter is required and must specify at least one enabled check.</p>",
    )
    auditNotificationTargetConfigurations: Optional[
        Dict[str, AuditNotificationTarget]
    ] = Field(
        None,
        description='Information about the targets to which audit notifications are sent.',
    )
    roleArn: Optional[constr(min_length=20, max_length=2048)] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the role that grants permission to IoT to access information about your devices, policies, certificates, and other items as required when performing an audit.',
    )


class AuditFindingsPostRequest(BaseModel):
    checkName: Optional[str] = Field(
        None,
        description='An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)',
    )
    endTime: Optional[datetime] = Field(
        None,
        description='A filter to limit results to those found before the specified time. You must specify either the startTime and endTime or the taskId, but not both.',
    )
    listSuppressedFindings: Optional[bool] = Field(
        None,
        description=" Boolean flag indicating whether only the suppressed findings or the unsuppressed findings should be listed. If this parameter isn't provided, the response will list both suppressed and unsuppressed findings. ",
    )
    maxResults: Optional[conint(ge=1, le=250)] = Field(
        None,
        description='The maximum number of results to return at one time. The default is 25.',
    )
    nextToken: Optional[str] = Field(
        None, description='The token for the next set of results.'
    )
    resourceIdentifier: Optional[ResourceIdentifier] = Field(
        None, description='Information that identifies the noncompliant resource.'
    )
    startTime: Optional[datetime] = Field(
        None,
        description='A filter to limit results to those found after the specified time. You must specify either the startTime and endTime or the taskId, but not both.',
    )
    taskId: Optional[constr(pattern=r'[a-zA-Z0-9\-]+', min_length=1, max_length=40)] = (
        Field(
            None,
            description='A filter to limit results to the audit with the specified ID. You must specify either the taskId or the startTime and endTime, but not both.',
        )
    )


class Target1(BaseModel):
    auditCheckToReasonCodeFilter: Optional[AuditCheckToReasonCodeFilter] = None
    auditTaskId: Optional[AuditTaskId] = None
    findingIds: Optional[FindingIds] = None


class AuditMitigationactionsTasksTaskIdPostRequest(BaseModel):
    auditCheckToActionsMapping: Dict[str, MitigationActionNameList] = Field(
        ...,
        description='For an audit check, specifies which mitigation actions to apply. Those actions must be defined in your Amazon Web Services accounts.',
    )
    clientRequestToken: constr(
        pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64
    ) = Field(
        ...,
        description='Each audit mitigation task must have a unique client request token. If you try to start a new task with the same token as a task that already exists, an exception occurs. If you omit this value, a unique client request token is generated automatically.',
    )
    target: Target1 = Field(
        ...,
        description='Used in MitigationActionParams, this information identifies the target findings to which the mitigation actions are applied. Only one entry appears.',
    )


class AuditScheduledauditsScheduledAuditNamePostRequest(BaseModel):
    dayOfMonth: Optional[constr(pattern=r'^([1-9]|[12][0-9]|3[01])$|^LAST$')] = Field(
        None,
        description='The day of the month on which the scheduled audit takes place. This can be "1" through "31" or "LAST". This field is required if the "frequency" parameter is set to <code>MONTHLY</code>. If days 29 to 31 are specified, and the month doesn\'t have that many days, the audit takes place on the <code>LAST</code> day of the month.',
    )
    dayOfWeek: Optional[DayOfWeek] = Field(
        None,
        description='The day of the week on which the scheduled audit takes place, either <code>SUN</code>, <code>MON</code>, <code>TUE</code>, <code>WED</code>, <code>THU</code>, <code>FRI</code>, or <code>SAT</code>. This field is required if the <code>frequency</code> parameter is set to <code>WEEKLY</code> or <code>BIWEEKLY</code>.',
    )
    frequency: Frequency = Field(
        ...,
        description='How often the scheduled audit takes place, either <code>DAILY</code>, <code>WEEKLY</code>, <code>BIWEEKLY</code> or <code>MONTHLY</code>. The start time of each audit is determined by the system.',
    )
    tags: Optional[List[Tag]] = Field(
        None, description='Metadata that can be used to manage the scheduled audit.'
    )
    targetCheckNames: List[AuditCheckName] = Field(
        ...,
        description='Which checks are performed during the scheduled audit. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)',
    )


class AuditSuppressionsCreatePostRequest(BaseModel):
    checkName: str = Field(
        ...,
        description='An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)',
    )
    clientRequestToken: constr(
        pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64
    ) = Field(
        ...,
        description=' Each audit supression must have a unique client request token. If you try to create a new audit suppression with the same token as one that already exists, an exception occurs. If you omit this value, Amazon Web Services SDKs will automatically generate a unique client request.',
    )
    description: Optional[constr(pattern=r'[\p{Graph}\x20]*', max_length=1000)] = Field(
        None, description=' The description of the audit suppression. '
    )
    expirationDate: Optional[datetime] = Field(
        None,
        description=' The epoch timestamp in seconds at which this suppression expires. ',
    )
    resourceIdentifier: ResourceIdentifier = Field(
        ..., description='Information that identifies the noncompliant resource.'
    )
    suppressIndefinitely: Optional[bool] = Field(
        None,
        description=' Indicates whether a suppression should exist indefinitely or not. ',
    )


class AuditSuppressionsDeletePostRequest(BaseModel):
    checkName: str = Field(
        ...,
        description='An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)',
    )
    resourceIdentifier: ResourceIdentifier = Field(
        ..., description='Information that identifies the noncompliant resource.'
    )


class AuditSuppressionsDescribePostRequest(BaseModel):
    checkName: str = Field(
        ...,
        description='An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)',
    )
    resourceIdentifier: ResourceIdentifier = Field(
        ..., description='Information that identifies the noncompliant resource.'
    )


class AuditSuppressionsListPostRequest(BaseModel):
    ascendingOrder: Optional[bool] = Field(
        None,
        description=" Determines whether suppressions are listed in ascending order by expiration date or not. If parameter isn't provided, <code>ascendingOrder=true</code>. ",
    )
    checkName: Optional[str] = Field(
        None,
        description='An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)',
    )
    maxResults: Optional[conint(ge=1, le=250)] = Field(
        None,
        description=' The maximum number of results to return at one time. The default is 25. ',
    )
    nextToken: Optional[str] = Field(
        None, description=' The token for the next set of results. '
    )
    resourceIdentifier: Optional[ResourceIdentifier] = Field(
        None, description='Information that identifies the noncompliant resource.'
    )


class AuditSuppressionsUpdatePatchRequest(BaseModel):
    checkName: str = Field(
        ...,
        description='An audit check name. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)',
    )
    description: Optional[constr(pattern=r'[\p{Graph}\x20]*', max_length=1000)] = Field(
        None, description=' The description of the audit suppression. '
    )
    expirationDate: Optional[datetime] = Field(
        None,
        description=' The expiration date (epoch timestamp in seconds) that you want the suppression to adhere to. ',
    )
    resourceIdentifier: ResourceIdentifier = Field(
        ..., description='Information that identifies the noncompliant resource.'
    )
    suppressIndefinitely: Optional[bool] = Field(
        None,
        description=' Indicates whether a suppression should exist indefinitely or not. ',
    )


class AuthorizerAuthorizerNamePostRequest(BaseModel):
    authorizerFunctionArn: constr(pattern=r'[\s\S]*', max_length=2048) = Field(
        ..., description="The ARN of the authorizer's Lambda function."
    )
    enableCachingForHttp: Optional[bool] = Field(
        None,
        description='<p>When <code>true</code>, the result from the authorizer’s Lambda function is cached for clients that use persistent HTTP connections. The results are cached for the time specified by the Lambda function in <code>refreshAfterInSeconds</code>. This value does not affect authorization of clients that use MQTT connections.</p> <p>The default value is <code>false</code>.</p>',
    )
    signingDisabled: Optional[bool] = Field(
        None,
        description='Specifies whether IoT validates the token signature in an authorization request.',
    )
    status: Optional[Status1] = Field(
        None, description='The status of the create authorizer request.'
    )
    tags: Optional[List[Tag]] = Field(
        None,
        description='<p>Metadata which can be used to manage the custom authorizer.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>',
    )
    tokenKeyName: Optional[
        constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=128)
    ] = Field(
        None,
        description='The name of the token key used to extract the token from the HTTP headers.',
    )
    tokenSigningPublicKeys: Optional[Dict[str, KeyValue]] = Field(
        None,
        description='The public keys used to verify the digital signature returned by your custom authentication service.',
    )


class BillingGroupsBillingGroupNamePostRequest(BaseModel):
    billingGroupProperties: Optional[BillingGroupProperties] = Field(
        None, description='The properties of a billing group.'
    )
    tags: Optional[List[Tag]] = Field(
        None, description='Metadata which can be used to manage the billing group.'
    )


class CacertificatePostRequest(BaseModel):
    caCertificate: constr(pattern=r'[\s\S]*', min_length=1, max_length=65536) = Field(
        ..., description='The PEM of a certificate.'
    )
    certificateMode: Optional[CertificateMode] = Field(
        None,
        description='Describes the certificate mode in which the Certificate Authority (CA) will be registered. If the <code>verificationCertificate</code> field is not provided, set <code>certificateMode</code> to be <code>SNI_ONLY</code>. If the <code>verificationCertificate</code> field is provided, set <code>certificateMode</code> to be <code>DEFAULT</code>. When <code>certificateMode</code> is not provided, it defaults to <code>DEFAULT</code>. All the device certificates that are registered using this CA will be registered in the same certificate mode as the CA. For more information about certificate mode for device certificates, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_CertificateDescription.html#iot-Type-CertificateDescription-certificateMode"> certificate mode</a>. ',
    )
    registrationConfig: Optional[RegistrationConfig] = Field(
        None, description='The registration configuration.'
    )
    tags: Optional[List[Tag]] = Field(
        None,
        description='<p>Metadata which can be used to manage the CA certificate.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>',
    )
    verificationCertificate: Optional[
        constr(pattern=r'[\s\S]*', min_length=1, max_length=65536)
    ] = Field(None, description='The PEM of a certificate.')


class CustomMetricMetricNamePostRequest(BaseModel):
    clientRequestToken: constr(
        pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64
    ) = Field(
        ...,
        description='Each custom metric must have a unique client request token. If you try to create a new custom metric that already exists with a different token, an exception occurs. If you omit this value, Amazon Web Services SDKs will automatically generate a unique client request. ',
    )
    displayName: Optional[constr(pattern=r'[\p{Graph}\x20]*', max_length=128)] = Field(
        None,
        description=" The friendly name in the console for the custom metric. This name doesn't have to be unique. Don't use this name as the metric identifier in the device metric report. You can update the friendly name after you define it.",
    )
    metricType: MetricType = Field(
        ...,
        description='<p> The type of the custom metric. </p> <important> <p>The type <code>number</code> only takes a single metric value as an input, but when you submit the metrics value in the DeviceMetrics report, you must pass it as an array with a single value.</p> </important>',
    )
    tags: Optional[List[Tag]] = Field(
        None, description=' Metadata that can be used to manage the custom metric. '
    )


class DestinationConfiguration(BaseModel):
    httpUrlConfiguration: Optional[HttpUrlDestinationConfiguration] = None
    vpcConfiguration: Optional[VpcDestinationConfiguration] = None


class DestinationsPostRequest(BaseModel):
    destinationConfiguration: DestinationConfiguration = Field(
        ..., description='Configuration of the topic rule destination.'
    )


class Target2(BaseModel):
    behaviorName: Optional[BehaviorName] = None
    securityProfileName: Optional[SecurityProfileName] = None
    violationIds: Optional[TargetViolationIdsForDetectMitigationActions] = None


class DetectMitigationactionsTasksTaskIdPutRequest(BaseModel):
    actions: List[MitigationActionName] = Field(
        ...,
        description=' The actions to be performed when a device has unexpected behavior. ',
        max_length=5,
        min_length=1,
    )
    clientRequestToken: constr(
        pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64
    ) = Field(
        ...,
        description=' Each mitigation action task must have a unique client request token. If you try to create a new task with the same token as a task that already exists, an exception occurs. If you omit this value, Amazon Web Services SDKs will automatically generate a unique client request. ',
    )
    includeOnlyActiveViolations: Optional[bool] = Field(
        None, description=' Specifies to list only active violations. '
    )
    includeSuppressedAlerts: Optional[bool] = Field(
        None, description=' Specifies to include suppressed alerts. '
    )
    target: Target2 = Field(
        ..., description=' The target of a mitigation action task. '
    )
    violationEventOccurrenceRange: Optional[ViolationEventOccurrenceRange1] = Field(
        None,
        description=' Specifies the time period of which violation events occurred between. ',
    )


class DimensionsNamePostRequest(BaseModel):
    clientRequestToken: constr(
        pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=64
    ) = Field(
        ...,
        description='Each dimension must have a unique client request token. If you try to create a new dimension with the same token as a dimension that already exists, an exception occurs. If you omit this value, Amazon Web Services SDKs will automatically generate a unique client request.',
    )
    stringValues: List[DimensionStringValue] = Field(
        ...,
        description='Specifies the value or list of values for the dimension. For <code>TOPIC_FILTER</code> dimensions, this is a pattern used to match the MQTT topic (for example, "admin/#").',
        max_length=100,
        min_length=1,
    )
    tags: Optional[List[Tag]] = Field(
        None, description='Metadata that can be used to manage the dimension.'
    )
    type: Type = Field(
        ...,
        description='Specifies the type of dimension. Supported types: <code>TOPIC_FILTER.</code> ',
    )


class DomainConfigurationsDomainConfigurationNamePostRequest(BaseModel):
    authorizerConfig: Optional[AuthorizerConfig] = Field(
        None,
        description='An object that specifies the authorization service for a domain.',
    )
    domainName: Optional[constr(pattern=r'[\s\S]*', min_length=1, max_length=253)] = (
        Field(None, description='The name of the domain.')
    )
    serverCertificateArns: Optional[List[AcmCertificateArn]] = Field(
        None,
        description='The ARNs of the certificates that IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for Amazon Web Services-managed domains.',
        max_length=1,
        min_length=0,
    )
    serviceType: Optional[ServiceType] = Field(
        None,
        description='<p>The type of service delivered by the endpoint.</p> <note> <p>Amazon Web Services IoT Core currently supports only the <code>DATA</code> service type.</p> </note>',
    )
    tags: Optional[List[Tag]] = Field(
        None,
        description='<p>Metadata which can be used to manage the domain configuration.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>',
    )
    validationCertificateArn: Optional[
        constr(
            pattern=r'arn:aws(-cn|-us-gov|-iso-b|-iso)?:acm:[a-z]{2}-(gov-|iso-|isob-)?[a-z]{4,9}-\d{1}:\d{12}:certificate/[a-zA-Z0-9/-]+',
            min_length=1,
            max_length=2048,
        )
    ] = Field(
        None,
        description='The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for Amazon Web Services-managed domains.',
    )


class DynamicThingGroupsThingGroupNamePatchRequest(BaseModel):
    expectedVersion: Optional[int] = Field(
        None, description='The expected version of the dynamic thing group to update.'
    )
    indexName: Optional[
        constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)
    ] = Field(
        None,
        description='<p>The dynamic thing group index to update.</p> <note> <p>Currently one index is supported: <code>AWS_Things</code>.</p> </note>',
    )
    queryString: Optional[constr(min_length=1)] = Field(
        None, description='The dynamic thing group search query string to update.'
    )
    queryVersion: Optional[str] = Field(
        None,
        description='<p>The dynamic thing group query version to update.</p> <note> <p>Currently one query version is supported: "2017-09-30". If not specified, the query version defaults to this value.</p> </note>',
    )
    thingGroupProperties: ThingGroupProperties = Field(
        ..., description='Thing group properties.'
    )


class DynamicThingGroupsThingGroupNamePostRequest(BaseModel):
    indexName: Optional[
        constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)
    ] = Field(
        None,
        description='<p>The dynamic thing group index name.</p> <note> <p>Currently one index is supported: <code>AWS_Things</code>.</p> </note>',
    )
    queryString: constr(min_length=1) = Field(
        ...,
        description='<p>The dynamic thing group search query string.</p> <p>See <a href="https://docs.aws.amazon.com/iot/latest/developerguide/query-syntax.html">Query Syntax</a> for information about query string syntax.</p>',
    )
    queryVersion: Optional[str] = Field(
        None,
        description='<p>The dynamic thing group query version.</p> <note> <p>Currently one query version is supported: "2017-09-30". If not specified, the query version defaults to this value.</p> </note>',
    )
    tags: Optional[List[Tag]] = Field(
        None,
        description='Metadata which can be used to manage the dynamic thing group.',
    )
    thingGroupProperties: Optional[ThingGroupProperties] = Field(
        None, description='Thing group properties.'
    )


class EventConfigurationsPatchRequest(BaseModel):
    eventConfigurations: Optional[Dict[str, Configuration]] = Field(
        None, description='The new event configuration values.'
    )


class FleetMetricMetricNamePutRequest(BaseModel):
    aggregationField: constr(min_length=1) = Field(
        ..., description='The field to aggregate.'
    )
    aggregationType: AggregationType1 = Field(
        ..., description='The type of aggregation queries.'
    )
    description: Optional[constr(pattern=r'[\p{Graph}\x20]*', max_length=1024)] = Field(
        None, description='The fleet metric description.'
    )
    indexName: Optional[
        constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)
    ] = Field(None, description='The name of the index to search.')
    period: conint(ge=60, le=86400) = Field(
        ...,
        description='The time in seconds between fleet metric emissions. Range [60(1 min), 86400(1 day)] and must be multiple of 60.',
    )
    queryString: constr(min_length=1) = Field(
        ..., description='The search query string.'
    )
    queryVersion: Optional[str] = Field(None, description='The query version.')
    tags: Optional[List[Tag]] = Field(
        None, description='Metadata, which can be used to manage the fleet metric.'
    )
    unit: Optional[Unit] = Field(
        None,
        description='Used to support unit transformation such as milliseconds to seconds. The unit must be supported by <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDatum.html">CW metric</a>. Default to null.',
    )


class ThingGroupIndexingConfiguration1(BaseModel):
    customFields: Optional[Fields] = None
    managedFields: Optional[Fields] = None
    thingGroupIndexingMode: Optional[ThingGroupIndexingMode] = None


class AbortConfig1(BaseModel):
    criteriaList: Optional[AbortCriteriaList] = None


class JobExecutionsRetryConfig1(BaseModel):
    criteriaList: Optional[RetryCriteriaList] = None


class JobTemplatesJobTemplateIdPutRequest(BaseModel):
    abortConfig: Optional[AbortConfig1] = Field(
        None,
        description='The criteria that determine when and how a job abort takes place.',
    )
    description: constr(pattern=r'[^\p{C}]+', max_length=2028) = Field(
        ..., description='A description of the job document.'
    )
    document: Optional[constr(max_length=32768)] = Field(
        None,
        description="The job document. Required if you don't specify a value for <code>documentSource</code>.",
    )
    documentSource: Optional[constr(min_length=1, max_length=1350)] = Field(
        None,
        description="<p>An S3 link to the job document to use in the template. Required if you don't specify a value for <code>document</code>.</p> <note> <p>If the job document resides in an S3 bucket, you must use a placeholder link when specifying the document.</p> <p>The placeholder link is of the following form:</p> <p> <code>${aws:iot:s3-presigned-url:https://s3.amazonaws.com/<i>bucket</i>/<i>key</i>}</code> </p> <p>where <i>bucket</i> is your bucket name and <i>key</i> is the object in the bucket to which you are linking.</p> </note>",
    )
    jobArn: Optional[str] = Field(
        None, description='The ARN of the job to use as the basis for the job template.'
    )
    jobExecutionsRetryConfig: Optional[JobExecutionsRetryConfig1] = Field(
        None,
        description='The configuration that determines how many retries are allowed for each failure type for a job.',
    )
    jobExecutionsRolloutConfig: Optional[JobExecutionsRolloutConfig] = Field(
        None, description='Allows you to create a staged rollout of a job.'
    )
    maintenanceWindows: Optional[List[MaintenanceWindow]] = Field(
        None,
        description='Allows you to configure an optional maintenance window for the rollout of a job document to all devices in the target group for a job.',
    )
    presignedUrlConfig: Optional[PresignedUrlConfig] = Field(
        None, description='Configuration for pre-signed S3 URLs.'
    )
    tags: Optional[List[Tag]] = Field(
        None, description='Metadata that can be used to manage the job template.'
    )
    timeoutConfig: Optional[TimeoutConfig] = Field(
        None,
        description='Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.',
    )


class JobsJobIdPatchRequest(BaseModel):
    abortConfig: Optional[AbortConfig1] = Field(
        None,
        description='The criteria that determine when and how a job abort takes place.',
    )
    description: Optional[constr(pattern=r'[^\p{C}]+', max_length=2028)] = Field(
        None, description='A short text description of the job.'
    )
    jobExecutionsRetryConfig: Optional[JobExecutionsRetryConfig1] = Field(
        None,
        description='The configuration that determines how many retries are allowed for each failure type for a job.',
    )
    jobExecutionsRolloutConfig: Optional[JobExecutionsRolloutConfig] = Field(
        None, description='Allows you to create a staged rollout of a job.'
    )
    presignedUrlConfig: Optional[PresignedUrlConfig] = Field(
        None, description='Configuration for pre-signed S3 URLs.'
    )
    timeoutConfig: Optional[TimeoutConfig] = Field(
        None,
        description='Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.',
    )


class JobsJobIdPutRequest(BaseModel):
    abortConfig: Optional[AbortConfig1] = Field(
        None,
        description='The criteria that determine when and how a job abort takes place.',
    )
    description: Optional[constr(pattern=r'[^\p{C}]+', max_length=2028)] = Field(
        None, description='A short text description of the job.'
    )
    document: Optional[constr(max_length=32768)] = Field(
        None,
        description="The job document. Required if you don't specify a value for <code>documentSource</code>.",
    )
    documentParameters: Optional[Dict[str, ParameterValue]] = Field(
        None,
        description="<p>Parameters of an Amazon Web Services managed template that you can specify to create the job document.</p> <note> <p> <code>documentParameters</code> can only be used when creating jobs from Amazon Web Services managed templates. This parameter can't be used with custom job templates or to create jobs from them.</p> </note>",
    )
    documentSource: Optional[constr(min_length=1, max_length=1350)] = Field(
        None,
        description="<p>An S3 link to the job document. Required if you don't specify a value for <code>document</code>.</p> <note> <p>If the job document resides in an S3 bucket, you must use a placeholder link when specifying the document.</p> <p>The placeholder link is of the following form:</p> <p> <code>${aws:iot:s3-presigned-url:https://s3.amazonaws.com/<i>bucket</i>/<i>key</i>}</code> </p> <p>where <i>bucket</i> is your bucket name and <i>key</i> is the object in the bucket to which you are linking.</p> </note>",
    )
    jobExecutionsRetryConfig: Optional[JobExecutionsRetryConfig1] = Field(
        None,
        description='The configuration that determines how many retries are allowed for each failure type for a job.',
    )
    jobExecutionsRolloutConfig: Optional[JobExecutionsRolloutConfig] = Field(
        None, description='Allows you to create a staged rollout of a job.'
    )
    jobTemplateArn: Optional[
        constr(pattern=r'^arn:[!-~]+$', min_length=1, max_length=1600)
    ] = Field(None, description='The ARN of the job template used to create the job.')
    namespaceId: Optional[constr(pattern=r'[a-zA-Z0-9_-]+')] = Field(
        None,
        description='<p>The namespace used to indicate that a job is a customer-managed job.</p> <p>When you specify a value for this parameter, Amazon Web Services IoT Core sends jobs notifications to MQTT topics that contain the value in the following format.</p> <p> <code>$aws/things/<i>THING_NAME</i>/jobs/<i>JOB_ID</i>/notify-namespace-<i>NAMESPACE_ID</i>/</code> </p> <note> <p>The <code>namespaceId</code> feature is in public preview.</p> </note>',
    )
    presignedUrlConfig: Optional[PresignedUrlConfig] = Field(
        None, description='Configuration for pre-signed S3 URLs.'
    )
    schedulingConfig: Optional[SchedulingConfig] = Field(
        None,
        description='Specifies the date and time that a job will begin the rollout of the job document to all devices in the target group. Additionally, you can specify the end behavior for each job execution when it reaches the scheduled end time.',
    )
    tags: Optional[List[Tag]] = Field(
        None, description='Metadata which can be used to manage the job.'
    )
    targetSelection: Optional[TargetSelection] = Field(
        None,
        description='<p>Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a thing when the thing is added to a target group, even after the job was completed by all things originally in the group.</p> <note> <p>We recommend that you use continuous jobs instead of snapshot jobs for dynamic thing group targets. By using continuous jobs, devices that join the group receive the job execution even after the job has been created.</p> </note>',
    )
    targets: List[TargetArn] = Field(
        ...,
        description='A list of things and thing groups to which the job should be sent.',
        min_length=1,
    )
    timeoutConfig: Optional[TimeoutConfig] = Field(
        None,
        description='Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.',
    )


class ActionParams(BaseModel):
    addThingsToThingGroupParams: Optional[AddThingsToThingGroupParams] = None
    enableIoTLoggingParams: Optional[EnableIoTLoggingParams] = None
    publishFindingToSnsParams: Optional[PublishFindingToSnsParams] = None
    replaceDefaultPolicyVersionParams: Optional[ReplaceDefaultPolicyVersionParams] = (
        None
    )
    updateCACertificateParams: Optional[UpdateCACertificateParams] = None
    updateDeviceCertificateParams: Optional[UpdateDeviceCertificateParams] = None


class MitigationactionsActionsActionNamePatchRequest(BaseModel):
    actionParams: Optional[ActionParams] = Field(
        None,
        description='The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).',
    )
    roleArn: Optional[constr(min_length=20, max_length=2048)] = Field(
        None,
        description='The ARN of the IAM role that is used to apply the mitigation action.',
    )


class MitigationactionsActionsActionNamePostRequest(BaseModel):
    actionParams: ActionParams = Field(
        ...,
        description='The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).',
    )
    roleArn: constr(min_length=20, max_length=2048) = Field(
        ...,
        description='The ARN of the IAM role that is used to apply the mitigation action.',
    )
    tags: Optional[List[Tag]] = Field(
        None, description='Metadata that can be used to manage the mitigation action.'
    )


class AwsJobAbortConfig1(BaseModel):
    abortCriteriaList: Optional[AwsJobAbortCriteriaList] = None


class PoliciesPolicyNamePostRequest(BaseModel):
    policyDocument: constr(pattern=r'[\s\S]*', min_length=0, max_length=404600) = Field(
        ...,
        description='The JSON document that describes the policy. <b>policyDocument</b> must have a minimum length of 1, with a maximum length of 2048, excluding whitespace.',
    )
    tags: Optional[List[Tag]] = Field(
        None,
        description='<p>Metadata which can be used to manage the policy.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>',
    )


class ProvisioningTemplatesPostRequest(BaseModel):
    description: Optional[
        constr(pattern=r'[^\p{C}]*', min_length=0, max_length=500)
    ] = Field(None, description='The description of the provisioning template.')
    enabled: Optional[bool] = Field(
        None, description='True to enable the provisioning template, otherwise false.'
    )
    preProvisioningHook: Optional[PreProvisioningHook] = Field(
        None,
        description='Structure that contains <code>payloadVersion</code> and <code>targetArn</code>.',
    )
    provisioningRoleArn: constr(min_length=20, max_length=2048) = Field(
        ...,
        description='The role ARN for the role associated with the provisioning template. This IoT role grants permission to provision a device.',
    )
    tags: Optional[List[Tag]] = Field(
        None,
        description='<p>Metadata which can be used to manage the provisioning template.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>',
    )
    templateBody: constr(pattern=r'[\s\S]*', min_length=0, max_length=10240) = Field(
        ..., description='The JSON formatted contents of the provisioning template.'
    )
    templateName: constr(pattern=r'^[0-9A-Za-z_-]+$', min_length=1, max_length=36) = (
        Field(..., description='The name of the provisioning template.')
    )
    type: Optional[Type1] = Field(
        None,
        description='The type you define in a provisioning template. You can create a template with only one type. You can\'t change the template type after its creation. The default value is <code>FLEET_PROVISIONING</code>. For more information about provisioning template, see: <a href="https://docs.aws.amazon.com/iot/latest/developerguide/provision-template.html">Provisioning template</a>. ',
    )


class RoleAliasesRoleAliasPostRequest(BaseModel):
    credentialDurationSeconds: Optional[conint(ge=900, le=43200)] = Field(
        None,
        description='<p>How long (in seconds) the credentials will be valid. The default value is 3,600 seconds.</p> <p>This value must be less than or equal to the maximum session duration of the IAM role that the role alias references.</p>',
    )
    roleArn: constr(min_length=20, max_length=2048) = Field(
        ..., description='The role ARN.'
    )
    tags: Optional[List[Tag]] = Field(
        None,
        description='<p>Metadata which can be used to manage the role alias.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags "key1=value1&amp;key2=value2..."</p> <p>For the cli-input-json file use format: "tags": "key1=value1&amp;key2=value2..."</p> </note>',
    )


class StreamsStreamIdPostRequest(BaseModel):
    description: Optional[constr(pattern=r'[^\p{C}]+', max_length=2028)] = Field(
        None, description='A description of the stream.'
    )
    files: List[StreamFile] = Field(
        ..., description='The files to stream.', max_length=50, min_length=1
    )
    roleArn: constr(min_length=20, max_length=2048) = Field(
        ...,
        description='An IAM role that allows the IoT service principal to access your S3 files.',
    )
    tags: Optional[List[Tag]] = Field(
        None, description='Metadata which can be used to manage streams.'
    )


class StreamsStreamIdPutRequest(BaseModel):
    description: Optional[constr(pattern=r'[^\p{C}]+', max_length=2028)] = Field(
        None, description='The description of the stream.'
    )
    files: Optional[List[StreamFile]] = Field(
        None,
        description='The files associated with the stream.',
        max_length=50,
        min_length=1,
    )
    roleArn: Optional[constr(min_length=20, max_length=2048)] = Field(
        None,
        description='An IAM role that allows the IoT service principal assumes to access your S3 files.',
    )


class TagsPostRequest(BaseModel):
    resourceArn: str = Field(..., description='The ARN of the resource.')
    tags: List[Tag] = Field(
        ..., description='The new or modified tags for the resource.'
    )


class TestAuthorizationPostRequest(BaseModel):
    authInfos: List[AuthInfo] = Field(
        ...,
        description='A list of authorization info objects. Simulating authorization will create a response for each <code>authInfo</code> object in the list.',
        max_length=10,
        min_length=1,
    )
    cognitoIdentityPoolId: Optional[str] = Field(
        None, description='The Cognito identity pool ID.'
    )
    policyNamesToAdd: Optional[List[PolicyName]] = Field(
        None,
        description='When testing custom authorization, the policies specified here are treated as if they are attached to the principal being authorized.',
    )
    policyNamesToSkip: Optional[List[PolicyName]] = Field(
        None,
        description='When testing custom authorization, the policies specified here are treated as if they are not attached to the principal being authorized.',
    )
    principal: Optional[str] = Field(
        None,
        description='The principal. Valid principals are CertificateArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:cert/<i>certificateId</i>), thingGroupArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:thinggroup/<i>groupName</i>) and CognitoId (<i>region</i>:<i>id</i>).',
    )


class ThingGroupsThingGroupNamePatchRequest(BaseModel):
    expectedVersion: Optional[int] = Field(
        None,
        description='The expected version of the thing group. If this does not match the version of the thing group being updated, the update will fail.',
    )
    thingGroupProperties: ThingGroupProperties = Field(
        ..., description='Thing group properties.'
    )


class ThingGroupsThingGroupNamePostRequest(BaseModel):
    parentGroupName: Optional[
        constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)
    ] = Field(None, description='The name of the parent thing group.')
    tags: Optional[List[Tag]] = Field(
        None, description='Metadata which can be used to manage the thing group.'
    )
    thingGroupProperties: Optional[ThingGroupProperties] = Field(
        None, description='Thing group properties.'
    )


class ThingTypesThingTypeNamePostRequest(BaseModel):
    tags: Optional[List[Tag]] = Field(
        None, description='Metadata which can be used to manage the thing type.'
    )
    thingTypeProperties: Optional[ThingTypeProperties] = Field(
        None,
        description='The ThingTypeProperties contains information about the thing type including: a thing type description, and a list of searchable thing attribute names.',
    )


class AbortConfig(BaseModel):
    criteriaList: AbortCriteriaList


class AssociateTargetsWithJobRequest(BaseModel):
    comment: Optional[Comment] = None
    targets: JobTargets


class AuditMitigationActionsTaskStatistics(
    RootModel[Optional[Dict[str, TaskStatisticsForAuditCheck]]]
):
    root: Optional[Dict[str, TaskStatisticsForAuditCheck]] = None


class AuditSuppression(BaseModel):
    checkName: AuditCheckName
    description: Optional[AuditDescription] = None
    expirationDate: Optional[Timestamp] = None
    resourceIdentifier: ResourceIdentifier
    suppressIndefinitely: Optional[SuppressIndefinitely] = None


class AuditSuppressionList(RootModel[List[AuditSuppression]]):
    root: List[AuditSuppression]


class AwsJobAbortConfig(BaseModel):
    abortCriteriaList: AwsJobAbortCriteriaList


class AwsJobExponentialRolloutRate(BaseModel):
    baseRatePerMinute: AwsJobRolloutRatePerMinute
    incrementFactor: AwsJobRolloutIncrementFactor
    rateIncreaseCriteria: AwsJobRateIncreaseCriteria


class BehaviorModelTrainingSummaries(RootModel[List[BehaviorModelTrainingSummary]]):
    root: List[BehaviorModelTrainingSummary]


class BillingGroupNameAndArnList(RootModel[List[GroupNameAndArn]]):
    root: List[GroupNameAndArn]


class CACertificateDescription(BaseModel):
    autoRegistrationStatus: Optional[AutoRegistrationStatus] = None
    certificateArn: Optional[CertificateArn] = None
    certificateId: Optional[CertificateId] = None
    certificateMode: Optional[CertificateMode] = None
    certificatePem: Optional[CertificatePem] = None
    creationDate: Optional[DateType] = None
    customerVersion: Optional[CustomerVersion] = None
    generationId: Optional[GenerationId] = None
    lastModifiedDate: Optional[DateType] = None
    ownedBy: Optional[AwsAccountId] = None
    status: Optional[CACertificateStatus] = None
    validity: Optional[CertificateValidity] = None


class CancelJobExecutionRequest(BaseModel):
    expectedVersion: Optional[ExpectedVersion] = None
    statusDetails: Optional[DetailsMap] = None


class CertificateDescription(BaseModel):
    caCertificateId: Optional[CertificateId] = None
    certificateArn: Optional[CertificateArn] = None
    certificateId: Optional[CertificateId] = None
    certificateMode: Optional[CertificateMode] = None
    certificatePem: Optional[CertificatePem] = None
    creationDate: Optional[DateType] = None
    customerVersion: Optional[CustomerVersion] = None
    generationId: Optional[GenerationId] = None
    lastModifiedDate: Optional[DateType] = None
    ownedBy: Optional[AwsAccountId] = None
    previousOwnedBy: Optional[AwsAccountId] = None
    status: Optional[CertificateStatus] = None
    transferData: Optional[TransferData] = None
    validity: Optional[CertificateValidity] = None


class CodeSigning(BaseModel):
    awsSignerJobId: Optional[SigningJobId] = None
    customCodeSigning: Optional[CustomCodeSigning] = None
    startSigningJobParameter: Optional[StartSigningJobParameter] = None


class CreateAuditSuppressionRequest(BaseModel):
    checkName: AuditCheckName
    clientRequestToken: ClientRequestToken
    description: Optional[AuditDescription] = None
    expirationDate: Optional[Timestamp] = None
    resourceIdentifier: ResourceIdentifier
    suppressIndefinitely: Optional[SuppressIndefinitely] = None


class CreateAuthorizerRequest(BaseModel):
    authorizerFunctionArn: AuthorizerFunctionArn
    enableCachingForHttp: Optional[EnableCachingForHttp] = None
    signingDisabled: Optional[BooleanKey] = None
    status: Optional[AuthorizerStatus] = None
    tags: Optional[TagList] = None
    tokenKeyName: Optional[TokenKeyName] = None
    tokenSigningPublicKeys: Optional[PublicKeyMap] = None


class CreateBillingGroupRequest(BaseModel):
    billingGroupProperties: Optional[BillingGroupProperties] = None
    tags: Optional[TagList] = None


class CreateCustomMetricRequest(BaseModel):
    clientRequestToken: ClientRequestToken
    displayName: Optional[CustomMetricDisplayName] = None
    metricType: CustomMetricType
    tags: Optional[TagList] = None


class CreateDimensionRequest(BaseModel):
    clientRequestToken: ClientRequestToken
    stringValues: DimensionStringValues
    tags: Optional[TagList] = None
    type: DimensionType


class CreateDomainConfigurationRequest(BaseModel):
    authorizerConfig: Optional[AuthorizerConfig] = None
    domainName: Optional[DomainName] = None
    serverCertificateArns: Optional[ServerCertificateArns] = None
    serviceType: Optional[ServiceType] = None
    tags: Optional[TagList] = None
    validationCertificateArn: Optional[AcmCertificateArn] = None


class CreateDynamicThingGroupRequest(BaseModel):
    indexName: Optional[IndexName] = None
    queryString: QueryString
    queryVersion: Optional[QueryVersion] = None
    tags: Optional[TagList] = None
    thingGroupProperties: Optional[ThingGroupProperties] = None


class CreateFleetMetricRequest(BaseModel):
    aggregationField: AggregationField
    aggregationType: AggregationType
    description: Optional[FleetMetricDescription] = None
    indexName: Optional[IndexName] = None
    period: FleetMetricPeriod
    queryString: QueryString
    queryVersion: Optional[QueryVersion] = None
    tags: Optional[TagList] = None
    unit: Optional[FleetMetricUnit] = None


class CreateKeysAndCertificateResponse(BaseModel):
    certificateArn: Optional[CertificateArn] = None
    certificateId: Optional[CertificateId] = None
    certificatePem: Optional[CertificatePem] = None
    keyPair: Optional[KeyPair] = None


class CreatePolicyRequest(BaseModel):
    policyDocument: PolicyDocument
    tags: Optional[TagList] = None


class CreateProvisioningClaimResponse(BaseModel):
    certificateId: Optional[CertificateId] = None
    certificatePem: Optional[CertificatePem] = None
    expiration: Optional[DateType] = None
    keyPair: Optional[KeyPair] = None


class CreateProvisioningTemplateRequest(BaseModel):
    description: Optional[TemplateDescription] = None
    enabled: Optional[Enabled] = None
    preProvisioningHook: Optional[ProvisioningHook] = None
    provisioningRoleArn: RoleArn
    tags: Optional[TagList] = None
    templateBody: TemplateBody
    templateName: TemplateName
    type: Optional[TemplateType] = None


class CreateRoleAliasRequest(BaseModel):
    credentialDurationSeconds: Optional[CredentialDurationSeconds] = None
    roleArn: RoleArn
    tags: Optional[TagList] = None


class CreateScheduledAuditRequest(BaseModel):
    dayOfMonth: Optional[DayOfMonth] = None
    dayOfWeek: Optional[DayOfWeek] = None
    frequency: AuditFrequency
    tags: Optional[TagList] = None
    targetCheckNames: TargetAuditCheckNames


class CreateStreamRequest(BaseModel):
    description: Optional[StreamDescription] = None
    files: StreamFiles
    roleArn: RoleArn
    tags: Optional[TagList] = None


class CreateThingGroupRequest(BaseModel):
    parentGroupName: Optional[ThingGroupName] = None
    tags: Optional[TagList] = None
    thingGroupProperties: Optional[ThingGroupProperties] = None


class CreateThingTypeRequest(BaseModel):
    tags: Optional[TagList] = None
    thingTypeProperties: Optional[ThingTypeProperties] = None


class DeleteAuditSuppressionRequest(BaseModel):
    checkName: AuditCheckName
    resourceIdentifier: ResourceIdentifier


class DescribeAuditSuppressionRequest(BaseModel):
    checkName: AuditCheckName
    resourceIdentifier: ResourceIdentifier


class DescribeAuditSuppressionResponse(BaseModel):
    checkName: Optional[AuditCheckName] = None
    description: Optional[AuditDescription] = None
    expirationDate: Optional[Timestamp] = None
    resourceIdentifier: Optional[ResourceIdentifier] = None
    suppressIndefinitely: Optional[SuppressIndefinitely] = None


class DescribeAuditTaskResponse(BaseModel):
    auditDetails: Optional[AuditDetails] = None
    scheduledAuditName: Optional[ScheduledAuditName] = None
    taskStartTime: Optional[Timestamp] = None
    taskStatistics: Optional[TaskStatistics] = None
    taskStatus: Optional[AuditTaskStatus] = None
    taskType: Optional[AuditTaskType] = None


class DescribeCACertificateResponse(BaseModel):
    certificateDescription: Optional[CACertificateDescription] = None
    registrationConfig: Optional[RegistrationConfig] = None


class DescribeCertificateResponse(BaseModel):
    certificateDescription: Optional[CertificateDescription] = None


class DescribeEventConfigurationsResponse(BaseModel):
    creationDate: Optional[CreationDate] = None
    eventConfigurations: Optional[EventConfigurations] = None
    lastModifiedDate: Optional[LastModifiedDate] = None


class DescribeManagedJobTemplateResponse(BaseModel):
    description: Optional[JobDescription] = None
    document: Optional[JobDocument] = None
    documentParameters: Optional[DocumentParameters] = None
    environments: Optional[Environments] = None
    templateArn: Optional[JobTemplateArn] = None
    templateName: Optional[ManagedJobTemplateName] = None
    templateVersion: Optional[ManagedTemplateVersion] = None


class DescribeProvisioningTemplateResponse(BaseModel):
    creationDate: Optional[DateType] = None
    defaultVersionId: Optional[TemplateVersionId] = None
    description: Optional[TemplateDescription] = None
    enabled: Optional[Enabled] = None
    lastModifiedDate: Optional[DateType] = None
    preProvisioningHook: Optional[ProvisioningHook] = None
    provisioningRoleArn: Optional[RoleArn] = None
    templateArn: Optional[TemplateArn] = None
    templateBody: Optional[TemplateBody] = None
    templateName: Optional[TemplateName] = None
    type: Optional[TemplateType] = None


class DescribeRoleAliasResponse(BaseModel):
    roleAliasDescription: Optional[RoleAliasDescription] = None


class DescribeStreamResponse(BaseModel):
    streamInfo: Optional[StreamInfo] = None


class DetectMitigationActionsTaskTarget(BaseModel):
    behaviorName: Optional[BehaviorName] = None
    securityProfileName: Optional[SecurityProfileName] = None
    violationIds: Optional[TargetViolationIdsForDetectMitigationActions] = None


class DynamoDBv2Action(BaseModel):
    putItem: PutItemInput
    roleArn: AwsArn


class EffectivePolicies(RootModel[List[EffectivePolicy]]):
    root: List[EffectivePolicy]


class FileLocation(BaseModel):
    s3Location: Optional[S3Location] = None
    stream: Optional[Stream] = None


class GetBehaviorModelTrainingSummariesResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    summaries: Optional[BehaviorModelTrainingSummaries] = None


class GetEffectivePoliciesResponse(BaseModel):
    effectivePolicies: Optional[EffectivePolicies] = None


class GetPercentilesResponse(BaseModel):
    percentiles: Optional[Percentiles] = None


class GetStatisticsResponse(BaseModel):
    statistics: Optional[Statistics] = None


class HttpAuthorization(BaseModel):
    sigv4: Optional[SigV4Authorization] = None


class IndexingFilter(BaseModel):
    namedShadowNames: Optional[NamedShadowNamesFilter] = None


class IotSiteWiseAction(BaseModel):
    putAssetPropertyValueEntries: PutAssetPropertyValueEntryList
    roleArn: AwsArn


class JobExecution(BaseModel):
    approximateSecondsBeforeTimedOut: Optional[ApproximateSecondsBeforeTimedOut] = None
    executionNumber: Optional[ExecutionNumber] = None
    forceCanceled: Optional[Forced] = None
    jobId: Optional[JobId] = None
    lastUpdatedAt: Optional[DateType] = None
    queuedAt: Optional[DateType] = None
    startedAt: Optional[DateType] = None
    status: Optional[JobExecutionStatus] = None
    statusDetails: Optional[JobExecutionStatusDetails] = None
    thingArn: Optional[ThingArn] = None
    versionNumber: Optional[VersionNumber] = None


class JobExecutionsRetryConfig(BaseModel):
    criteriaList: RetryCriteriaList


class ListAuditFindingsRequest(BaseModel):
    checkName: Optional[AuditCheckName] = None
    endTime: Optional[Timestamp] = None
    listSuppressedFindings: Optional[ListSuppressedFindings] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    resourceIdentifier: Optional[ResourceIdentifier] = None
    startTime: Optional[Timestamp] = None
    taskId: Optional[AuditTaskId] = None


class ListAuditSuppressionsRequest(BaseModel):
    ascendingOrder: Optional[AscendingOrder] = None
    checkName: Optional[AuditCheckName] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    resourceIdentifier: Optional[ResourceIdentifier] = None


class ListAuditSuppressionsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    suppressions: Optional[AuditSuppressionList] = None


class ListBillingGroupsResponse(BaseModel):
    billingGroups: Optional[BillingGroupNameAndArnList] = None
    nextToken: Optional[NextToken] = None


class ListManagedJobTemplatesResponse(BaseModel):
    managedJobTemplates: Optional[ManagedJobTemplatesSummaryList] = None
    nextToken: Optional[NextToken] = None


class ListMitigationActionsResponse(BaseModel):
    actionIdentifiers: Optional[MitigationActionIdentifierList] = None
    nextToken: Optional[NextToken] = None


class ListPolicyVersionsResponse(BaseModel):
    policyVersions: Optional[PolicyVersions] = None


class ListScheduledAuditsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    scheduledAudits: Optional[ScheduledAuditMetadataList] = None


class ListSecurityProfilesForTargetResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    securityProfileTargetMappings: Optional[SecurityProfileTargetMappings] = None


class ListSecurityProfilesResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    securityProfileIdentifiers: Optional[SecurityProfileIdentifiers] = None


class ListStreamsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    streams: Optional[StreamsSummary] = None


class ListTagsForResourceResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    tags: Optional[TagList] = None


class ListTargetsForSecurityProfileResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    securityProfileTargets: Optional[SecurityProfileTargets] = None


class ListThingGroupsForThingResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    thingGroups: Optional[ThingGroupNameAndArnList] = None


class ListThingGroupsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    thingGroups: Optional[ThingGroupNameAndArnList] = None


class ListThingTypesResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    thingTypes: Optional[ThingTypeList] = None


class ListThingsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    things: Optional[ThingAttributeList] = None


class ListTopicRulesResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    rules: Optional[TopicRuleList] = None


class ListV2LoggingLevelsResponse(BaseModel):
    logTargetConfigurations: Optional[LogTargetConfigurations] = None
    nextToken: Optional[NextToken] = None


class LocationAction(BaseModel):
    deviceId: String
    latitude: String
    longitude: String
    roleArn: AwsArn
    timestamp: Optional[LocationTimestamp] = None
    trackerName: String


class MetricValue(BaseModel):
    cidrs: Optional[Cidrs] = None
    count: Optional[UnsignedLong] = None
    number: Optional[Number] = None
    numbers: Optional[NumberList] = None
    ports: Optional[Ports] = None
    strings: Optional[StringList] = None


class MitigationActionParams(BaseModel):
    addThingsToThingGroupParams: Optional[AddThingsToThingGroupParams] = None
    enableIoTLoggingParams: Optional[EnableIoTLoggingParams] = None
    publishFindingToSnsParams: Optional[PublishFindingToSnsParams] = None
    replaceDefaultPolicyVersionParams: Optional[ReplaceDefaultPolicyVersionParams] = (
        None
    )
    updateCACertificateParams: Optional[UpdateCACertificateParams] = None
    updateDeviceCertificateParams: Optional[UpdateDeviceCertificateParams] = None


class NonCompliantResource(BaseModel):
    additionalInfo: Optional[StringMap] = None
    resourceIdentifier: Optional[ResourceIdentifier] = None
    resourceType: Optional[ResourceType] = None


class OTAUpdateFile(BaseModel):
    attributes: Optional[AttributesMap] = None
    codeSigning: Optional[CodeSigning] = None
    fileLocation: Optional[FileLocation] = None
    fileName: Optional[FileName] = None
    fileType: Optional[FileType] = None
    fileVersion: Optional[OTAUpdateFileVersion] = None


class OTAUpdateFiles(RootModel[List[OTAUpdateFile]]):
    root: List[OTAUpdateFile] = Field(..., min_length=1)


class Policies(RootModel[List[Policy]]):
    root: List[Policy]


class ProvisioningTemplateListing(RootModel[List[ProvisioningTemplateSummary]]):
    root: List[ProvisioningTemplateSummary]


class ProvisioningTemplateVersionListing(
    RootModel[List[ProvisioningTemplateVersionSummary]]
):
    root: List[ProvisioningTemplateVersionSummary]


class RegisterCACertificateRequest(BaseModel):
    caCertificate: CertificatePem
    certificateMode: Optional[CertificateMode] = None
    registrationConfig: Optional[RegistrationConfig] = None
    tags: Optional[TagList] = None
    verificationCertificate: Optional[CertificatePem] = None


class RelatedResource(BaseModel):
    additionalInfo: Optional[StringMap] = None
    resourceIdentifier: Optional[ResourceIdentifier] = None
    resourceType: Optional[ResourceType] = None


class RelatedResources(RootModel[List[RelatedResource]]):
    root: List[RelatedResource]


class SearchIndexResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    thingGroups: Optional[ThingGroupDocumentList] = None
    things: Optional[ThingDocumentList] = None


class StartDetectMitigationActionsTaskRequest(BaseModel):
    actions: DetectMitigationActionsToExecuteList
    clientRequestToken: ClientRequestToken
    includeOnlyActiveViolations: Optional[NullableBoolean] = None
    includeSuppressedAlerts: Optional[NullableBoolean] = None
    target: DetectMitigationActionsTaskTarget
    violationEventOccurrenceRange: Optional[ViolationEventOccurrenceRange] = None


class ThingGroupMetadata(BaseModel):
    creationDate: Optional[CreationDate] = None
    parentGroupName: Optional[ThingGroupName] = None
    rootToParentThingGroups: Optional[ThingGroupNameAndArnList] = None


class ThingIndexingConfiguration(BaseModel):
    customFields: Optional[Fields] = None
    deviceDefenderIndexingMode: Optional[DeviceDefenderIndexingMode] = None
    filter: Optional[IndexingFilter] = None
    managedFields: Optional[Fields] = None
    namedShadowIndexingMode: Optional[NamedShadowIndexingMode] = None
    thingConnectivityIndexingMode: Optional[ThingConnectivityIndexingMode] = None
    thingIndexingMode: ThingIndexingMode


class TimestreamAction(BaseModel):
    databaseName: TimestreamDatabaseName
    dimensions: TimestreamDimensionList
    roleArn: AwsArn
    tableName: TimestreamTableName
    timestamp: Optional[TimestreamTimestamp] = None


class TopicRuleDestination(BaseModel):
    arn: Optional[AwsArn] = None
    createdAt: Optional[CreatedAtDate] = None
    httpUrlProperties: Optional[HttpUrlDestinationProperties] = None
    lastUpdatedAt: Optional[LastUpdatedAtDate] = None
    status: Optional[TopicRuleDestinationStatus] = None
    statusReason: Optional[String] = None
    vpcProperties: Optional[VpcDestinationProperties] = None


class TopicRuleDestinationConfiguration(BaseModel):
    httpUrlConfiguration: Optional[HttpUrlDestinationConfiguration] = None
    vpcConfiguration: Optional[VpcDestinationConfiguration] = None


class TopicRuleDestinationSummary(BaseModel):
    arn: Optional[AwsArn] = None
    createdAt: Optional[CreatedAtDate] = None
    httpUrlSummary: Optional[HttpUrlDestinationSummary] = None
    lastUpdatedAt: Optional[LastUpdatedAtDate] = None
    status: Optional[TopicRuleDestinationStatus] = None
    statusReason: Optional[String] = None
    vpcDestinationSummary: Optional[VpcDestinationSummary] = None


class UpdateIndexingConfigurationRequest(BaseModel):
    thingGroupIndexingConfiguration: Optional[ThingGroupIndexingConfiguration] = None
    thingIndexingConfiguration: Optional[ThingIndexingConfiguration] = None


class UpdateJobRequest(BaseModel):
    abortConfig: Optional[AbortConfig] = None
    description: Optional[JobDescription] = None
    jobExecutionsRetryConfig: Optional[JobExecutionsRetryConfig] = None
    jobExecutionsRolloutConfig: Optional[JobExecutionsRolloutConfig] = None
    presignedUrlConfig: Optional[PresignedUrlConfig] = None
    timeoutConfig: Optional[TimeoutConfig] = None


class UpdateMitigationActionRequest(BaseModel):
    actionParams: Optional[MitigationActionParams] = None
    roleArn: Optional[RoleArn] = None


class UserProperties(RootModel[List[UserProperty]]):
    root: List[UserProperty] = Field(..., max_length=100, min_length=1)


class ThingIndexingConfiguration1(BaseModel):
    customFields: Optional[Fields] = None
    deviceDefenderIndexingMode: Optional[DeviceDefenderIndexingMode] = None
    filter: Optional[IndexingFilter] = None
    managedFields: Optional[Fields] = None
    namedShadowIndexingMode: Optional[NamedShadowIndexingMode] = None
    thingConnectivityIndexingMode: Optional[ThingConnectivityIndexingMode] = None
    thingIndexingMode: Optional[ThingIndexingMode] = None


class IndexingConfigPostRequest(BaseModel):
    thingGroupIndexingConfiguration: Optional[ThingGroupIndexingConfiguration1] = Field(
        None, description='Thing group indexing configuration.'
    )
    thingIndexingConfiguration: Optional[ThingIndexingConfiguration1] = Field(
        None,
        description='The thing indexing configuration. For more information, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/managing-index.html">Managing Thing Indexing</a>.',
    )


class AwsJobExecutionsRolloutConfig(BaseModel):
    exponentialRate: Optional[AwsJobExponentialRolloutRate] = None
    maximumPerMinute: Optional[MaximumPerMinute] = None


class OtaUpdatesOtaUpdateIdPostRequest(BaseModel):
    additionalParameters: Optional[Dict[str, Value]] = Field(
        None,
        description='A list of additional OTA update parameters which are name-value pairs.',
    )
    awsJobAbortConfig: Optional[AwsJobAbortConfig1] = Field(
        None,
        description='The criteria that determine when and how a job abort takes place.',
    )
    awsJobExecutionsRolloutConfig: Optional[AwsJobExecutionsRolloutConfig] = Field(
        None, description='Configuration for the rollout of OTA updates.'
    )
    awsJobPresignedUrlConfig: Optional[AwsJobPresignedUrlConfig] = Field(
        None,
        description='Configuration information for pre-signed URLs. Valid when <code>protocols</code> contains HTTP.',
    )
    awsJobTimeoutConfig: Optional[AwsJobTimeoutConfig] = Field(
        None,
        description='Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to <code>IN_PROGRESS</code>. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to <code>TIMED_OUT</code>.',
    )
    description: Optional[constr(pattern=r'[^\p{C}]+', max_length=2028)] = Field(
        None, description='The description of the OTA update.'
    )
    files: List[OTAUpdateFile] = Field(
        ..., description='The files to be streamed by the OTA update.', min_length=1
    )
    protocols: Optional[List[Protocol]] = Field(
        None,
        description='The protocol used to transfer the OTA update image. Valid values are [HTTP], [MQTT], [HTTP, MQTT]. When both HTTP and MQTT are specified, the target device can choose the protocol.',
        max_length=2,
        min_length=1,
    )
    roleArn: constr(min_length=20, max_length=2048) = Field(
        ...,
        description='The IAM role that grants Amazon Web Services IoT Core access to the Amazon S3, IoT jobs and Amazon Web Services Code Signing resources to create an OTA update job.',
    )
    tags: Optional[List[Tag]] = Field(
        None, description='Metadata which can be used to manage updates.'
    )
    targetSelection: Optional[TargetSelection] = Field(
        None,
        description='Specifies whether the update will continue to run (CONTINUOUS), or will be complete after all the things specified as targets have completed the update (SNAPSHOT). If continuous, the update may also be run on a thing when a change is detected in a target. For example, an update will run on a thing when the thing is added to a target group, even after the update was completed by all things originally in the group. Valid values: CONTINUOUS | SNAPSHOT.',
    )
    targets: List[Target] = Field(
        ..., description='The devices targeted to receive OTA updates.', min_length=1
    )


class Allowed(BaseModel):
    policies: Optional[Policies] = None


class AuditFinding(BaseModel):
    checkName: Optional[AuditCheckName] = None
    findingId: Optional[FindingId] = None
    findingTime: Optional[Timestamp] = None
    isSuppressed: Optional[IsSuppressed] = None
    nonCompliantResource: Optional[NonCompliantResource] = None
    reasonForNonCompliance: Optional[ReasonForNonCompliance] = None
    reasonForNonComplianceCode: Optional[ReasonForNonComplianceCode] = None
    relatedResources: Optional[RelatedResources] = None
    severity: Optional[AuditFindingSeverity] = None
    taskId: Optional[AuditTaskId] = None
    taskStartTime: Optional[Timestamp] = None


class AuditFindings(RootModel[List[AuditFinding]]):
    root: List[AuditFinding]


class BehaviorCriteria(BaseModel):
    comparisonOperator: Optional[ComparisonOperator] = None
    consecutiveDatapointsToAlarm: Optional[ConsecutiveDatapointsToAlarm] = None
    consecutiveDatapointsToClear: Optional[ConsecutiveDatapointsToClear] = None
    durationSeconds: Optional[DurationSeconds] = None
    mlDetectionConfig: Optional[MachineLearningDetectionConfig] = None
    statisticalThreshold: Optional[StatisticalThreshold] = None
    value: Optional[MetricValue] = None


class CreateJobRequest(BaseModel):
    abortConfig: Optional[AbortConfig] = None
    description: Optional[JobDescription] = None
    document: Optional[JobDocument] = None
    documentParameters: Optional[ParameterMap] = None
    documentSource: Optional[JobDocumentSource] = None
    jobExecutionsRetryConfig: Optional[JobExecutionsRetryConfig] = None
    jobExecutionsRolloutConfig: Optional[JobExecutionsRolloutConfig] = None
    jobTemplateArn: Optional[JobTemplateArn] = None
    namespaceId: Optional[NamespaceId] = None
    presignedUrlConfig: Optional[PresignedUrlConfig] = None
    schedulingConfig: Optional[SchedulingConfig] = None
    tags: Optional[TagList] = None
    targetSelection: Optional[TargetSelection] = None
    targets: JobTargets
    timeoutConfig: Optional[TimeoutConfig] = None


class CreateJobTemplateRequest(BaseModel):
    abortConfig: Optional[AbortConfig] = None
    description: JobDescription
    document: Optional[JobDocument] = None
    documentSource: Optional[JobDocumentSource] = None
    jobArn: Optional[JobArn] = None
    jobExecutionsRetryConfig: Optional[JobExecutionsRetryConfig] = None
    jobExecutionsRolloutConfig: Optional[JobExecutionsRolloutConfig] = None
    maintenanceWindows: Optional[MaintenanceWindows] = None
    presignedUrlConfig: Optional[PresignedUrlConfig] = None
    tags: Optional[TagList] = None
    timeoutConfig: Optional[TimeoutConfig] = None


class CreateMitigationActionRequest(BaseModel):
    actionParams: MitigationActionParams
    roleArn: RoleArn
    tags: Optional[TagList] = None


class CreateOTAUpdateRequest(BaseModel):
    additionalParameters: Optional[AdditionalParameterMap] = None
    awsJobAbortConfig: Optional[AwsJobAbortConfig] = None
    awsJobExecutionsRolloutConfig: Optional[AwsJobExecutionsRolloutConfig] = None
    awsJobPresignedUrlConfig: Optional[AwsJobPresignedUrlConfig] = None
    awsJobTimeoutConfig: Optional[AwsJobTimeoutConfig] = None
    description: Optional[OTAUpdateDescription] = None
    files: OTAUpdateFiles
    protocols: Optional[Protocols] = None
    roleArn: RoleArn
    tags: Optional[TagList] = None
    targetSelection: Optional[TargetSelection] = None
    targets: Targets


class CreateTopicRuleDestinationRequest(BaseModel):
    destinationConfiguration: TopicRuleDestinationConfiguration


class CreateTopicRuleDestinationResponse(BaseModel):
    topicRuleDestination: Optional[TopicRuleDestination] = None


class DescribeAuditFindingResponse(BaseModel):
    finding: Optional[AuditFinding] = None


class DescribeJobExecutionResponse(BaseModel):
    execution: Optional[JobExecution] = None


class DescribeJobTemplateResponse(BaseModel):
    abortConfig: Optional[AbortConfig] = None
    createdAt: Optional[DateType] = None
    description: Optional[JobDescription] = None
    document: Optional[JobDocument] = None
    documentSource: Optional[JobDocumentSource] = None
    jobExecutionsRetryConfig: Optional[JobExecutionsRetryConfig] = None
    jobExecutionsRolloutConfig: Optional[JobExecutionsRolloutConfig] = None
    jobTemplateArn: Optional[JobTemplateArn] = None
    jobTemplateId: Optional[JobTemplateId] = None
    maintenanceWindows: Optional[MaintenanceWindows] = None
    presignedUrlConfig: Optional[PresignedUrlConfig] = None
    timeoutConfig: Optional[TimeoutConfig] = None


class DescribeMitigationActionResponse(BaseModel):
    actionArn: Optional[MitigationActionArn] = None
    actionId: Optional[MitigationActionId] = None
    actionName: Optional[MitigationActionName] = None
    actionParams: Optional[MitigationActionParams] = None
    actionType: Optional[MitigationActionType] = None
    creationDate: Optional[Timestamp] = None
    lastModifiedDate: Optional[Timestamp] = None
    roleArn: Optional[RoleArn] = None


class DescribeThingGroupResponse(BaseModel):
    indexName: Optional[IndexName] = None
    queryString: Optional[QueryString] = None
    queryVersion: Optional[QueryVersion] = None
    status: Optional[DynamicGroupStatus] = None
    thingGroupArn: Optional[ThingGroupArn] = None
    thingGroupId: Optional[ThingGroupId] = None
    thingGroupMetadata: Optional[ThingGroupMetadata] = None
    thingGroupName: Optional[ThingGroupName] = None
    thingGroupProperties: Optional[ThingGroupProperties] = None
    version: Optional[Version] = None


class ExplicitDeny(BaseModel):
    policies: Optional[Policies] = None


class GetIndexingConfigurationResponse(BaseModel):
    thingGroupIndexingConfiguration: Optional[ThingGroupIndexingConfiguration] = None
    thingIndexingConfiguration: Optional[ThingIndexingConfiguration] = None


class GetTopicRuleDestinationResponse(BaseModel):
    topicRuleDestination: Optional[TopicRuleDestination] = None


class HttpAction(BaseModel):
    auth: Optional[HttpAuthorization] = None
    confirmationUrl: Optional[Url] = None
    headers: Optional[HeaderList] = None
    url: Url


class ImplicitDeny(BaseModel):
    policies: Optional[Policies] = None


class Job(BaseModel):
    abortConfig: Optional[AbortConfig] = None
    comment: Optional[Comment] = None
    completedAt: Optional[DateType] = None
    createdAt: Optional[DateType] = None
    description: Optional[JobDescription] = None
    documentParameters: Optional[ParameterMap] = None
    forceCanceled: Optional[Forced] = None
    isConcurrent: Optional[BooleanWrapperObject] = None
    jobArn: Optional[JobArn] = None
    jobExecutionsRetryConfig: Optional[JobExecutionsRetryConfig] = None
    jobExecutionsRolloutConfig: Optional[JobExecutionsRolloutConfig] = None
    jobId: Optional[JobId] = None
    jobProcessDetails: Optional[JobProcessDetails] = None
    jobTemplateArn: Optional[JobTemplateArn] = None
    lastUpdatedAt: Optional[DateType] = None
    namespaceId: Optional[NamespaceId] = None
    presignedUrlConfig: Optional[PresignedUrlConfig] = None
    reasonCode: Optional[ReasonCode] = None
    scheduledJobRollouts: Optional[ScheduledJobRolloutList] = None
    schedulingConfig: Optional[SchedulingConfig] = None
    status: Optional[JobStatus] = None
    targetSelection: Optional[TargetSelection] = None
    targets: Optional[JobTargets] = None
    timeoutConfig: Optional[TimeoutConfig] = None


class ListAttachedPoliciesResponse(BaseModel):
    nextMarker: Optional[Marker] = None
    policies: Optional[Policies] = None


class ListAuditFindingsResponse(BaseModel):
    findings: Optional[AuditFindings] = None
    nextToken: Optional[NextToken] = None


class ListPoliciesResponse(BaseModel):
    nextMarker: Optional[Marker] = None
    policies: Optional[Policies] = None


class ListPrincipalPoliciesResponse(BaseModel):
    nextMarker: Optional[Marker] = None
    policies: Optional[Policies] = None


class ListProvisioningTemplateVersionsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    versions: Optional[ProvisioningTemplateVersionListing] = None


class ListProvisioningTemplatesResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    templates: Optional[ProvisioningTemplateListing] = None


class ListRelatedResourcesForAuditFindingResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    relatedResources: Optional[RelatedResources] = None


class MetricDatum(BaseModel):
    timestamp: Optional[Timestamp] = None
    value: Optional[MetricValue] = None


class MetricDatumList(RootModel[List[MetricDatum]]):
    root: List[MetricDatum]


class MitigationAction(BaseModel):
    actionParams: Optional[MitigationActionParams] = None
    id: Optional[MitigationActionId] = None
    name: Optional[MitigationActionName] = None
    roleArn: Optional[RoleArn] = None


class MitigationActionList(RootModel[List[MitigationAction]]):
    root: List[MitigationAction]


class MqttHeaders(BaseModel):
    contentType: Optional[ContentType] = None
    correlationData: Optional[CorrelationData] = None
    messageExpiry: Optional[MessageExpiry] = None
    payloadFormatIndicator: Optional[PayloadFormatIndicator] = None
    responseTopic: Optional[ResponseTopic] = None
    userProperties: Optional[UserProperties] = None


class OTAUpdateInfo(BaseModel):
    additionalParameters: Optional[AdditionalParameterMap] = None
    awsIotJobArn: Optional[AwsIotJobArn] = None
    awsIotJobId: Optional[AwsIotJobId] = None
    awsJobExecutionsRolloutConfig: Optional[AwsJobExecutionsRolloutConfig] = None
    awsJobPresignedUrlConfig: Optional[AwsJobPresignedUrlConfig] = None
    creationDate: Optional[DateType] = None
    description: Optional[OTAUpdateDescription] = None
    errorInfo: Optional[ErrorInfo] = None
    lastModifiedDate: Optional[DateType] = None
    otaUpdateArn: Optional[OTAUpdateArn] = None
    otaUpdateFiles: Optional[OTAUpdateFiles] = None
    otaUpdateId: Optional[OTAUpdateId] = None
    otaUpdateStatus: Optional[OTAUpdateStatus] = None
    protocols: Optional[Protocols] = None
    targetSelection: Optional[TargetSelection] = None
    targets: Optional[Targets] = None


class RepublishAction(BaseModel):
    headers: Optional[MqttHeaders] = None
    qos: Optional[Qos] = None
    roleArn: AwsArn
    topic: TopicPattern


class TopicRuleDestinationSummaries(RootModel[List[TopicRuleDestinationSummary]]):
    root: List[TopicRuleDestinationSummary]


class Action(BaseModel):
    cloudwatchAlarm: Optional[CloudwatchAlarmAction] = None
    cloudwatchLogs: Optional[CloudwatchLogsAction] = None
    cloudwatchMetric: Optional[CloudwatchMetricAction] = None
    dynamoDB: Optional[DynamoDBAction] = None
    dynamoDBv2: Optional[DynamoDBv2Action] = None
    elasticsearch: Optional[ElasticsearchAction] = None
    firehose: Optional[FirehoseAction] = None
    http: Optional[HttpAction] = None
    iotAnalytics: Optional[IotAnalyticsAction] = None
    iotEvents: Optional[IotEventsAction] = None
    iotSiteWise: Optional[IotSiteWiseAction] = None
    kafka: Optional[KafkaAction] = None
    kinesis: Optional[KinesisAction] = None
    lambda_: Optional[LambdaAction] = Field(None, alias='lambda')
    location: Optional[LocationAction] = None
    openSearch: Optional[OpenSearchAction] = None
    republish: Optional[RepublishAction] = None
    s3: Optional[S3Action] = None
    salesforce: Optional[SalesforceAction] = None
    sns: Optional[SnsAction] = None
    sqs: Optional[SqsAction] = None
    stepFunctions: Optional[StepFunctionsAction] = None
    timestream: Optional[TimestreamAction] = None


class ActionList(RootModel[List[Action]]):
    root: List[Action] = Field(..., max_length=10, min_length=0)


class Behavior(BaseModel):
    criteria: Optional[BehaviorCriteria] = None
    metric: Optional[BehaviorMetric] = None
    metricDimension: Optional[MetricDimension] = None
    name: BehaviorName
    suppressAlerts: Optional[SuppressAlerts] = None


class Behaviors(RootModel[List[Behavior]]):
    root: List[Behavior] = Field(..., max_length=100)


class CreateSecurityProfileRequest(BaseModel):
    additionalMetricsToRetain: Optional[AdditionalMetricsToRetainList] = None
    additionalMetricsToRetainV2: Optional[AdditionalMetricsToRetainV2List] = None
    alertTargets: Optional[AlertTargets] = None
    behaviors: Optional[Behaviors] = None
    securityProfileDescription: Optional[SecurityProfileDescription] = None
    tags: Optional[TagList] = None


class Denied(BaseModel):
    explicitDeny: Optional[ExplicitDeny] = None
    implicitDeny: Optional[ImplicitDeny] = None


class DescribeAuditMitigationActionsTaskResponse(BaseModel):
    actionsDefinition: Optional[MitigationActionList] = None
    auditCheckToActionsMapping: Optional[AuditCheckToActionsMapping] = None
    endTime: Optional[Timestamp] = None
    startTime: Optional[Timestamp] = None
    target: Optional[AuditMitigationActionsTaskTarget] = None
    taskStatistics: Optional[AuditMitigationActionsTaskStatistics] = None
    taskStatus: Optional[AuditMitigationActionsTaskStatus] = None


class DescribeJobResponse(BaseModel):
    documentSource: Optional[JobDocumentSource] = None
    job: Optional[Job] = None


class DescribeSecurityProfileResponse(BaseModel):
    additionalMetricsToRetain: Optional[AdditionalMetricsToRetainList] = None
    additionalMetricsToRetainV2: Optional[AdditionalMetricsToRetainV2List] = None
    alertTargets: Optional[AlertTargets] = None
    behaviors: Optional[Behaviors] = None
    creationDate: Optional[Timestamp] = None
    lastModifiedDate: Optional[Timestamp] = None
    securityProfileArn: Optional[SecurityProfileArn] = None
    securityProfileDescription: Optional[SecurityProfileDescription] = None
    securityProfileName: Optional[SecurityProfileName] = None
    version: Optional[Version] = None


class DetectMitigationActionsTaskSummary(BaseModel):
    actionsDefinition: Optional[MitigationActionList] = None
    onlyActiveViolationsIncluded: Optional[PrimitiveBoolean] = None
    suppressedAlertsIncluded: Optional[PrimitiveBoolean] = None
    target: Optional[DetectMitigationActionsTaskTarget] = None
    taskEndTime: Optional[Timestamp] = None
    taskId: Optional[MitigationActionsTaskId] = None
    taskStartTime: Optional[Timestamp] = None
    taskStatistics: Optional[DetectMitigationActionsTaskStatistics] = None
    taskStatus: Optional[DetectMitigationActionsTaskStatus] = None
    violationEventOccurrenceRange: Optional[ViolationEventOccurrenceRange] = None


class DetectMitigationActionsTaskSummaryList(
    RootModel[List[DetectMitigationActionsTaskSummary]]
):
    root: List[DetectMitigationActionsTaskSummary]


class GetOTAUpdateResponse(BaseModel):
    otaUpdateInfo: Optional[OTAUpdateInfo] = None


class ListDetectMitigationActionsTasksResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    tasks: Optional[DetectMitigationActionsTaskSummaryList] = None


class ListMetricValuesResponse(BaseModel):
    metricDatumList: Optional[MetricDatumList] = None
    nextToken: Optional[NextToken] = None


class ListTopicRuleDestinationsResponse(BaseModel):
    destinationSummaries: Optional[TopicRuleDestinationSummaries] = None
    nextToken: Optional[NextToken] = None


class TopicRule(BaseModel):
    actions: Optional[ActionList] = None
    awsIotSqlVersion: Optional[AwsIotSqlVersion] = None
    createdAt: Optional[CreatedAtDate] = None
    description: Optional[Description] = None
    errorAction: Optional[Action] = None
    ruleDisabled: Optional[IsDisabled] = None
    ruleName: Optional[RuleName] = None
    sql: Optional[SQL] = None


class TopicRulePayload(BaseModel):
    actions: ActionList
    awsIotSqlVersion: Optional[AwsIotSqlVersion] = None
    description: Optional[Description] = None
    errorAction: Optional[Action] = None
    ruleDisabled: Optional[IsDisabled] = None
    sql: SQL


class UpdateSecurityProfileRequest(BaseModel):
    additionalMetricsToRetain: Optional[AdditionalMetricsToRetainList] = None
    additionalMetricsToRetainV2: Optional[AdditionalMetricsToRetainV2List] = None
    alertTargets: Optional[AlertTargets] = None
    behaviors: Optional[Behaviors] = None
    deleteAdditionalMetricsToRetain: Optional[DeleteAdditionalMetricsToRetain] = None
    deleteAlertTargets: Optional[DeleteAlertTargets] = None
    deleteBehaviors: Optional[DeleteBehaviors] = None
    securityProfileDescription: Optional[SecurityProfileDescription] = None


class UpdateSecurityProfileResponse(BaseModel):
    additionalMetricsToRetain: Optional[AdditionalMetricsToRetainList] = None
    additionalMetricsToRetainV2: Optional[AdditionalMetricsToRetainV2List] = None
    alertTargets: Optional[AlertTargets] = None
    behaviors: Optional[Behaviors] = None
    creationDate: Optional[Timestamp] = None
    lastModifiedDate: Optional[Timestamp] = None
    securityProfileArn: Optional[SecurityProfileArn] = None
    securityProfileDescription: Optional[SecurityProfileDescription] = None
    securityProfileName: Optional[SecurityProfileName] = None
    version: Optional[Version] = None


class ValidateSecurityProfileBehaviorsRequest(BaseModel):
    behaviors: Behaviors


class ViolationEvent(BaseModel):
    behavior: Optional[Behavior] = None
    metricValue: Optional[MetricValue] = None
    securityProfileName: Optional[SecurityProfileName] = None
    thingName: Optional[DeviceDefenderThingName] = None
    verificationState: Optional[VerificationState] = None
    verificationStateDescription: Optional[VerificationStateDescription] = None
    violationEventAdditionalInfo: Optional[ViolationEventAdditionalInfo] = None
    violationEventTime: Optional[Timestamp] = None
    violationEventType: Optional[ViolationEventType] = None
    violationId: Optional[ViolationId] = None


class ViolationEvents(RootModel[List[ViolationEvent]]):
    root: List[ViolationEvent]


class TopicRulePayload1(BaseModel):
    actions: Optional[ActionList] = None
    awsIotSqlVersion: Optional[AwsIotSqlVersion] = None
    description: Optional[Description] = None
    errorAction: Optional[Action] = None
    ruleDisabled: Optional[IsDisabled] = None
    sql: Optional[SQL] = None


class RulesRuleNamePatchRequest(BaseModel):
    topicRulePayload: TopicRulePayload1 = Field(..., description='Describes a rule.')


class RulesRuleNamePostRequest(BaseModel):
    topicRulePayload: TopicRulePayload1 = Field(..., description='Describes a rule.')


class SecurityProfileBehaviorsValidatePostRequest(BaseModel):
    behaviors: List[Behavior] = Field(
        ...,
        description='Specifies the behaviors that, when violated by a device (thing), cause an alert.',
        max_length=100,
    )


class SecurityProfilesSecurityProfileNamePatchRequest(BaseModel):
    additionalMetricsToRetain: Optional[List[BehaviorMetric]] = Field(
        None,
        description="<p> <i>Please use <a>UpdateSecurityProfileRequest$additionalMetricsToRetainV2</a> instead.</i> </p> <p>A list of metrics whose data is retained (stored). By default, data is retained for any metric used in the profile's <code>behaviors</code>, but it is also retained for any metric specified here. Can be used with custom metrics; cannot be used with dimensions.</p>",
    )
    additionalMetricsToRetainV2: Optional[List[MetricToRetain]] = Field(
        None,
        description="A list of metrics whose data is retained (stored). By default, data is retained for any metric used in the profile's behaviors, but it is also retained for any metric specified here. Can be used with custom metrics; cannot be used with dimensions.",
    )
    alertTargets: Optional[Dict[str, AlertTarget]] = Field(
        None,
        description='Where the alerts are sent. (Alerts are always sent to the console.)',
    )
    behaviors: Optional[List[Behavior]] = Field(
        None,
        description='Specifies the behaviors that, when violated by a device (thing), cause an alert.',
        max_length=100,
    )
    deleteAdditionalMetricsToRetain: Optional[bool] = Field(
        None,
        description='If true, delete all <code>additionalMetricsToRetain</code> defined for this security profile. If any <code>additionalMetricsToRetain</code> are defined in the current invocation, an exception occurs.',
    )
    deleteAlertTargets: Optional[bool] = Field(
        None,
        description='If true, delete all <code>alertTargets</code> defined for this security profile. If any <code>alertTargets</code> are defined in the current invocation, an exception occurs.',
    )
    deleteBehaviors: Optional[bool] = Field(
        None,
        description='If true, delete all <code>behaviors</code> defined for this security profile. If any <code>behaviors</code> are defined in the current invocation, an exception occurs.',
    )
    securityProfileDescription: Optional[
        constr(pattern=r'[\p{Graph}\x20]*', max_length=1000)
    ] = Field(None, description='A description of the security profile.')


class SecurityProfilesSecurityProfileNamePostRequest(BaseModel):
    additionalMetricsToRetain: Optional[List[BehaviorMetric]] = Field(
        None,
        description="<p> <i>Please use <a>CreateSecurityProfileRequest$additionalMetricsToRetainV2</a> instead.</i> </p> <p>A list of metrics whose data is retained (stored). By default, data is retained for any metric used in the profile's <code>behaviors</code>, but it is also retained for any metric specified here. Can be used with custom metrics; cannot be used with dimensions.</p>",
    )
    additionalMetricsToRetainV2: Optional[List[MetricToRetain]] = Field(
        None,
        description="A list of metrics whose data is retained (stored). By default, data is retained for any metric used in the profile's <code>behaviors</code>, but it is also retained for any metric specified here. Can be used with custom metrics; cannot be used with dimensions.",
    )
    alertTargets: Optional[Dict[str, AlertTarget]] = Field(
        None,
        description='Specifies the destinations to which alerts are sent. (Alerts are always sent to the console.) Alerts are generated when a device (thing) violates a behavior.',
    )
    behaviors: Optional[List[Behavior]] = Field(
        None,
        description='Specifies the behaviors that, when violated by a device (thing), cause an alert.',
        max_length=100,
    )
    securityProfileDescription: Optional[
        constr(pattern=r'[\p{Graph}\x20]*', max_length=1000)
    ] = Field(None, description='A description of the security profile.')
    tags: Optional[List[Tag]] = Field(
        None, description='Metadata that can be used to manage the security profile.'
    )


class ActiveViolation(BaseModel):
    behavior: Optional[Behavior] = None
    lastViolationTime: Optional[Timestamp] = None
    lastViolationValue: Optional[MetricValue] = None
    securityProfileName: Optional[SecurityProfileName] = None
    thingName: Optional[DeviceDefenderThingName] = None
    verificationState: Optional[VerificationState] = None
    verificationStateDescription: Optional[VerificationStateDescription] = None
    violationEventAdditionalInfo: Optional[ViolationEventAdditionalInfo] = None
    violationId: Optional[ViolationId] = None
    violationStartTime: Optional[Timestamp] = None


class ActiveViolations(RootModel[List[ActiveViolation]]):
    root: List[ActiveViolation]


class AuthResult(BaseModel):
    allowed: Optional[Allowed] = None
    authDecision: Optional[AuthDecision] = None
    authInfo: Optional[AuthInfo] = None
    denied: Optional[Denied] = None
    missingContextValues: Optional[MissingContextValues] = None


class AuthResults(RootModel[List[AuthResult]]):
    root: List[AuthResult]


class CreateTopicRuleRequest(BaseModel):
    topicRulePayload: TopicRulePayload


class DescribeDetectMitigationActionsTaskResponse(BaseModel):
    taskSummary: Optional[DetectMitigationActionsTaskSummary] = None


class GetTopicRuleResponse(BaseModel):
    rule: Optional[TopicRule] = None
    ruleArn: Optional[RuleArn] = None


class ListActiveViolationsResponse(BaseModel):
    activeViolations: Optional[ActiveViolations] = None
    nextToken: Optional[NextToken] = None


class ListViolationEventsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    violationEvents: Optional[ViolationEvents] = None


class ReplaceTopicRuleRequest(BaseModel):
    topicRulePayload: TopicRulePayload


class TestAuthorizationResponse(BaseModel):
    authResults: Optional[AuthResults] = None
